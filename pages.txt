
--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Applications.tsx ---
"use client";

import { useReducer, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { RefreshCw } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useQuery, useQueryClient } from "@tanstack/react-query";

import { filterApplicationsByMultipleCategories } from "@/components/applications/utils";
import { SubOrgsView } from "@/components/applications/SubOrgsView";
import { ApplicationsView } from "@/components/applications/ApplicationsView";
import { ViewSwitcher } from "@/components/applications/ViewSwitcher";
import { CSVData, SubOrg } from "@/components/applications/types";

// Type definitions
interface ApplicationApiResponse {
  "Sub Org": string;
  application: string;
  risk_level: string;
  time_complexity: string;
  time_quarter?: string;
  status?: string;
  pqc_ready: number;
  vulnerabilities: number;
  algorithms_used: string[] | string;
  current_date?: string;
  last_scan?: string;
}

interface TransformedData {
  applications: CSVData[];
  subOrgs: SubOrg[];
}

// Reducer for filters
const initialFilterState = {
  searchTerm: "",
  selectedRiskFilters: [],
  selectedTimeComplexityFilters: [],
  selectedQuarterFilters: [],
  quarterFromMode: false,
  selectedValueBasedFilters: [],
  currentView: 'suborgs',
  selectedSubOrg: '',
};

function applicationsFilterReducer(state: any, action: any) {
  switch (action.type) {
    case 'SET_SEARCH_TERM':
      return { ...state, searchTerm: action.payload };
    case 'TOGGLE_RISK_FILTER':
      return {
        ...state,
        selectedRiskFilters: state.selectedRiskFilters.includes(action.payload)
          ? state.selectedRiskFilters.filter((r: string) => r !== action.payload)
          : [...state.selectedRiskFilters, action.payload],
      };
    case 'TOGGLE_TIME_COMPLEXITY_FILTER':
      return {
        ...state,
        selectedTimeComplexityFilters: state.selectedTimeComplexityFilters.includes(action.payload)
          ? state.selectedTimeComplexityFilters.filter((c: string) => c !== action.payload)
          : [...state.selectedTimeComplexityFilters, action.payload],
      };
    case 'TOGGLE_QUARTER_FILTER':
      if (state.quarterFromMode) {
        return { ...state, selectedQuarterFilters: action.payload ? [action.payload] : [] };
      } else {
        return {
          ...state,
          selectedQuarterFilters: state.selectedQuarterFilters.includes(action.payload)
            ? state.selectedQuarterFilters.filter((q: string) => q !== action.payload)
            : [...state.selectedQuarterFilters, action.payload],
        };
      }
    case 'SET_QUARTER_FROM_MODE':
      return { ...state, quarterFromMode: action.payload, selectedQuarterFilters: [] };
    case 'TOGGLE_VALUE_BASED_FILTER':
      return {
        ...state,
        selectedValueBasedFilters: state.selectedValueBasedFilters.includes(action.payload)
          ? state.selectedValueBasedFilters.filter((t: string) => t !== action.payload)
          : [...state.selectedValueBasedFilters, action.payload],
      };
    case 'SET_VIEW':
      return { ...initialFilterState, currentView: action.payload };
    case 'SET_SUB_ORG':
      return { ...initialFilterState, currentView: 'suborgapps', selectedSubOrg: action.payload };
    case 'BACK_TO_SUB_ORGS':
        return { ...initialFilterState, currentView: 'suborgs' };
    default:
      return state;
  }
}

// API fetching and transformation
const fetchApplications = async (): Promise<ApplicationApiResponse[]> => {
  const response = await fetch(`${import.meta.env.VITE_API_URL}/apps`);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

const transformData = (rawData: ApplicationApiResponse[]): TransformedData => {
  const applications: CSVData[] = [];
  const subOrgMap: Record<string, { total: number; high: number; medium: number; low: number; pqcSum: number }> = {};

  rawData.forEach((item) => {
    const subOrg = item["Sub Org"];
    const risk = item.risk_level;
    const pqc = item.pqc_ready;

    applications.push({
      application: item.application,
      sub_org: subOrg,
      risk_level: risk,
      time_complexity: item.time_complexity,
      time_quarter: item.time_quarter || item.status || "N/A",
      pqc_ready: pqc,
      vulnerabilities: item.vulnerabilities,
      algorithms_used: Array.isArray(item.algorithms_used)
        ? item.algorithms_used.join(", ")
        : item.algorithms_used,
      last_scan: item.last_scan ? item.last_scan : "N/A",
    });

    if (!subOrgMap[subOrg]) {
      subOrgMap[subOrg] = { total: 0, high: 0, medium: 0, low: 0, pqcSum: 0 };
    }

    subOrgMap[subOrg].total += 1;
    subOrgMap[subOrg].pqcSum += pqc;
    if (risk === "High") subOrgMap[subOrg].high += 1;
    else if (risk === "Medium") subOrgMap[subOrg].medium += 1;
    else subOrgMap[subOrg].low += 1;
  });

  const subOrgs: SubOrg[] = Object.entries(subOrgMap).map(([name, stats]) => ({
    name,
    total_apps: stats.total,
    pqc_ready_percentage: stats.total > 0 ? Math.round(stats.pqcSum / stats.total) : 0,
    high_risk_count: stats.high,
    medium_risk_count: stats.medium,
    low_risk_count: stats.low,
    pqc_status: stats.high > 3 ? "Critical" : stats.medium > 5 ? "Warning" : "Good",
  }));

  return { applications, subOrgs };
};

export default function Applications() {
  const queryClient = useQueryClient();
  const [state, dispatch] = useReducer(applicationsFilterReducer, initialFilterState);

  const { data, error, isLoading, isRefetching, refetch } = useQuery<TransformedData, Error>({
    queryKey: ["applications"],
    queryFn: async () => {
        const rawData = await fetchApplications();
        return transformData(rawData);
    }
  });

  const filteredApplications = useMemo(() => {
    if (!data) return [];
    let filtered = data.applications;
    if (state.currentView === 'suborgapps' && state.selectedSubOrg) {
      filtered = filtered.filter(app => app.sub_org === state.selectedSubOrg);
    }
    return filterApplicationsByMultipleCategories(filtered, {
      searchTerm: state.searchTerm,
      selectedRiskFilters: state.selectedRiskFilters,
      selectedTimeComplexityFilters: state.selectedTimeComplexityFilters,
      selectedQuarterFilters: state.selectedQuarterFilters,
      quarterFromMode: state.quarterFromMode,
      selectedValueBasedFilters: state.selectedValueBasedFilters,
    });
  }, [data, state.searchTerm, state.selectedRiskFilters, state.selectedTimeComplexityFilters, state.selectedQuarterFilters, state.quarterFromMode, state.selectedValueBasedFilters, state.currentView, state.selectedSubOrg]);

  const handleRefresh = () => {
    queryClient.invalidateQueries({ queryKey: ["applications"] });
  };

  if (isLoading) return (
    <div className="min-h-dvh bg-background p-6 flex items-center justify-center">
      <div className="text-center">
        <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
        <p className="text-lg">Loading...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="min-h-dvh bg-background p-6 flex items-center justify-center">
      <div className="text-center">
        <p className="text-lg text-red-500 mb-4">{error.message}</p>
        <Button variant="outline" className="gap-2" onClick={() => refetch()}>
          <RefreshCw className="h-4 w-4 mr-2" />
          Retry
        </Button>
      </div>
    </div>
  );

  const filterProps = {
    searchTerm: state.searchTerm,
    setSearchTerm: (payload: string) => dispatch({ type: 'SET_SEARCH_TERM', payload }),
    selectedRiskFilters: state.selectedRiskFilters,
    toggleRiskFilter: (payload: string) => dispatch({ type: 'TOGGLE_RISK_FILTER', payload }),
    selectedTimeComplexityFilters: state.selectedTimeComplexityFilters,
    toggleTimeComplexityFilter: (payload: string) => dispatch({ type: 'TOGGLE_TIME_COMPLEXITY_FILTER', payload }),
    selectedQuarterFilters: state.selectedQuarterFilters,
    toggleQuarterFilter: (payload: string) => dispatch({ type: 'TOGGLE_QUARTER_FILTER', payload }),
    quarterFromMode: state.quarterFromMode,
    setQuarterFromMode: (payload: boolean) => dispatch({ type: 'SET_QUARTER_FROM_MODE', payload }),
    selectedValueBasedFilters: state.selectedValueBasedFilters,
    toggleValueBasedFilter: (payload: string) => dispatch({ type: 'TOGGLE_VALUE_BASED_FILTER', payload }),
  };

  return (
    <motion.div
      className="min-h-dvh bg-background p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl sm:text-4xl font-bold text-foreground">Applications</h1>
          </div>
        </div>

        {state.currentView !== 'suborgapps' && (
          <ViewSwitcher 
            currentView={state.currentView as 'suborgs' | 'allapps'} 
            onViewSwitch={(view) => dispatch({ type: 'SET_VIEW', payload: view })} 
          />
        )}

        <AnimatePresence mode="wait">
          <motion.div
            key={state.currentView}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="transition-all duration-300 ease-in-out"
          >
            {state.currentView === 'suborgs' && data && (
              <SubOrgsView
                subOrgs={data.subOrgs}
                onSubOrgClick={(subOrgName) => dispatch({ type: 'SET_SUB_ORG', payload: subOrgName })}
                onRefresh={handleRefresh}
                isRefreshing={isRefetching}
              />
            )}
            {(state.currentView === 'allapps' || state.currentView === 'suborgapps') && (
              <ApplicationsView
                currentView={state.currentView}
                selectedSubOrg={state.selectedSubOrg}
                onBack={() => dispatch({ type: 'BACK_TO_SUB_ORGS' })}
                onRefresh={handleRefresh}
                isRefreshing={isRefetching}
                filteredApplications={filteredApplications}
                {...filterProps}
              />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Dashboard.tsx ---
// frontend/src/pages/Dashboard.tsx
import { useEffect, useState, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { MetricCard } from "@/components/dashboard/MetricCard";
import { DashboardMetrics } from "@/components/dashboard/DashboardMetrics";
import RiskBreakdown from "@/components/dashboard/RiskBreakdown";
import MigrationAndRiskCharts from "@/components/dashboard/MigrationAndRiskCharts";
import OrganizationalRiskChart from "@/components/dashboard/OrganizationalRiskChart";
import {
  generateTimelineChart,
  groupDataBySubOrg,
  getRiskChartData,
  calculateMetrics,
  calculateAvgMigration,
  getAssetDistributionData,
} from "@/utils/dashboardUtils";
import { CSVData } from "@/types/dashboardTypes";
import { Activity } from "lucide-react";

export default function Dashboard() {
  const [data, setData] = useState<CSVData[]>([]);
  const [orgName, setOrgName] = useState<string>("");
  const [timelineOption, setTimelineOption] = useState({});
  const [expandedSubOrgs, setExpandedSubOrgs] = useState<Record<string, boolean>>({});

  useEffect(() => {
    // Inject global styles for smooth theme transition.
    // Ideally, this should be in a global stylesheet or a root layout component.
    const styleId = 'theme-transition-style';
    if (document.getElementById(styleId)) {
      return;
    }
    const style = document.createElement('style');
    style.id = styleId;
    style.innerHTML = `
      body,
      div,
      button,
      header,
      footer,
      main,
      section,
      a,
      h1, h2, h3, h4, h5, h6,
      p,
      span,
      label,
      input,
      select,
      textarea,
      table,
      th,
      td,
      svg {
        transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
        transition-timing-function: ease-out;
        transition-duration: 0.3s;
      }
    `;
    document.head.appendChild(style);
  }, []);

  useEffect(() => {
    fetch("https://backend-1-v77y.onrender.com/api/apps")
      .then((res) => res.json())
      .then((apps: CSVData[]) => {
        setData(apps);
        const chart = generateTimelineChart(apps);
        setTimelineOption(chart);
        if (apps && apps.length > 0 && apps[0]["Sub Org"]) {
          setOrgName(apps[0]["Organisation"]);
        }
      })
      .catch(console.error);
  }, []);

  const grouped = useMemo(() => groupDataBySubOrg(data), [data]);
  const assetDistributionData = useMemo(() => getAssetDistributionData(data), [data]);
  const riskChartData = useMemo(() => getRiskChartData(data), [data]);
  const {
    totalApps,
    avgPQC,
    totalVulns,
    secureApps,
    totalAlgChanges,
    totalCertChanges,
    avgAlgPerApp,
    avgCertPerApp,
  } = useMemo(() => calculateMetrics(data), [data]);
  const avgMigration = useMemo(() => calculateAvgMigration(data), [data]);

  // Fixed: Convert object to array format
  const vulnerabilityByQuarter = useMemo(() => {
    const quarterMap: Record<string, { algorithms: number; certificates: number }> = {};

    data.forEach(app => {
      const quarter = app["Org Target Migration Data"];
      if (!quarterMap[quarter]) {
        quarterMap[quarter] = { algorithms: 0, certificates: 0 };
      }

      const algVuln = (app.total_pqc_vulnerable_algorithms || 0) - (app.alg_changes || 0);
      const certVuln = (app.total_pqc_vulnerable_certificates || 0) - (app.cert_changes || 0);

      quarterMap[quarter].algorithms += Math.max(0, algVuln);
      quarterMap[quarter].certificates += Math.max(0, certVuln);
    });

    // Convert object to array format as expected by the component
    return Object.entries(quarterMap).map(([name, data]) => ({
      name,
      algorithms: data.algorithms,
      certificates: data.certificates,
    }));
  }, [data]);

  const applicationsByQuarter = useMemo(() => {
    const quarterMap: Record<string, number> = {};

    data.forEach((app) => {
      const quarter = app["Org Target Migration Data"];
      if (!quarterMap[quarter]) {
        quarterMap[quarter] = 0;
      }
      quarterMap[quarter]++;
    });

    return Object.entries(quarterMap).map(([name, count]) => ({
      name,
      count,
    }));
  }, [data]);

  const toggleExpand = (subOrg: string) => {
    setExpandedSubOrgs((prev) => ({ ...prev, [subOrg]: !prev[subOrg] }));
  };

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {/* Enterprise-Level Header with framer-motion */}
      <motion.header
        initial="hidden"
        animate="visible"
        variants={{
          hidden: { opacity: 0 },
          visible: {
            opacity: 1,
            transition: { staggerChildren: 0.15 },
          },
        }}
        className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4"
      >
        <motion.div
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: { opacity: 1, y: 0 },
          }}
        >
          <div className="relative h-9 flex items-center">
  {/* Wrapper with flex for vertical alignment */}
  <AnimatePresence mode="wait">
    <motion.h2
      key={orgName || "overview"}
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 10 }}
      transition={{ duration: 0.2 }}
      className="text-3xl font-bold tracking-tight text-foreground absolute whitespace-nowrap"
    >
      {orgName ? `${orgName} Overview` : "Overview"}
    </motion.h2>
  </AnimatePresence>
</div>

        </motion.div>
      </motion.header>

      {/* Metric Cards */}
      <DashboardMetrics
        totalApps={totalApps}
        totalAlgChanges={totalAlgChanges}
        totalCertChanges={totalCertChanges}
        avgAlgPerApp={avgAlgPerApp}
        avgCertPerApp={avgCertPerApp}
        totalVulns={totalVulns}
        secureApps={secureApps}
        avgMigration={avgMigration}
        avgPQC={avgPQC}
      />

      {/* Charts */}
      <MigrationAndRiskCharts
        vulnerabilityByQuarter={vulnerabilityByQuarter}
        riskChartData={riskChartData}
        assetDistributionData={assetDistributionData}
        applicationsByQuarter={applicationsByQuarter}
      />

      {/* Application Table */}
      <RiskBreakdown data={data} />
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Index.tsx ---
// Update this page (the content is just a fallback if you fail to update the page)
import { motion } from "framer-motion";

const Index = () => {
  return (
    <motion.div
      className="min-h-dvh flex items-center justify-center bg-background"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="text-center">
        <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-lg sm:text-xl text-muted-foreground">Start building your amazing project here!</p>
      </div>
    </motion.div>
  );
};

export default Index;


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\integration.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle,
} from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import {
  ArrowLeft, Github, GitBranch, Settings, Wrench, 
  MessageSquare, Code, Play, Zap, FileText,
  Shield, Users, Key, Activity, Trash2,
  RefreshCw, FolderOpen, Edit3, Upload,
  Bug, Workflow, Bell, Brain, Sliders,
  Eye, BarChart3, Clock, CheckCircle
} from 'lucide-react'
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid,
  Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell
} from 'recharts'

export default function EnhancedDashboard() {
  const [expandedCard, setExpandedCard] = useState(null)
  const [permissions, setPermissions] = useState({
    read: true,
    write: false,
    manage: false
  })

  const handleCardClick = (id) => {
    setExpandedCard(prev => (prev === id ? null : id))
  }

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      setExpandedCard(null)
    }
  }

  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setExpandedCard(null)
      }
    }
    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [])

  const integrationHistory = [
    { app: 'GitHub', action: 'Pushed Code', user: 'Bottu Teja Sai', timestamp: '2025-08-05 23:45', details: 'Commit fix: auth bug to main' },
    { app: 'Jira', action: 'Created Issue', user: 'System Bot', timestamp: '2025-08-05 23:20', details: 'Bug: "Login fails on Firefox"' },
    { app: 'ServiceNow', action: 'Updated Incident', user: 'AdminUser1', timestamp: '2025-08-05 22:50', details: 'Changed status to "Resolved"' },
    { app: 'OpenAI', action: 'Modified Prompt', user: 'TejaGPT', timestamp: '2025-08-05 22:30', details: 'Prompt used for summarization' },
    { app: 'Bitbucket', action: 'Synced Repo', user: 'DevOps Script', timestamp: '2025-08-05 21:10', details: 'Synced develop branch' },
    { app: 'VSCode', action: 'Edited Config', user: 'Bottu Teja Sai', timestamp: '2025-08-05 20:40', details: '.env updated for API_KEY' }
  ]

  const usageData = [
    { name: 'Mon', requests: 45, tokens: 1200 },
    { name: 'Tue', requests: 52, tokens: 1400 },
    { name: 'Wed', requests: 38, tokens: 950 },
    { name: 'Thu', requests: 61, tokens: 1650 },
    { name: 'Fri', requests: 48, tokens: 1300 },
    { name: 'Sat', requests: 33, tokens: 800 },
    { name: 'Sun', requests: 29, tokens: 720 }
  ]

  const pieData = [
    { name: 'Active', value: 65, color: '#10B981' },
    { name: 'Pending', value: 25, color: '#F59E0B' },
    { name: 'Error', value: 10, color: '#EF4444' }
  ]

  const cards = [
    {
      id: 'github',
      title: 'GitHub',
      description: 'Git repository management and collaboration',
      icon: <Github className="h-6 w-6" />,
      color: 'bg-gray-800',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'bitbucket',
      title: 'Bitbucket',
      description: 'Atlassian Git solution for teams',
      icon: <GitBranch className="h-6 w-6" />,
      color: 'bg-blue-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'servicenow',
      title: 'ServiceNow',
      description: 'IT service management platform',
      icon: <Settings className="h-6 w-6" />,
      color: 'bg-green-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'jira',
      title: 'Jira', 
      description: 'Issue and project tracking',
      icon: <Bug className="h-6 w-6" />,
      color: 'bg-blue-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'claude',
      title: 'Claude',
      description: 'AI assistant for development tasks',
      icon: <MessageSquare className="h-6 w-6" />,
      color: 'bg-orange-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'openai',
      title: 'OpenAI',
      description: 'GPT models and AI capabilities',
      icon: <Brain className="h-6 w-6" />,
      color: 'bg-green-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'intellij',
      title: 'IntelliJ IDEA',
      description: 'Integrated development environment',
      icon: <Code className="h-6 w-6" />,
      color: 'bg-red-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'vscode',
      title: 'VS Code',
      description: 'Lightweight code editor',
      icon: <Edit3 className="h-6 w-6" />,
      color: 'bg-blue-400',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'visualstudio',
      title: 'Visual Studio',
      description: 'Full-featured IDE for .NET development',
      icon: <Wrench className="h-6 w-6" />,
      color: 'bg-purple-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    }
  ]

  const renderExpandedContent = (cardId) => {
    const commonTabs = (
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="permissions">Permissions</TabsTrigger>
          <TabsTrigger value="actions">Actions</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="p-4 bg-muted rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="font-medium">Integration Status</span>
              </div>
              <p className="text-sm text-muted-foreground">Active since March 2024</p>
            </div>
            <div className="p-4 bg-muted rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="h-4 w-4 text-blue-500" />
                <span className="font-medium">Last Sync</span>
              </div>
              <p className="text-sm text-muted-foreground">2 minutes ago</p>
            </div>
          </div>
          
          {(cardId === 'openai' || cardId === 'claude') && (
            <div className="mt-4">
              <h4 className="font-medium mb-2">Usage Statistics</h4>
              <ResponsiveContainer width="100%" height={200}>
                <BarChart data={usageData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="requests" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          )}
        </TabsContent>

        <TabsContent value="permissions" className="space-y-4">
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Read Access</label>
                <p className="text-xs text-muted-foreground">View repositories and files</p>
              </div>
              <Switch 
                checked={permissions.read} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, read: checked}))}
              />
            </div>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Write Access</label>
                <p className="text-xs text-muted-foreground">Modify files and create commits</p>
              </div>
              <Switch 
                checked={permissions.write} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, write: checked}))}
              />
            </div>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Manage Access</label>
                <p className="text-xs text-muted-foreground">Admin controls and settings</p>
              </div>
              <Switch 
                checked={permissions.manage} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, manage: checked}))}
              />
            </div>
          </div>
        </TabsContent>

        <TabsContent value="actions" className="space-y-4">
          {renderActionButtons(cardId)}
        </TabsContent>

        <TabsContent value="logs" className="space-y-4">
          <div className="max-h-64 overflow-y-auto space-y-2">
            {integrationHistory
              .filter(item => item.app.toLowerCase() === cardId.toLowerCase() || 
                       (cardId === 'github' && item.app === 'GitHub') ||
                       (cardId === 'vscode' && item.app === 'VSCode') ||
                       (cardId === 'openai' && item.app === 'OpenAI'))
              .map((item, index) => (
              <div key={index} className="p-3 bg-muted rounded-lg">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="font-medium text-sm">{item.action}</p>
                    <p className="text-xs text-muted-foreground">{item.details}</p>
                  </div>
                  <span className="text-xs text-muted-foreground">{item.timestamp}</span>
                </div>
              </div>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    )

    return (
      <div className="space-y-6">
        {commonTabs}
        
        <div className="border-t pt-4">
          <Button variant="destructive" size="sm" className="w-full">
            <Trash2 className="h-4 w-4 mr-2" />
            Disconnect Integration
          </Button>
        </div>
      </div>
    )
  }

  const renderActionButtons = (cardId) => {
    switch (cardId) {
      case 'github':
      case 'bitbucket':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Repositories
            </Button>
            <Button variant="outline" size="sm">
              <FolderOpen className="h-4 w-4 mr-2" />
              Open Repository
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Edit File
            </Button>
            <Button variant="outline" size="sm">
              <Upload className="h-4 w-4 mr-2" />
              Push Commit
            </Button>
          </div>
        )
      case 'servicenow':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Edit Incident Template
            </Button>
            <Button variant="outline" size="sm">
              <Workflow className="h-4 w-4 mr-2" />
              Modify Workflow
            </Button>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Records
            </Button>
            <Button variant="outline" size="sm">
              <Bell className="h-4 w-4 mr-2" />
              Create Incident
            </Button>
          </div>
        )
      case 'jira':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Bug className="h-4 w-4 mr-2" />
              Create Issue
            </Button>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Sprints
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Modify Template
            </Button>
            <Button variant="outline" size="sm">
              <Workflow className="h-4 w-4 mr-2" />
              Workflow Builder
            </Button>
          </div>
        )
      case 'claude':
      case 'openai':
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-3">
              <Button variant="outline" size="sm">
                <Edit3 className="h-4 w-4 mr-2" />
                Modify Prompt
              </Button>
              <Button variant="outline" size="sm">
                <Play className="h-4 w-4 mr-2" />
                Test Prompt
              </Button>
              <Button variant="outline" size="sm">
                <Sliders className="h-4 w-4 mr-2" />
                Configure Parameters
              </Button>
              <Button variant="outline" size="sm">
                <BarChart3 className="h-4 w-4 mr-2" />
                Usage Stats
              </Button>
            </div>
            <div className="p-4 bg-muted rounded-lg">
              <label className="text-sm font-medium mb-2 block">Test Prompt</label>
              <textarea 
                className="w-full h-20 p-2 text-sm border rounded resize-none"
                placeholder="Enter your prompt here..."
              />
              <Button size="sm" className="mt-2">
                <Play className="h-4 w-4 mr-2" />
                Test
              </Button>
            </div>
          </div>
        )
      case 'intellij':
      case 'vscode':
      case 'visualstudio':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Zap className="h-4 w-4 mr-2" />
              Manage Extensions
            </Button>
            <Button variant="outline" size="sm">
              <FolderOpen className="h-4 w-4 mr-2" />
              Browse Files
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Live Edit Code
            </Button>
            <Button variant="outline" size="sm">
              <Settings className="h-4 w-4 mr-2" />
              Configure Build
            </Button>
          </div>
        )
      default:
        return null
    }
  }

  return (
    <motion.div
      className="min-h-screen bg-background"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="p-4 sm:p-6">
        <h1 className="text-3xl sm:text-4xl font-bold text-center mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Integration Dashboard
        </h1>
        
        {/* Cards Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6 mb-12">
          {cards.map(card => (
            <Card
              key={card.id}
              onClick={() => handleCardClick(card.id)}
              className="cursor-pointer transition-all duration-200 hover:scale-105 hover:shadow-lg border-2 hover:border-primary/50"
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className={`p-3 rounded-full text-white ${card.color}`}>
                    {card.icon}
                  </div>
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${card.statusColor}`}></div>
                    <Badge variant="secondary" className="text-xs">{card.status}</Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <CardTitle className="text-lg mb-2">{card.title}</CardTitle>
                <CardDescription className="text-sm">{card.description}</CardDescription>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Integration History Table */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold mb-6">Integration History</h2>
          <div className="border rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="hidden bg-muted md:table-header-group">
                  <tr className="border-b">
                    <th className="text-left p-3 px-4 font-medium">Application</th>
                    <th className="text-left p-3 px-4 font-medium">Action Taken</th>
                    <th className="text-left p-3 px-4 font-medium">Modified By</th>
                    <th className="text-left p-3 px-4 font-medium">Timestamp</th>
                    <th className="text-left p-3 px-4 font-medium">Details / Summary</th>
                  </tr>
                </thead>
                <tbody>
                  {integrationHistory.map((item, index) => (
                    <tr key={index} className="block md:table-row border-b hover:bg-muted/50">
                      <td className="p-4 font-medium md:table-cell" data-label="Application">{item.app}</td>
                      <td className="p-4 md:table-cell" data-label="Action Taken">{item.action}</td>
                      <td className="p-4 md:table-cell" data-label="Modified By">{item.user}</td>
                      <td className="p-4 text-sm text-muted-foreground md:table-cell" data-label="Timestamp">{item.timestamp}</td>
                      <td className="p-4 text-sm md:table-cell" data-label="Details / Summary">{item.details}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Expanded Card Modal */}
      <AnimatePresence>
        {expandedCard && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={handleOverlayClick}
          >
            <motion.div
              initial={{ scale: 0.95, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.95, y: 20, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="bg-background rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Modal Header */}
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:p-6 border-b gap-4">
                <div className="flex items-center gap-4">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setExpandedCard(null)}
                    className="hover:bg-muted"
                  >
                    <ArrowLeft className="h-4 w-4" />
                  </Button>
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-full text-white ${cards.find(c => c.id === expandedCard)?.color}`}>
                      {cards.find(c => c.id === expandedCard)?.icon}
                    </div>
                    <div>
                      <h2 className="text-xl font-bold">
                        {cards.find(c => c.id === expandedCard)?.title}
                      </h2>
                      <p className="text-sm text-muted-foreground">
                        {cards.find(c => c.id === expandedCard)?.description}
                      </p>
                    </div>
                  </div>
                </div>
                <Badge variant="secondary">Connected</Badge>
              </div>

              {/* Modal Content */}
              <div className="p-4 sm:p-6 max-h-[calc(90vh-140px)] overflow-y-auto">
                {renderExpandedContent(expandedCard)}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  )
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\migrationassist.tsx ---
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle,
} from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { 
  Copy, Shield, AlertTriangle, Code, ArrowLeft, 
  Calendar, Users, CheckCircle, Clock,
  Key, FileSignature, BarChart3, Target
} from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts'

const codeExamples = {
  kem_examples: {
    vulnerable: {
      description: "RSA-based Key Encapsulation Mechanism vulnerable to quantum attacks via Shor's algorithm",
      code: `from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import os

def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def rsa_kem_encapsulate(public_key):
    symmetric_key = os.urandom(32)  # 256-bit key
    encrypted_symmetric_key = public_key.encrypt(
        symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted_symmetric_key, symmetric_key

def rsa_kem_decapsulate(private_key, encrypted_symmetric_key):
    decrypted_symmetric_key = private_key.decrypt(
        encrypted_symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_symmetric_key`,
      vulnerability: `RSA-KEM relies on integer factorization, which Shor's algorithm can efficiently solve on quantum computers.`,
      performance: {
        keySize: '256 bytes (public key)',
        ciphertextSize: '256 bytes',
        encryptionTime: '~100,000 cycles',
        decryptionTime: '~100,000 cycles',
      },
    },
    pqc_compliant: {
      description: 'Lattice-based Key Encapsulation Mechanism resistant to quantum attacks',
      code: `# Conceptual Kyber implementation (requires PQC library)
class KyberKEM:
    def __init__(self, security_level="Kyber768"):
        print(f"Initializing CRYSTALS-Kyber KEM with {security_level} security level.")

    def generate_key_pair(self):
        public_key = b"kyber_public_key_bytes"
        secret_key = b"kyber_secret_key_bytes"
        return public_key, secret_key

    def encapsulate(self, public_key):
        ciphertext = b"kyber_ciphertext_bytes"
        shared_secret = b"kyber_shared_secret_bytes"
        return ciphertext, shared_secret

    def decapsulate(self, ciphertext, secret_key):
        shared_secret = b"kyber_recovered_shared_secret_bytes"
        return shared_secret

kyber_kem = KyberKEM("Kyber768")
pk, sk = kyber_kem.generate_key_pair()
ct, ss_sender = kyber_kem.encapsulate(pk)
ss_receiver = kyber_kem.decapsulate(ct, sk)`,
      security: 'Based on Module-LWE problem, believed to be resistant to quantum attacks.',
      performance: {
        keySize: '1184 bytes (public key)',
        ciphertextSize: '1088 bytes',
        encapsulationTime: '67,624 cycles (AVX2)',
        decapsulationTime: '53,156 cycles (AVX2)',
      },
    },
  },
}

const migrationData = {
  steps: [
    { phase: 'Assessment', description: 'Inventory current cryptographic systems', status: 'complete', timeline: 'Q1 2024' },
    { phase: 'Planning', description: 'Develop migration roadmap', status: 'complete', timeline: 'Q2 2024' },
    { phase: 'Pilot Testing', description: 'Test PQC algorithms in controlled environments', status: 'in-progress', timeline: 'Q3-Q4 2024' },
    { phase: 'Hybrid Implementation', description: 'Deploy hybrid classical+PQC solutions', status: 'pending', timeline: 'Q1-Q2 2025' },
    { phase: 'Full Migration', description: 'Complete transition to PQC', status: 'pending', timeline: 'Q3-Q4 2025' },
  ],
  timeline: [
    { year: '2024', threat: 'Low', quantum: 5, classical: 95 },
    { year: '2025', threat: 'Low-Medium', quantum: 15, classical: 85 },
    { year: '2030', threat: 'Medium', quantum: 40, classical: 60 },
    { year: '2035', threat: 'High', quantum: 70, classical: 30 },
    { year: '2040', threat: 'Critical', quantum: 90, classical: 10 },
  ],
  challenges: [
    { category: 'Technical', items: ['Larger key sizes', 'Performance impact', 'Integration complexity'] },
    { category: 'Operational', items: ['Staff training', 'Legacy system compatibility', 'Cost management'] },
    { category: 'Standards', items: ['Evolving standards', 'Certification processes', 'Interoperability'] },
  ],
  practices: [
    'Start with hybrid implementations',
    'Prioritize high-value assets',
    'Implement crypto-agility',
    'Regular security assessments',
    'Staff training programs',
    'Vendor engagement',
  ]
}

const performanceData = {
  comparison_data: {
    key_sizes: [
      { algorithm: 'RSA-KEM', publicKey: 256, signature: 256 },
      { algorithm: 'CRYSTALS-Kyber', publicKey: 1184, signature: 1088 },
      { algorithm: 'ECDSA', publicKey: 64, signature: 70 },
      { algorithm: 'CRYSTALS-Dilithium', publicKey: 1952, signature: 3293 },
    ],
    security_levels: [
      { algorithm: 'RSA-KEM', classicalSecurity: 112, quantumSecurity: 0 },
      { algorithm: 'CRYSTALS-Kyber', classicalSecurity: 128, quantumSecurity: 128 },
      { algorithm: 'ECDSA', classicalSecurity: 128, quantumSecurity: 0 },
      { algorithm: 'CRYSTALS-Dilithium', classicalSecurity: 128, quantumSecurity: 128 },
    ],
  },
}

function copyToClipboard(code) {
  navigator.clipboard.writeText(code)
}

export default function PQCDashboard() {
  const [expandedCard, setExpandedCard] = useState(null)

  const cards = [
    {
      id: 'migration',
      title: 'Migration Steps',
      description: 'Comprehensive roadmap for PQC adoption',
      icon: <Target className="h-6 w-6" />,
      color: 'bg-blue-500 dark:bg-blue-600',
      content: 'migration'
    },
    {
      id: 'timeline',
      title: 'Threat Timeline',
      description: 'Quantum threat evolution and impact assessment',
      icon: <Calendar className="h-6 w-6" />,
      color: 'bg-orange-500 dark:bg-orange-600',
      content: 'timeline'
    },
    {
      id: 'challenges',
      title: 'Challenges',
      description: 'Key obstacles in PQC implementation',
      icon: <AlertTriangle className="h-6 w-6" />,
      color: 'bg-red-500 dark:bg-red-600',
      content: 'challenges'
    },
    {
      id: 'practices',
      title: 'Best Practices',
      description: 'Proven strategies for successful migration',
      icon: <CheckCircle className="h-6 w-6" />,
      color: 'bg-green-500 dark:bg-green-600',
      content: 'practices'
    },
    {
      id: 'kem',
      title: 'Key Encapsulation (KEM)',
      description: 'Compare RSA-KEM vs CRYSTALS-Kyber',
      icon: <Key className="h-6 w-6" />,
      color: 'bg-purple-500 dark:bg-purple-600',
      content: 'kem'
    },
    {
      id: 'signatures',
      title: 'Digital Signatures',
      description: 'ECDSA vs CRYSTALS-Dilithium comparison',
      icon: <FileSignature className="h-6 w-6" />,
      color: 'bg-indigo-500 dark:bg-indigo-600',
      content: 'signatures'
    },
    {
      id: 'performance',
      title: 'Performance Analysis',
      description: 'Comprehensive performance metrics and charts',
      icon: <BarChart3 className="h-6 w-6" />,
      color: 'bg-teal-500 dark:bg-teal-600',
      content: 'performance'
    }
  ]

  const renderExpandedContent = () => {
    const card = cards.find(c => c.id === expandedCard)
    if (!card) return null

    switch (card.content) {
      case 'migration':
        return (
          <div className="space-y-6">
            <div className="grid gap-4">
              {migrationData.steps.map((step, index) => (
                <Card key={index} className="p-4 border border-border bg-card">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className={`w-3 h-3 rounded-full ${
                        step.status === 'complete' ? 'bg-green-500' :
                        step.status === 'in-progress' ? 'bg-yellow-500' : 'bg-muted'
                      }`} />
                      <div>
                        <h3 className="font-semibold text-foreground">{step.phase}</h3>
                        <p className="text-sm text-muted-foreground">{step.description}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <Badge variant={
                        step.status === 'complete' ? 'default' :
                        step.status === 'in-progress' ? 'secondary' : 'outline'
                      }>
                        {step.status}
                      </Badge>
                      <p className="text-xs text-muted-foreground mt-1">{step.timeline}</p>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )

      case 'timeline':
        return (
          <div className="space-y-6">
            <ResponsiveContainer width="100%" height={400}>
              <LineChart data={migrationData.timeline}>
                <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                <XAxis dataKey="year" />
                <YAxis />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: '6px',
                    color: 'hsl(var(--foreground))'
                  }}
                />
                <Line type="monotone" dataKey="quantum" stroke="#ff6b6b" strokeWidth={3} name="Quantum Threat %" />
                <Line type="monotone" dataKey="classical" stroke="#4ecdc4" strokeWidth={3} name="Classical Security %" />
              </LineChart>
            </ResponsiveContainer>
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {migrationData.timeline.map((item, index) => (
                <Card key={index} className="p-4 text-center bg-card border-border">
                  <h3 className="font-bold text-lg text-foreground">{item.year}</h3>
                  <Badge className={`mt-2 ${
                    item.threat === 'Low' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                    item.threat === 'Low-Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                    item.threat === 'Medium' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' :
                    item.threat === 'High' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :
                    'bg-red-500 text-white dark:bg-red-600'
                  }`}>
                    {item.threat}
                  </Badge>
                </Card>
              ))}
            </div>
          </div>
        )

      case 'challenges':
        return (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {migrationData.challenges.map((challenge, index) => (
              <Card key={index} className="p-6 bg-card border-border">
                <h3 className="font-bold text-lg mb-4 text-center text-foreground">{challenge.category}</h3>
                <ul className="space-y-2">
                  {challenge.items.map((item, idx) => (
                    <li key={idx} className="flex items-center space-x-2">
                      <AlertTriangle className="h-4 w-4 text-orange-500" />
                      <span className="text-sm text-foreground">{item}</span>
                    </li>
                  ))}
                </ul>
              </Card>
            ))}
          </div>
        )

      case 'practices':
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {migrationData.practices.map((practice, index) => (
              <Card key={index} className="p-4 hover:shadow-md transition-shadow bg-card border-border">
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="font-medium text-foreground">{practice}</span>
                </div>
              </Card>
            ))}
          </div>
        )

      case 'kem':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* RSA-KEM */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <AlertTriangle className="h-5 w-5 text-red-500" />
                      <span>RSA-KEM (Vulnerable)</span>
                    </CardTitle>
                    <Badge variant="destructive">Quantum Vulnerable</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">{codeExamples.kem_examples.vulnerable.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(codeExamples.kem_examples.vulnerable.code)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{codeExamples.kem_examples.vulnerable.code}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-red-600 dark:text-red-400">Vulnerability:</h4>
                    <p>{codeExamples.kem_examples.vulnerable.vulnerability}</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    {Object.entries(codeExamples.kem_examples.vulnerable.performance).map(([k, v]) => (
                      <div key={k}>
                        <span className="font-medium">{k.replace(/([A-Z])/g, ' $1')}: </span>{v}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Kyber PQC */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <Shield className="h-5 w-5 text-green-500" />
                      <span>CRYSTALS-Kyber (PQC)</span>
                    </CardTitle>
                    <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Quantum Resistant</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">{codeExamples.kem_examples.pqc_compliant.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(codeExamples.kem_examples.pqc_compliant.code)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{codeExamples.kem_examples.pqc_compliant.code}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-green-600 dark:text-green-400">Security:</h4>
                    <p>{codeExamples.kem_examples.pqc_compliant.security}</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    {Object.entries(codeExamples.kem_examples.pqc_compliant.performance).map(([k, v]) => (
                      <div key={k}>
                        <span className="font-medium">{k.replace(/([A-Z])/g, ' $1')}: </span>{v}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      case 'signatures':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ECDSA Vulnerable Card */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <AlertTriangle className="h-5 w-5 text-red-500" />
                      <span>ECDSA (Vulnerable)</span>
                    </CardTitle>
                    <Badge variant="destructive">Quantum Vulnerable</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">
                    Elliptic Curve Digital Signature Algorithm vulnerable to quantum attacks via Shor's algorithm.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(`from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_ecdsa_key_pair():
    private_key = ec.generate_private_key(
        ec.SECP256R1(),  # A common elliptic curve
        default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def ecdsa_sign(private_key, message):
    signature = private_key.sign(
        message,
        ec.ECDSA(hashes.SHA256())
    )
    return signature

def ecdsa_verify(public_key, message, signature):
    try:
        public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))
        return True
    except Exception:
        return False

# Usage example
private_key, public_key = generate_ecdsa_key_pair()
message = b"This is a test message"
signature = ecdsa_sign(private_key, message)
is_valid = ecdsa_verify(public_key, message, signature)`)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{`from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_ecdsa_key_pair():
    private_key = ec.generate_private_key(
        ec.SECP256R1(),  # A common elliptic curve
        default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def ecdsa_sign(private_key, message):
    signature = private_key.sign(
        message,
        ec.ECDSA(hashes.SHA256())
    )
    return signature

def ecdsa_verify(public_key, message, signature):
    try:
        public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))
        return True
    except Exception:
        return False

# Usage example
private_key, public_key = generate_ecdsa_key_pair()
message = b"This is a test message"
signature = ecdsa_sign(private_key, message)
is_valid = ecdsa_verify(public_key, message, signature)`}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-red-600 dark:text-red-400">Vulnerability:</h4>
                    <p>ECDSA relies on the ECDLP, which Shor's algorithm can efficiently solve, allowing signature forgery.</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    <div><strong>Key Size:</strong> 64 bytes</div>
                    <div><strong>Signature:</strong> 64-72 bytes</div>
                    <div><strong>Signing:</strong> ~10,000 cycles</div>
                    <div><strong>Verification:</strong> ~10,000 cycles</div>
                  </div>
                </CardContent>
              </Card>

              {/* Dilithium PQC Card */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <Shield className="h-5 w-5 text-green-500" />
                      <span>CRYSTALS-Dilithium (PQC)</span>
                    </CardTitle>
                    <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Quantum Resistant</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">Lattice-based Digital Signature Algorithm resistant to quantum attacks.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(`# Conceptual Dilithium implementation
class DilithiumSignature:
    def __init__(self, security_level="Dilithium3"):
        print(f"Initializing CRYSTALS-Dilithium with {security_level} security level.")

    def generate_key_pair(self):
        # In real implementation, calls Dilithium key generation
        public_key = b"dilithium_public_key_bytes"
        secret_key = b"dilithium_secret_key_bytes"
        return public_key, secret_key

    def sign(self, message, secret_key):
        # In real implementation, calls Dilithium signing
        signature = b"dilithium_signature_bytes"
        return signature

    def verify(self, message, signature, public_key):
        # In real implementation, calls Dilithium verification
        return True  # Placeholder

# Usage example
dilithium_signer = DilithiumSignature("Dilithium3")
pk, sk = dilithium_signer.generate_key_pair()
message = b"This is a test message"
signature = dilithium_signer.sign(message, sk)
is_valid = dilithium_signer.verify(message, signature, pk)`)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{`# Conceptual Dilithium implementation (requires PQC library)
class DilithiumSignature:
    def __init__(self, security_level="Dilithium3"):
        print(f"Initializing CRYSTALS-Dilithium with {security_level} security level.")

    def generate_key_pair(self):
        # In real implementation, calls Dilithium key generation
        public_key = b"dilithium_public_key_bytes"
        secret_key = b"dilithium_secret_key_bytes"
        return public_key, secret_key

    def sign(self, message, secret_key):
        # In real implementation, calls Dilithium signing
        signature = b"dilithium_signature_bytes"
        return signature

    def verify(self, message, signature, public_key):
        # In real implementation, calls Dilithium verification
        return True  # Placeholder

# Usage example
dilithium_signer = DilithiumSignature("Dilithium3")
pk, sk = dilithium_signer.generate_key_pair()
message = b"This is a test message"
signature = dilithium_signer.sign(message, sk)
is_valid = dilithium_signer.verify(message, signature, pk)`}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-green-600 dark:text-green-400">Security:</h4>
                    <p>Based on SIS/LWE problems, believed to be quantum-resistant with no known efficient quantum attacks.</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    <div><strong>Key Size:</strong> 1952 bytes</div>
                    <div><strong>Signature:</strong> 3293 bytes</div>
                    <div><strong>Signing:</strong> 529,106 cycles (AVX2)</div>
                    <div><strong>Verification:</strong> 179,424 cycles (AVX2)</div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      case 'performance':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-card border-border">
                <CardHeader>
                  <CardTitle className="text-foreground">Key Size Comparison</CardTitle>
                  <CardDescription className="text-muted-foreground">Comparison of key sizes between classical and PQC algorithms</CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={performanceData.comparison_data.key_sizes}>
                      <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                      <XAxis dataKey="algorithm" angle={-45} textAnchor="end" height={100} />
                      <YAxis />
                      <Tooltip 
                        formatter={(value) => [`${value} bytes`, 'Size']} 
                        contentStyle={{
                          backgroundColor: 'hsl(var(--card))',
                          border: '1px solid hsl(var(--border))',
                          borderRadius: '6px',
                          color: 'hsl(var(--foreground))'
                        }}
                      />
                      <Bar dataKey="publicKey" fill="#8884d8" name="Public Key" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              <Card className="bg-card border-border">
                <CardHeader>
                  <CardTitle className="text-foreground">Security Level Comparison</CardTitle>
                  <CardDescription className="text-muted-foreground">Classical vs Quantum security levels</CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={performanceData.comparison_data.security_levels}>
                      <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                      <XAxis dataKey="algorithm" angle={-45} textAnchor="end" height={100} />
                      <YAxis />
                      <Tooltip 
                        contentStyle={{
                          backgroundColor: 'hsl(var(--card))',
                          border: '1px solid hsl(var(--border))',
                          borderRadius: '6px',
                          color: 'hsl(var(--foreground))'
                        }}
                      />
                      <Bar dataKey="classicalSecurity" fill="#ff7300" name="Classical Security" />
                      <Bar dataKey="quantumSecurity" fill="#00ff00" name="Quantum Security" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>

            <Card className="bg-card border-border">
              <CardHeader>
                <CardTitle className="text-foreground">Performance Analysis Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Size Impact:</h4>
                    <p className="text-sm text-muted-foreground">Post-quantum algorithms tend to have larger key and ciphertext sizes.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Performance Impact:</h4>
                    <p className="text-sm text-muted-foreground">Some post-quantum algorithms require more CPU cycles but remain practical.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Security Benefit:</h4>
                    <p className="text-sm text-muted-foreground">Quantum-resistant algorithms offer long-term security against quantum attacks.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Recommendations:</h4>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      <li>â€¢ Adopt hybrid classical + PQC mechanisms during transition.</li>
                      <li>â€¢ Use PQC for high-value data today.</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )

      default:
        return null
    }
  }

  if (expandedCard) {
    return (
      <motion.div
        className="min-h-screen bg-background p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
      >
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center space-x-4 mb-6">
            <Button
              variant="outline"
              onClick={() => setExpandedCard(null)}
              className="flex items-center space-x-2"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div className="flex items-center space-x-2">
              <div className={`p-2 rounded-lg text-white ${cards.find(c => c.id === expandedCard)?.color}`}>
                {cards.find(c => c.id === expandedCard)?.icon}
              </div>
              <div>
                <h1 className="text-3xl font-bold text-foreground">{cards.find(c => c.id === expandedCard)?.title}</h1>
                <p className="text-muted-foreground">{cards.find(c => c.id === expandedCard)?.description}</p>
              </div>
            </div>
          </div>
          <div className="bg-card rounded-lg shadow-sm p-6 border border-border">
            {renderExpandedContent()}
          </div>
        </div>
      </motion.div>
    )
  }

  return (
    <motion.div
      className="min-h-screen bg-background p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <h1 className="text-4xl font-bold text-foreground">Migration assist</h1>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {cards.map((card) => (
            <Card
              key={card.id}
              className="group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-xl border-0 bg-card"
              onClick={() => setExpandedCard(card.id)}
            >
              <CardContent className="p-6">
                <div className="flex flex-col items-center text-center space-y-4">
                  <div className={`p-4 rounded-full text-white ${card.color} group-hover:scale-110 transition-transform duration-300`}>
                    {card.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-foreground mb-2">{card.title}</h3>
                    <p className="text-sm text-muted-foreground">{card.description}</p>
                  </div>
                  <div className="w-full pt-4 border-t border-border">
                    <div className="flex items-center justify-center text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300">
                      <span className="text-sm font-medium mr-2">Explore</span>
                      <ArrowLeft className="h-4 w-4 rotate-180 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="mt-16 bg-card rounded-lg shadow-sm p-8 border border-border">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-foreground mb-4">Quick Overview</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="bg-red-100 dark:bg-red-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <AlertTriangle className="h-8 w-8 text-red-600 dark:text-red-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">Quantum Threat</h3>
                <p className="text-sm text-muted-foreground">Current cryptographic systems will be vulnerable to quantum computers</p>
              </div>
              <div className="text-center">
                <div className="bg-blue-100 dark:bg-blue-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <Clock className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">Migration Timeline</h3>
                <p className="text-sm text-muted-foreground">Organizations need to start planning and implementing PQC now</p>
              </div>
              <div className="text-center">
                <div className="bg-green-100 dark:bg-green-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <Shield className="h-8 w-8 text-green-600 dark:text-green-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">PQC Solution</h3>
                <p className="text-sm text-muted-foreground">New algorithms designed to resist both classical and quantum attacks</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\NotFound.tsx ---
import { Link, useLocation } from "react-router-dom";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <motion.div
      className="min-h-dvh flex flex-col items-center justify-center bg-background text-center p-4"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      transition={{ duration: 0.3 }}
    >
      <h1 className="text-6xl sm:text-8xl font-bold text-primary">404</h1>
      <h2 className="mt-4 text-2xl sm:text-3xl font-semibold text-foreground">Page Not Found</h2>
      <p className="mt-2 text-base text-muted-foreground">
        Sorry, we couldn't find the page you're looking for.
      </p>
      <Button asChild className="mt-6">
        <Link to="/">Return to Home</Link>
      </Button>
    </motion.div>
  );
};

export default NotFound;


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Profile.tsx ---
import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Save, RotateCcw, ArrowLeft, Library, LayoutGrid, ArrowRight } from "lucide-react";
import { CryptoTable, CryptoAlgorithm, ColumnDef } from "@/components/profile/crypto table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import Applications from "@/components/profile/applications";

// Types for API data
interface ApiCryptoAlgorithm {
  Section: string;
  Algorithm_Name: string;
  Variant: string;
  Purpose: string;
  Usage_Context: string;
  Status_Today: string;
  PQC_Status: string;
  Priority: string;
  Classical_Recommended: string;
  Quantum_Recommended: string;
  NIST_Reference: string;
  Notes: string;
}

// API configuration - centralized backend URLs
const API_CONFIG = {
  cryptoApi: "https://backend-1-v77y.onrender.com/api",
};

// API fetching and data processing
const fetchDataFromAPI = async (): Promise<ApiCryptoAlgorithm[]> => {
  try {
    const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    const result = await response.json();
    console.log('âœ… API data fetched successfully');
    return result.data || [];
  } catch (error) {
    console.error('âŒ Failed to fetch data from API:', error);
    return [];
  }
};

const transformApiData = (apiData: ApiCryptoAlgorithm[]): CryptoAlgorithm[] => {
  return apiData.map((item, index) => ({
    id: `${item.Algorithm_Name}-${index}`,
    algorithm_name: item.Algorithm_Name,
    variant: item.Variant,
    purpose: item.Purpose,
    usage_context: item.Usage_Context ? item.Usage_Context.split(',').map(s => s.trim()) : [],
    status_today: item.Status_Today,
    pqc_status: item.PQC_Status,
    priority: item.Priority,
    classical_recommended: item.Classical_Recommended,
    quantum_recommended: item.Quantum_Recommended,
    nist_reference: item.NIST_Reference ? item.NIST_Reference.split(',').map(s => s.trim()) : [],
    notes: item.Notes,
    section: item.Section,
    visible: false,
  }));
};

const categorizeApiData = (transformedData: CryptoAlgorithm[]) => {
  const categories: { [key: string]: CryptoAlgorithm[] } = {
    symmetric: [],
    asymmetric: [],
    hash: [],
    mac_kdf: [],
    pqc: [],
  };
  
  const keywordMap = {
    pqc: ['kyber', 'dilithium', 'falcon', 'sphincs', 'ntru', 'bike'],
    mac_kdf: ['hmac', 'cmac', 'pbkdf2', 'hkdf', 'argon', 'bcrypt', 'scrypt', 'gcm', 'ccm', 'chacha20', 'poly1305'],
    asymmetric: ['rsa', 'ecc', 'dsa', 'diffie-hellman', 'x25519', 'ed25519'],
    hash: ['sha', 'md5'],
    symmetric: ['aes', 'des', 'rc4', 'rc5', 'blowfish', 'camellia', 'seed'],
  };  

  transformedData.forEach(item => {
    const section = item.section?.toLowerCase() || '';
    if (section.includes('asymmetric')) {
      categories.asymmetric.push(item);
    } else if (section.includes('symmetric')) {
      categories.symmetric.push(item);
    } else if (section.includes('hash')) {
      categories.hash.push(item);
    } else if (section.includes('mac') || section.includes('kdf')) {
      categories.mac_kdf.push(item);
    } else if (section.includes('post-quantum')) {
      categories.pqc.push(item);
    } else {
      const name = item.algorithm_name.toLowerCase();
      let found = false;
      for (const category in keywordMap) {
        if (keywordMap[category].some(keyword => name.includes(keyword))) {
          categories[category as keyof typeof categories].push(item);
          found = true;
          break;
        }
      }
      if (!found) {
        console.warn(`Could not categorize: ${item.algorithm_name}`);
      }
    }
  });

  return categories;
};

const commonColumns: ColumnDef[] = [
  { key: "algorithm_name", header: "Algorithm" },
  { key: "variant", header: "Variant" },
  { key: "purpose", header: "Purpose" },
  { key: "priority", header: "Priority" },
  { key: "usage_context", header: "Usage Context" },
  { key: "status_today", header: "Status" },
  { key: "pqc_status", header: "PQC Status" },
  { key: "notes", header: "Notes" },
];

const fetchCryptographicProfiles = async () => {
  const response = await fetch(`${API_CONFIG.cryptoApi}/apps4`);
  if (!response.ok) throw new Error('Network response was not ok');
  return response.json();
};

type ViewType = 'dashboard' | 'tables' | 'applications';

const Profile = () => {
  const [symmetricData, setSymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [asymmetricData, setAsymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [hashData, setHashData] = useState<CryptoAlgorithm[]>([]);
  const [macKdfData, setMacKdfData] = useState<CryptoAlgorithm[]>([]);
  const [pqcData, setPqcData] = useState<CryptoAlgorithm[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [view, setView] = useState<ViewType>('dashboard');

  const [isSymmetricEdited, setIsSymmetricEdited] = useState(false);
  const [isAsymmetricEdited, setIsAsymmetricEdited] = useState(false);
  const [isHashEdited, setIsHashEdited] = useState(false);
  const [isMacKdfEdited, setIsMacKdfEdited] = useState(false);
  const [isPqcEdited, setIsPqcEdited] = useState(false);

  const initialCategorizedData = useRef<{ [key: string]: CryptoAlgorithm[] }>({});
  const [showApplications, setShowApplications] = useState(false);
  const [applicationsData, setApplicationsData] = useState<any>(null);
  const [applicationsLoading, setApplicationsLoading] = useState(false);
  const [applicationsError, setApplicationsError] = useState<string | null>(null);
  const [applicationsRefreshing, setApplicationsRefreshing] = useState(false);
  const [allAlgorithms, setAllAlgorithms] = useState<any[]>([]);
  const [allAlgorithmsLoading, setAllAlgorithmsLoading] = useState(true);
  const [allAlgorithmsError, setAllAlgorithmsError] = useState<string | null>(null);

  useEffect(() => {
    const initializeData = async () => {
      try {
        const apiData = await fetchDataFromAPI();
        const transformedData = transformApiData(apiData);
        const categorizedData = categorizeApiData(transformedData);

        const withVisible = (data: CryptoAlgorithm[], count: number) =>
          data.map((item, index) => ({ ...item, visible: index < count }));

        const initialSymmetric = withVisible(categorizedData.symmetric || [], 3);
        const initialAsymmetric = withVisible(categorizedData.asymmetric || [], 3);
        const initialHash = withVisible(categorizedData.hash || [], 3);
        const initialMacKdf = withVisible(categorizedData.mac_kdf || [], 3);
        const initialPqc = withVisible(categorizedData.pqc || [], 3);

        initialCategorizedData.current = { symmetric: initialSymmetric, asymmetric: initialAsymmetric, hash: initialHash, mac_kdf: initialMacKdf, pqc: initialPqc };

        setSymmetricData(initialSymmetric);
        setAsymmetricData(initialAsymmetric);
        setHashData(initialHash);
        setMacKdfData(initialMacKdf);
        setPqcData(initialPqc);

      } catch (error) {
        console.error('âŒ Error initializing profile data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeData();
  }, []);

  // Fetch applications data
  useEffect(() => {
    if (!showApplications) return;
    setApplicationsLoading(true);
    setApplicationsError(null);
    fetchCryptographicProfiles()
      .then((data) => {
        setApplicationsData(data);
        setApplicationsLoading(false);
      })
      .catch((err) => {
        setApplicationsError(err.message || "Failed to fetch applications");
        setApplicationsLoading(false);
      });
  }, [showApplications]);

  const fetchAllAlgorithms = async () => {
    try {
      const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
      if (!response.ok) throw new Error("Failed to fetch algorithms");
      const result = await response.json();
      setAllAlgorithms(result.data || []);
    } catch (err: any) {
      setAllAlgorithmsError(err.message || "Failed to fetch algorithms");
    } finally {
      setAllAlgorithmsLoading(false);
    }
  };

  useEffect(() => {
    fetchAllAlgorithms();
  }, []);

  const handleApplicationsRefresh = () => {
    setApplicationsRefreshing(true);
    fetchCryptographicProfiles()
      .then((data) => {
        setApplicationsData(data);
        setApplicationsRefreshing(false);
      })
      .catch((err) => {
        setApplicationsError(err.message || "Failed to fetch applications");
        setApplicationsRefreshing(false);
      });
  };

  const handleSaveChanges = () => {
    console.log("Saving all changes...");
    console.log("Symmetric:", symmetricData);
    console.log("Asymmetric:", asymmetricData);
    console.log("Hash:", hashData);
    console.log("MAC/KDF:", macKdfData);
    console.log("PQC:", pqcData);
  };

  const handleReset = () => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsSymmetricEdited(false);
    setIsAsymmetricEdited(false);
    setIsHashEdited(false);
    setIsMacKdfEdited(false);
    setIsPqcEdited(false);
    console.log("All tables reset to original state.");
  };

  const onSymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setSymmetricData(d);
    setIsSymmetricEdited(true);
  }, []);
  const onSymmetricReset = useCallback(() => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setIsSymmetricEdited(false);
  }, []);

  const onAsymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setAsymmetricData(d);
    setIsAsymmetricEdited(true);
  }, []);
  const onAsymmetricReset = useCallback(() => {
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setIsAsymmetricEdited(false);
  }, []);

  const onHashUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setHashData(d);
    setIsHashEdited(true);
  }, []);
  const onHashReset = useCallback(() => {
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setIsHashEdited(false);
  }, []);

  const onMacKdfUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setMacKdfData(d);
    setIsMacKdfEdited(true);
  }, []);
  const onMacKdfReset = useCallback(() => {
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setIsMacKdfEdited(false);
  }, []);

  const onPqcUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setPqcData(d);
    setIsPqcEdited(true);
  }, []);
  const onPqcReset = useCallback(() => {
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsPqcEdited(false);
  }, []);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <p>Loading Admin Page...</p>
        </div>
      </div>
    );
  }

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  return (
    <AnimatePresence mode="wait">
      {view === 'applications' ? (
        <Applications
          data={applicationsData}
          isLoading={applicationsLoading || allAlgorithmsLoading}
          error={applicationsError || allAlgorithmsError}
          onRefresh={handleApplicationsRefresh}
          isRefreshing={applicationsRefreshing}
          onBack={() => setView('dashboard')}
          allAlgorithms={allAlgorithms}
        />
      ) : (
        view === 'dashboard' ? (
          <motion.div
            key="dashboard"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.3 }}
            className="flex flex-col items-center justify-center min-h-[calc(100vh-8rem)] p-4"
          >
            <div className="w-full max-w-6xl mx-auto">
              <div className="text-center mb-12">
                <h1 className="text-4xl font-bold tracking-tight">Admin Control Center</h1>
                <p className="text-lg text-muted-foreground mt-2">Select a profile to manage.</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                  <Card
                    onClick={() => setView('tables')}
                    className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                  >
                    <CardHeader>
                      <div className="flex items-center gap-4 mb-4">
                        <div className="p-3 bg-primary/10 rounded-lg">
                          <Library className="h-8 w-8 text-primary" />
                        </div>
                        <div>
                          <CardTitle className="text-2xl">Organizational Cryptography Profile</CardTitle>
                          <CardDescription className="text-base">View and manage all cryptographic algorithm tables.</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Configure symmetric, asymmetric, hash functions, MACs, KDFs, and Post-Quantum algorithms. Set visibility, edit properties, and add new entries to the organization's crypto standards.
                      </p>
                    </CardContent>
                    <div className="p-6 pt-0">
                      <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                        Manage Profile <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </Button>
                    </div>
                  </Card>
                </motion.div>
                
                <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                  <Card
                    onClick={() => setView('applications')}
                    className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                  >
                    <CardHeader>
                      <div className="flex items-center gap-4 mb-4">
                        <div className="p-3 bg-secondary rounded-lg">
                          <LayoutGrid className="h-8 w-8 text-secondary-foreground" />
                        </div>
                        <div>
                          <CardTitle className="text-2xl">Applications</CardTitle>
                          <CardDescription className="text-base">View and manage cryptographic profiles for applications.</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Dynamically view application-specific cryptographic profiles and settings.
                      </p>
                    </CardContent>
                    <div className="p-6 pt-0">
                      <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                        Manage Applications <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </Button>
                    </div>
                  </Card>
                </motion.div>
              </div>
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="tables"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.3 }}
            className="p-4 sm:p-6"
          >
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold">Cryptography Profile Management</h1>
              <Button variant="outline" onClick={() => setView('dashboard')}><ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard</Button>
            </div>

            <div className="space-y-8">
              <CryptoTable 
                title="Symmetric Algorithms" 
                data={symmetricData} 
                columns={commonColumns} 
                isEdited={isSymmetricEdited}
                onUpdate={onSymmetricUpdate}
                onReset={onSymmetricReset}
              />
              <CryptoTable 
                title="Asymmetric Algorithms" 
                data={asymmetricData} 
                columns={commonColumns} 
                isEdited={isAsymmetricEdited} 
                onUpdate={onAsymmetricUpdate}
                onReset={onAsymmetricReset}
              />
              <CryptoTable 
                title="Hash Functions" 
                data={hashData} 
                columns={commonColumns} 
                isEdited={isHashEdited} 
                onUpdate={onHashUpdate}
                onReset={onHashReset}
              />
              <CryptoTable 
                title="MACs & KDFs" 
                data={macKdfData} 
                columns={commonColumns} isEdited={isMacKdfEdited} 
                onUpdate={onMacKdfUpdate}
                onReset={onMacKdfReset}
              />
              <CryptoTable 
                title="Post-Quantum Cryptography" 
                data={pqcData} columns={commonColumns} isEdited={isPqcEdited} 
                onUpdate={onPqcUpdate}
                onReset={onPqcReset}
              />
            </div>

            <div className="mt-8 flex justify-end gap-4">
              <Button onClick={handleSaveChanges}><Save className="h-4 w-4 mr-2" /> Save Changes</Button>
              <Button variant="outline" onClick={handleReset}><RotateCcw className="h-4 w-4 mr-2" /> Reset All</Button>
            </div>
          </motion.div>
        )
      )}
    </AnimatePresence>
  );
};

export default Profile;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Reports.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

import { type VariantProps } from "class-variance-authority";
import { motion } from "framer-motion";
import { Badge, badgeVariants } from "@/components/ui/badge";
import { Download, FileText, TrendingUp, Calendar, BarChart3 } from "lucide-react";
import { useQuery } from "@tanstack/react-query";

interface Report {
  id: string;
  title: string;
  description: string;
  type: "Security" | "Compliance" | "Performance" | "Summary";
  generated: string;
  status: "Ready" | "Generating" | "Failed";
  size: string;
}

const fetchReports = async (): Promise<Report[]> => {
  const reports: Report[] = [
    {
      id: "RPT-001",
      title: "Weekly PQC Security Assessment",
      description: "Comprehensive analysis of post-quantum cryptography implementation across all applications",
      type: "Security",
      generated: "2024-01-15",
      status: "Ready",
      size: "2.3 MB"
    },
    {
      id: "RPT-002", 
      title: "Vulnerability Remediation Report",
      description: "Detailed breakdown of quantum-related vulnerabilities and remediation progress",
      type: "Security",
      generated: "2024-01-14",
      status: "Ready", 
      size: "1.8 MB"
    },
    {
      id: "RPT-003",
      title: "NIST PQC Compliance Report",
      description: "Compliance status against NIST post-quantum cryptography standards",
      type: "Compliance",
      generated: "2024-01-13",
      status: "Ready",
      size: "3.1 MB"
    },
    {
      id: "RPT-004",
      title: "Algorithm Performance Metrics", 
      description: "Performance analysis of implemented PQC algorithms vs classical cryptography",
      type: "Performance",
      generated: "2024-01-12",
      status: "Generating",
      size: "Pending"
    },
    {
      id: "RPT-005",
      title: "Executive Summary - Q1 2024",
      description: "High-level overview of PQC readiness and security posture for executive review",
      type: "Summary",
      generated: "2024-01-10",
      status: "Ready",
      size: "890 KB"
    }
  ];
  return new Promise(resolve => setTimeout(() => resolve(reports), 500));
}

export default function Reports() {
  const { data: reports = [], isLoading, error } = useQuery<Report[], Error>({
    queryKey: ["reports"],
    queryFn: fetchReports,
  });

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "Security": return <TrendingUp className="h-4 w-4" />;
      case "Compliance": return <FileText className="h-4 w-4" />;
      case "Performance": return <BarChart3 className="h-4 w-4" />;
      case "Summary": return <Calendar className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  type BadgeVariant = VariantProps<typeof badgeVariants>["variant"];

  const getTypeVariant = (type: string): BadgeVariant => {
    switch (type) {
      case "Security": return "destructive";
      case "Compliance": return "default";
      case "Performance": return "secondary";
      case "Summary": return "outline";
      default: return "outline";
    }
  };

  const getStatusVariant = (status: string): BadgeVariant => {
    switch (status) {
      case "Ready": return "default";
      case "Generating": return "secondary";
      case "Failed": return "destructive";
      default: return "outline";
    }
  };

  const quickReports = [
    {
      title: "Application Security Summary",
      description: "Current PQC implementation status across all monitored applications"
    },
    {
      title: "Critical Vulnerabilities Report", 
      description: "All critical and high severity quantum-related vulnerabilities"
    },
    {
      title: "Algorithm Usage Analysis",
      description: "Breakdown of cryptographic algorithms in use and their quantum resistance"
    },
    {
      title: "Compliance Gap Analysis",
      description: "Analysis of gaps in NIST PQC standard compliance"
    }
  ];

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Reports</h2>
        </div>
        <Button className="gap-2">
          <FileText className="h-4 w-4" />
          <span className="hidden sm:inline">Generate Custom Report</span>
          <span className="sm:hidden">New Report</span>
        </Button>
      </div>

      <motion.div
        className="grid grid-cols-1 lg:grid-cols-3 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1 } },
        }}
      >
        {/* Quick Reports */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="text-lg font-semibold text-foreground">
                Quick Reports
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {quickReports.map((report, index) => (
                <div key={index} className="p-3 border border-border rounded-lg hover:bg-accent/20 transition-colors">
                  <h4 className="font-medium text-foreground text-sm">{report.title}</h4>
                  <p className="text-xs text-muted-foreground mt-1">{report.description}</p>
                  <Button variant="outline" size="sm" className="mt-2 w-full">
                    Generate
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Recent Reports */}
        <motion.div className="lg:col-span-2" variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="text-lg font-semibold text-foreground">
                Recent Reports
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {reports.map((report) => (
                <div key={report.id} className="border border-border rounded-lg p-4 hover:shadow-sm transition-shadow">
                  <div className="flex flex-col sm:flex-row items-start justify-between gap-3 mb-3">
                    <div className="flex items-start gap-3">
                      {getTypeIcon(report.type)}
                      <div>
                        <h4 className="font-semibold text-foreground">{report.title}</h4>
                        <p className="text-sm text-muted-foreground mt-1">{report.description}</p>
                      </div>
                    </div>
                    <div className="flex gap-2 flex-shrink-0 self-start sm:self-center">
                      <Badge variant={getTypeVariant(report.type)}>
                        {report.type}
                      </Badge>
                      <Badge variant={getStatusVariant(report.status)}>
                        {report.status}
                      </Badge>
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between text-sm text-muted-foreground gap-4">
                    <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
                      <span><strong>ID:</strong> {report.id}</span>
                      <span><strong>Generated:</strong> {report.generated}</span>
                      <span><strong>Size:</strong> {report.size}</span>
                    </div>
                    
                    <div className="flex gap-2">
                      {report.status === "Ready" && (
                        <>
                          <Button variant="outline" size="sm" className="gap-2">
                            <Download className="h-4 w-4" />
                            Download
                          </Button>
                          <Button variant="outline" size="sm">
                            View
                          </Button>
                        </>
                      )}
                      {report.status === "Generating" && (
                        <Button variant="outline" size="sm" disabled>
                          Generating...
                        </Button>
                      )}
                      {report.status === "Failed" && (
                        <Button variant="outline" size="sm">
                          Retry
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>

      {/* Report Metrics */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1, delayChildren: 0.2 } },
        }}
      >
        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                  <FileText className="h-6 w-6 text-primary" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Total Reports</p>
                  <p className="text-2xl font-bold text-foreground">{reports.length}</p>
                  <p className="text-xs text-success">+3 this week</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                  <Download className="h-6 w-6 text-success" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Downloads</p>
                  <p className="text-2xl font-bold text-foreground">234</p>
                  <p className="text-xs text-success">+12 this week</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                  <TrendingUp className="h-6 w-6 text-warning" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Automated Reports</p>
                  <p className="text-2xl font-bold text-foreground">12</p>
                  <p className="text-xs text-muted-foreground">Scheduled weekly</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\scan.tsx ---
import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Save, RotateCcw, ArrowLeft, ArrowRight, Globe } from "lucide-react";
import { CryptoTable, CryptoAlgorithm, ColumnDef } from "@/components/profile/crypto table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import WebScan from '@/components/scan/webscan'; // Import the autonomous WebScan component

// ============================================================================
// INTERFACES & TYPES
// ============================================================================

interface ApiCryptoAlgorithm {
  Section: string;
  Algorithm_Name: string;
  Variant: string;
  Purpose: string;
  Usage_Context: string;
  Status_Today: string;
  PQC_Status: string;
  Priority: string;
  Classical_Recommended: string;
  Quantum_Recommended: string;
  NIST_Reference: string;
  Notes: string;
}

type ViewType = 'dashboard' | 'tables' | 'webscan';

// ============================================================================
// API CONFIGURATION
// ============================================================================

const API_CONFIG = {
  cryptoApi: "https://backend-1-v77y.onrender.com/api",
  scanApi: "http://localhost:8000/"
};

// ============================================================================
// API FUNCTIONS
// ============================================================================

const fetchDataFromAPI = async (): Promise<ApiCryptoAlgorithm[]> => {
  try {
    const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    const result = await response.json();
    console.log('âœ… API data fetched successfully');
    return result.data || [];
  } catch (error) {
    console.error('âŒ Failed to fetch data from API:', error);
    return [];
  }
};

const transformApiData = (apiData: ApiCryptoAlgorithm[]): CryptoAlgorithm[] => {
  return apiData.map((item, index) => ({
    id: `${item.Algorithm_Name}-${index}`,
    algorithm_name: item.Algorithm_Name,
    variant: item.Variant,
    purpose: item.Purpose,
    usage_context: item.Usage_Context ? item.Usage_Context.split(',').map(s => s.trim()) : [],
    status_today: item.Status_Today,
    pqc_status: item.PQC_Status,
    priority: item.Priority,
    classical_recommended: item.Classical_Recommended,
    quantum_recommended: item.Quantum_Recommended,
    nist_reference: item.NIST_Reference ? item.NIST_Reference.split(',').map(s => s.trim()) : [],
    notes: item.Notes,
    section: item.Section,
    visible: false,
  }));
};

const categorizeApiData = (transformedData: CryptoAlgorithm[]) => {
  const categories: { [key: string]: CryptoAlgorithm[] } = {
    symmetric: [],
    asymmetric: [],
    hash: [],
    mac_kdf: [],
    pqc: [],
  };
  
  const keywordMap = {
    pqc: ['kyber', 'dilithium', 'falcon', 'sphincs', 'ntru', 'bike'],
    mac_kdf: ['hmac', 'cmac', 'pbkdf2', 'hkdf', 'argon', 'bcrypt', 'scrypt', 'gcm', 'ccm', 'chacha20', 'poly1305'],
    asymmetric: ['rsa', 'ecc', 'dsa', 'diffie-hellman', 'x25519', 'ed25519'],
    hash: ['sha', 'md5'],
    symmetric: ['aes', 'des', 'rc4', 'rc5', 'blowfish', 'camellia', 'seed'],
  };  

  transformedData.forEach(item => {
    const section = item.section?.toLowerCase() || '';
    if (section.includes('asymmetric')) {
      categories.asymmetric.push(item);
    } else if (section.includes('symmetric')) {
      categories.symmetric.push(item);
    } else if (section.includes('hash')) {
      categories.hash.push(item);
    } else if (section.includes('mac') || section.includes('kdf')) {
      categories.mac_kdf.push(item);
    } else if (section.includes('post-quantum')) {
      categories.pqc.push(item);
    } else {
      const name = item.algorithm_name.toLowerCase();
      let found = false;
      for (const category in keywordMap) {
        if (keywordMap[category].some(keyword => name.includes(keyword))) {
          categories[category as keyof typeof categories].push(item);
          found = true;
          break;
        }
      }
      if (!found) {
        console.warn(`Could not categorize: ${item.algorithm_name}`);
      }
    }
  });

  return categories;
};

const commonColumns: ColumnDef[] = [
  { key: "algorithm_name", header: "Algorithm" },
  { key: "variant", header: "Variant" },
  { key: "purpose", header: "Purpose" },
  { key: "priority", header: "Priority" },
  { key: "usage_context", header: "Usage Context" },
  { key: "status_today", header: "Status" },
  { key: "pqc_status", header: "PQC Status" },
  { key: "notes", header: "Notes" },
];

// ============================================================================
// MAIN SCAN COMPONENT (DASHBOARD CONTROLLER)
// ============================================================================

const Scan = () => {
  const [symmetricData, setSymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [asymmetricData, setAsymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [hashData, setHashData] = useState<CryptoAlgorithm[]>([]);
  const [macKdfData, setMacKdfData] = useState<CryptoAlgorithm[]>([]);
  const [pqcData, setPqcData] = useState<CryptoAlgorithm[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [view, setView] = useState<ViewType>('dashboard');

  const [isSymmetricEdited, setIsSymmetricEdited] = useState(false);
  const [isAsymmetricEdited, setIsAsymmetricEdited] = useState(false);
  const [isHashEdited, setIsHashEdited] = useState(false);
  const [isMacKdfEdited, setIsMacKdfEdited] = useState(false);
  const [isPqcEdited, setIsPqcEdited] = useState(false);

  const initialCategorizedData = useRef<{ [key: string]: CryptoAlgorithm[] }>({});

  useEffect(() => {
    const initializeData = async () => {
      try {
        const apiData = await fetchDataFromAPI();
        const transformedData = transformApiData(apiData);
        const categorizedData = categorizeApiData(transformedData);

        const withVisible = (data: CryptoAlgorithm[], count: number) =>
          data.map((item, index) => ({ ...item, visible: index < count }));

        const initialSymmetric = withVisible(categorizedData.symmetric || [], 3);
        const initialAsymmetric = withVisible(categorizedData.asymmetric || [], 3);
        const initialHash = withVisible(categorizedData.hash || [], 3);
        const initialMacKdf = withVisible(categorizedData.mac_kdf || [], 3);
        const initialPqc = withVisible(categorizedData.pqc || [], 3);

        initialCategorizedData.current = { 
          symmetric: initialSymmetric, 
          asymmetric: initialAsymmetric, 
          hash: initialHash, 
          mac_kdf: initialMacKdf, 
          pqc: initialPqc 
        };

        setSymmetricData(initialSymmetric);
        setAsymmetricData(initialAsymmetric);
        setHashData(initialHash);
        setMacKdfData(initialMacKdf);
        setPqcData(initialPqc);

      } catch (error) {
        console.error('âŒ Error initializing profile data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeData();
  }, []);

  const handleSaveChanges = () => {
    console.log("Saving all changes...");
    console.log("Symmetric:", symmetricData);
    console.log("Asymmetric:", asymmetricData);
    console.log("Hash:", hashData);
    console.log("MAC/KDF:", macKdfData);
    console.log("PQC:", pqcData);
  };

  const handleReset = () => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsSymmetricEdited(false);
    setIsAsymmetricEdited(false);
    setIsHashEdited(false);
    setIsMacKdfEdited(false);
    setIsPqcEdited(false);
    console.log("All tables reset to original state.");
  };

  const onSymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setSymmetricData(d);
    setIsSymmetricEdited(true);
  }, []);
  const onSymmetricReset = useCallback(() => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setIsSymmetricEdited(false);
  }, []);

  const onAsymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setAsymmetricData(d);
    setIsAsymmetricEdited(true);
  }, []);
  const onAsymmetricReset = useCallback(() => {
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setIsAsymmetricEdited(false);
  }, []);

  const onHashUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setHashData(d);
    setIsHashEdited(true);
  }, []);
  const onHashReset = useCallback(() => {
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setIsHashEdited(false);
  }, []);

  const onMacKdfUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setMacKdfData(d);
    setIsMacKdfEdited(true);
  }, []);
  const onMacKdfReset = useCallback(() => {
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setIsMacKdfEdited(false);
  }, []);

  const onPqcUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setPqcData(d);
    setIsPqcEdited(true);
  }, []);
  const onPqcReset = useCallback(() => {
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsPqcEdited(false);
  }, []);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <p>Loading Scan Center...</p>
        </div>
      </div>
    );
  }

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  // ============================================================================
  // RENDER LOGIC
  // ============================================================================

  return (
    <AnimatePresence mode="wait">
      {view === 'webscan' ? (
        // WebScan handles its own UI completely
        <WebScan
          key="webscan"
          onBack={() => setView('dashboard')}
          apiBaseUrl={API_CONFIG.scanApi}
        />
      ) : view === 'dashboard' ? (
        // Dashboard View - Simple Navigation
        <motion.div
          key="dashboard"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          transition={{ duration: 0.3 }}
          className="flex flex-col items-center justify-center min-h-[calc(100vh-8rem)] p-4"
        >
          <div className="w-full max-w-2xl mx-auto">
            <div className="text-center mb-12">
              <h1 className="text-4xl font-bold tracking-tight">Scan Center</h1>
              <p className="text-lg text-muted-foreground mt-2">Select a scan type to begin.</p>
            </div>
            <div className="grid grid-cols-1 gap-8">
              <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                <Card
                  onClick={() => setView('webscan')}
                  className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                >
                  <CardHeader>
                    <div className="flex items-center gap-4 mb-4">
                      <div className="p-3 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                        <Globe className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                      </div>
                      <div>
                        <CardTitle className="text-2xl">Web Scan</CardTitle>
                        <CardDescription className="text-base">Scan your web assets for vulnerabilities.</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      Initiate scans on your public-facing websites and APIs to identify cryptographic weaknesses and compliance issues.
                    </p>
                  </CardContent>
                  <div className="p-6 pt-0">
                    <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                      Start Scan <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                    </Button>
                  </div>
                </Card>
              </motion.div>
            </div>
          </div>
        </motion.div>
      ) : (
        // Tables View - Cryptography Management
        <motion.div
          key="tables"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          transition={{ duration: 0.3 }}
          className="p-4 sm:p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-2xl font-bold">Cryptography Profile Management</h1>
            <Button variant="outline" onClick={() => setView('dashboard')}>
              <ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard
            </Button>
          </div>

          <div className="space-y-8">
            <CryptoTable 
              title="Symmetric Algorithms" 
              data={symmetricData} 
              columns={commonColumns} 
              isEdited={isSymmetricEdited}
              onUpdate={onSymmetricUpdate}
              onReset={onSymmetricReset}
            />
            <CryptoTable 
              title="Asymmetric Algorithms" 
              data={asymmetricData} 
              columns={commonColumns} 
              isEdited={isAsymmetricEdited} 
              onUpdate={onAsymmetricUpdate}
              onReset={onAsymmetricReset}
            />
            <CryptoTable 
              title="Hash Functions" 
              data={hashData} 
              columns={commonColumns} 
              isEdited={isHashEdited} 
              onUpdate={onHashUpdate}
              onReset={onHashReset}
            />
            <CryptoTable 
              title="MACs & KDFs" 
              data={macKdfData} 
              columns={commonColumns} 
              isEdited={isMacKdfEdited} 
              onUpdate={onMacKdfUpdate}
              onReset={onMacKdfReset}
            />
            <CryptoTable 
              title="Post-Quantum Cryptography" 
              data={pqcData} 
              columns={commonColumns} 
              isEdited={isPqcEdited} 
              onUpdate={onPqcUpdate}
              onReset={onPqcReset}
            />
          </div>

          <div className="mt-8 flex justify-end gap-4">
            <Button onClick={handleSaveChanges}>
              <Save className="h-4 w-4 mr-2" /> Save Changes
            </Button>
            <Button variant="outline" onClick={handleReset}>
              <RotateCcw className="h-4 w-4 mr-2" /> Reset All
            </Button>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default Scan;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Settings.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { motion } from "framer-motion";
import { Settings as SettingsIcon, Bell, Shield, Database, Users, Save } from "lucide-react";

export default function Settings() {
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };
  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div>
        <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Settings</h2>
        <p className="text-muted-foreground">
          Configure your post-quantum cryptography dashboard preferences and settings
        </p>
      </div>

      <motion.div
        className="grid grid-cols-1 lg:grid-cols-2 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1 } },
        }}
      >
        {/* General Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <SettingsIcon className="h-5 w-5" />
                General Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="org-name">Organization Name</Label>
                <Input id="org-name" placeholder="Your Organization" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="dashboard-refresh">Dashboard Refresh Interval</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select interval" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 seconds</SelectItem>
                    <SelectItem value="60">1 minute</SelectItem>
                    <SelectItem value="300">5 minutes</SelectItem>
                    <SelectItem value="600">10 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="timezone">Timezone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select timezone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="utc">UTC</SelectItem>
                    <SelectItem value="est">Eastern Time</SelectItem>
                    <SelectItem value="pst">Pacific Time</SelectItem>
                    <SelectItem value="cet">Central European Time</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="dark-mode">Dark Mode</Label>
                  <p className="text-sm text-muted-foreground">Enable dark theme</p>
                </div>
                <Switch id="dark-mode" className="sm:ml-auto" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Notification Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="h-5 w-5" />
                Notifications
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="email-alerts">Email Alerts</Label>
                  <p className="text-sm text-muted-foreground">Receive email notifications</p>
                </div>
                <Switch id="email-alerts" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="critical-vulns">Critical Vulnerabilities</Label>
                  <p className="text-sm text-muted-foreground">Immediate alerts for critical issues</p>
                </div>
                <Switch id="critical-vulns" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="weekly-reports">Weekly Reports</Label>
                  <p className="text-sm text-muted-foreground">Automated weekly summary reports</p>
                </div>
                <Switch id="weekly-reports" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="compliance-updates">Compliance Updates</Label>
                  <p className="text-sm text-muted-foreground">NIST PQC standard updates</p>
                </div>
                <Switch id="compliance-updates" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="notification-email">Notification Email</Label>
                <Input id="notification-email" type="email" placeholder="admin@company.com" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Security Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Security Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="scan-frequency">Automatic Scan Frequency</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select frequency" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="daily">Daily</SelectItem>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                    <SelectItem value="manual">Manual Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="auto-remediation">Auto-Remediation</Label>
                  <p className="text-sm text-muted-foreground">Automatically fix low-risk issues</p>
                </div>
                <Switch id="auto-remediation" className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="threat-intel">Threat Intelligence</Label>
                  <p className="text-sm text-muted-foreground">External threat data integration</p>
                </div>
                <Switch id="threat-intel" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="risk-threshold">Risk Score Threshold</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select threshold" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low (1-3)</SelectItem>
                    <SelectItem value="medium">Medium (4-6)</SelectItem>
                    <SelectItem value="high">High (7-8)</SelectItem>
                    <SelectItem value="critical">Critical (9-10)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Data & Integration */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Database className="h-5 w-5" />
                Data & Integration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="data-retention">Data Retention Period</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select period" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 days</SelectItem>
                    <SelectItem value="90">90 days</SelectItem>
                    <SelectItem value="180">6 months</SelectItem>
                    <SelectItem value="365">1 year</SelectItem>
                    <SelectItem value="unlimited">Unlimited</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="export-enabled">Data Export</Label>
                  <p className="text-sm text-muted-foreground">Allow data export to external systems</p>
                </div>
                <Switch id="export-enabled" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="api-endpoint">API Endpoint</Label>
                <Input id="api-endpoint" placeholder="https://api.yourcompany.com/pqc" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="backup-location">Backup Location</Label>
                <Input id="backup-location" placeholder="s3://your-bucket/backups" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="auto-backup">Automatic Backups</Label>
                  <p className="text-sm text-muted-foreground">Daily automated backups</p>
                </div>
                <Switch id="auto-backup" defaultChecked className="sm:ml-auto" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>

      {/* User Management */}
      <motion.div variants={cardVariants}>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              User Management
            </CardTitle>
          </CardHeader>
          <CardContent>
              <div className="overflow-x-auto responsive-table-container">
              <table className="w-full text-sm">
                <thead className="hidden md:table-header-group">
                  <tr className="border-b border-border">
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">User</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Role</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Last Active</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Status</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr className="block md:table-row border-b border-border/50">
                    <td className="p-4 md:py-3 md:px-4 font-medium text-foreground md:table-cell">
                      <div>
                        <p className="font-medium text-foreground">admin@company.com</p>
                        <p className="text-sm text-muted-foreground">Administrator</p>
                      </div>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Role">Admin</td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Last Active">2 minutes ago</td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Status">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-success/10 text-success">
                        Active
                      </span>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Actions">
                      <Button variant="outline" size="sm">Edit</Button>
                    </td>
                  </tr>
                  <tr className="block md:table-row border-b border-border/50">
                    <td className="p-4 md:py-3 md:px-4 font-medium text-foreground md:table-cell">
                      <div>
                        <p className="font-medium text-foreground">security@company.com</p>
                        <p className="text-sm text-muted-foreground">Security Analyst</p>
                      </div>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Role">Analyst</td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Last Active">1 hour ago</td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Status">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-success/10 text-success">
                        Active
                      </span>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Actions">
                      <Button variant="outline" size="sm">Edit</Button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
              <p className="text-sm text-muted-foreground">2 users total</p>
              <Button variant="outline">Add User</Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button className="gap-2">
          <Save className="h-4 w-4" />
          Save Settings
        </Button>
      </div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Vulnerabilities.tsx ---
import { useMemo } from "react";
import { motion } from "framer-motion";
import { useQuery } from "@tanstack/react-query";
import { transformApiDataToUnifiedFormat } from "@/components/vulnerabilities/utils";
import {
  RawApiData, UnifiedData, Vulnerability, AlgorithmData,
  SeverityCounts, PQCStats, TypeDistribution
} from "@/components/vulnerabilities/types";
import { LoadingSpinner, ErrorDisplay, EmptyState } from "@/components/vulnerabilities/StateDisplays";
import { PageHeader } from "@/components/vulnerabilities/PageHeader";
import { Charts } from "@/components/vulnerabilities/Charts";
import { AlgorithmsTable } from "@/components/vulnerabilities/AlgorithmsTable";
import { VulnerabilityCategoryTable } from "@/components/vulnerabilities/VulnerabilityCategoryTable";
import { MetricCard } from "@/components/dashboard/MetricCard";
import {
  ShieldAlert,
  ShieldCheck,
  Shield,
  Cpu,
  ShieldOff
} from "lucide-react";

const fetchVulnerabilities = async (): Promise<RawApiData[]> => {
  const response = await fetch(`${import.meta.env.VITE_API_URL}/apps2`);
  if (!response.ok) {
    throw new Error(`API Error: ${response.status} ${response.statusText}`);
  }
  const apiData = await response.json();
  if (!Array.isArray(apiData)) {
    throw new Error('API response is not an array');
  }
  return apiData;
};

export default function VulnerabilitiesPage() {
  const { data: rawData = [], error, isLoading, isFetching, refetch } = useQuery<RawApiData[], Error>({
    queryKey: ["vulnerabilities"],
    queryFn: fetchVulnerabilities,
  });

  // Transform raw API data to unified format
  const unifiedData: UnifiedData[] = useMemo(() => {
    if (!rawData || rawData.length === 0) return [];
    return transformApiDataToUnifiedFormat(rawData);
  }, [rawData]);

  // Generate vulnerabilities from the unified data
  const vulnerabilities: Vulnerability[] = useMemo(() => {
    return unifiedData.map(item => ({
      id: item.id,
      title: item.title,
      severity: item.severity,
      description: item.description,
      affectedSystems: item.affectedSystems,
      status: item.status,
      discoveredDate: item.discoveredDate
    }));
  }, [unifiedData]);

  // Use the same data for algorithms table and charts
  const algorithmsData: AlgorithmData[] = useMemo(() => {
    return unifiedData.map(item => ({
      id: item.id,
      name: item.name,
      type: item.type,
      strength: item.strength,
      nistStatus: item.nistStatus,
      isPqc: item.isPqc,
      usage: item.usage,
      implementationComplexity: item.implementationComplexity,
      description: item.description,
      quantumVulnerability: item.quantumVulnerability,
      recommendedReplacement: item.recommendedReplacement,
      performanceImpact: item.performanceImpact,
      adoptionRate: item.adoptionRate
    }));
  }, [unifiedData]);

  // Calculate metrics from real data
  const severityCounts: SeverityCounts = useMemo(() => ({
    Critical: vulnerabilities.filter(v => v.severity === "Critical").length,
    High: vulnerabilities.filter(v => v.severity === "High").length,
    Medium: vulnerabilities.filter(v => v.severity === "Medium").length,
    Low: vulnerabilities.filter(v => v.severity === "Low").length,
  }), [vulnerabilities]);

  const pqcStats: PQCStats = useMemo(() => {
    const total = algorithmsData.length;
    const pqcCount = algorithmsData.filter(a => a.isPqc).length;
    const legacyCount = total - pqcCount;
    return {
      total,
      pqc: pqcCount,
      legacy: legacyCount,
      pqcPercentage: total > 0 ? ((pqcCount / total) * 100).toFixed(1) : 0
    };
  }, [algorithmsData]);

  const typeDistribution: TypeDistribution[] = useMemo(() => {
    const types = algorithmsData.reduce((acc: Record<string, number>, alg) => {
      acc[alg.type] = (acc[alg.type] || 0) + 1;
      return acc;
    }, {});
    
    return Object.entries(types).map(([type, count]) => ({ type, count: count as number }));
  }, [algorithmsData]);

  const legacyPercentage = useMemo(() => {
    if (pqcStats.total === 0) return '0.0';
    return ((pqcStats.legacy / pqcStats.total) * 100).toFixed(1);
  }, [pqcStats]);

  if (isLoading) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
            </div>
            <LoadingSpinner />
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
              <p className="text-muted-foreground text-sm sm:text-base">Failed to connect to backend</p>
            </div>
            <ErrorDisplay error={error.message} onRetry={refetch} />
          </div>
        </div>
      </div>
    );
  }

  if (algorithmsData.length === 0) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
            </div>
            <EmptyState onRefresh={refetch} />
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <PageHeader onRefresh={refetch} loading={isFetching} />
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <MetricCard
          title="Critical"
          value={severityCounts.Critical}
          icon={ShieldAlert}
          iconClassName="text-red-500"
          gradient
        />
        <MetricCard
          title="High"
          value={severityCounts.High}
          icon={ShieldAlert}
          iconClassName="text-orange-500"
          gradient
        />
        <MetricCard
          title="Medium"
          value={severityCounts.Medium}
          icon={Shield}
          iconClassName="text-yellow-500"
        />
        <MetricCard
          title="Low"
          value={severityCounts.Low}
          icon={ShieldCheck}
          iconClassName="text-green-500"
        />
        <MetricCard
          title="Total Algorithms"
          value={pqcStats.total}
          icon={Cpu}
        />
        <MetricCard
          title="Post-Quantum Ready"
          value={pqcStats.pqc}
          change={`${pqcStats.pqcPercentage}% of total`}
          icon={ShieldCheck}
          iconClassName="text-green-500"
        />
        <MetricCard
          title="Legacy Algorithms"
          value={pqcStats.legacy}
          change={`${legacyPercentage}% of total`}
          icon={ShieldOff}
          iconClassName="text-red-500"
        />
      </div>
      <Charts typeDistribution={typeDistribution} algorithmsData={algorithmsData} />
      <AlgorithmsTable algorithmsData={algorithmsData} />
      <VulnerabilityCategoryTable />
    </motion.div>
  );
}
