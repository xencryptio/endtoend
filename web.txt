
--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\AppSidebar.tsx ---
import {
  Home,
  Server,
  Shield,
  Settings,
  Link2,
  ArrowRightLeft,
  Menu,
  ScanLine,
  User,
} from "lucide-react";
import { NavLink, useLocation } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarHeader,
  SidebarTrigger,
  useSidebar,
} from "@/components/ui/sidebar";

// -------------------
// Menu Config
// -------------------
const menuItems = [
  { title: "Dashboard", url: "/", icon: Home },
  { title: "Applications", url: "/applications", icon: Server },
  { title: "Vulnerabilities", url: "/vulnerabilities", icon: Shield },
  { title: "Profile", url: "/profile", icon: User },
  { title: "Scan", url: "/scan", icon: ScanLine },
  { title: "Migration Assist", url: "/migrationAssist", icon: ArrowRightLeft },
  { title: "Integration", url: "/integration", icon: Link2 },
  { title: "Settings", url: "/settings", icon: Settings },
];

// -------------------
// Navigation Component
// -------------------
const NavigationContent = ({
  isCollapsed,
  onLinkClick,
}: {
  isCollapsed?: boolean;
  onLinkClick?: () => void;
}) => {
  const location = useLocation();
  const currentPath = location.pathname;

  const isActive = (path: string) =>
    path === "/" ? currentPath === "/" : currentPath.startsWith(path);

  const getNavCls = (active: boolean) =>
    active
      ? "bg-primary text-primary-foreground font-medium"
      : "hover:bg-accent text-foreground";

  return (
    <SidebarMenu>
      {menuItems.map((item) => (
        <SidebarMenuItem key={item.title}>
          <SidebarMenuButton
            asChild
            tooltip={isCollapsed ? item.title : undefined}
          >
            <NavLink
              to={item.url}
              end={item.url === "/"}
              className={getNavCls(isActive(item.url))}
              onClick={onLinkClick}
            >
              <item.icon className="mr-3 h-4 w-4" />
              <span className={isCollapsed ? "sr-only" : "text-base"}>
                {item.title}
              </span>
            </NavLink>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  );
};

// -------------------
// Main Sidebar Component
// -------------------
export function AppSidebar({
  onLinkClick,
}: {
  onLinkClick?: () => void;
}) {
  const { state } = useSidebar();
  const collapsed = state === "collapsed";

  return (
    <>
      {/* Desktop Sidebar */}
      <div className="hidden lg:flex">
        <Sidebar collapsible="icon" className="flex flex-col border-r">
          <SidebarHeader className="border-b border-border px-5 pt-5 pb-[24px]">
            <div className="flex items-center gap-2">
              <SidebarTrigger className="mr-2" />
              {!collapsed && (
                <span className="text-base font-medium text-foreground">
                  Menu
                </span>
              )}
            </div>
          </SidebarHeader>

          <SidebarContent className="flex-1">
            <SidebarGroup>
              <SidebarGroupLabel>Navigation</SidebarGroupLabel>
              <SidebarGroupContent>
                <NavigationContent isCollapsed={collapsed} />
              </SidebarGroupContent>
            </SidebarGroup>
          </SidebarContent>
        </Sidebar>
      </div>

      {/* Mobile Sidebar (Drawer) */}
      {/* This SheetContent is now intended to be placed inside a Sheet in the parent layout */}
      <SheetContent
        side="left"
        className="w-72 p-0 border-0 shadow-none lg:hidden" // Hide on large screens
      >
        <SidebarHeader className="border-b border-border px-5 py-5">
          <span className="text-base font-medium text-foreground">Menu</span>
        </SidebarHeader>
        <div className="p-4">
          <NavigationContent onLinkClick={onLinkClick} />
        </div>
      </SheetContent>
    </>
  );
}

// -------------------
// Mobile Trigger Button (used inside Layout header)
// -------------------
AppSidebar.MobileTrigger = function MobileTrigger() {
  return (
    <SheetTrigger asChild>
      <Button variant="ghost" size="icon" className="lg:hidden">
        <Menu className="h-5 w-5" />
        <span className="sr-only">Open Menu</span>
      </Button>
    </SheetTrigger>
  );
};

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\Layout.tsx ---
"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { useTheme } from "next-themes";
import { SidebarProvider } from "@/components/ui/sidebar";
import { AppSidebar } from "./AppSidebar";
import { Button } from "@/components/ui/button";
import { Sheet } from "@/components/ui/sheet";
import { Shield, Sun, Moon, UserCircle } from "lucide-react";
import { Toaster } from "@/components/ui/toaster";

interface LayoutProps {
  children: React.ReactNode;
}

export function Layout({ children }: LayoutProps) {
  const { theme, setTheme } = useTheme();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  return (
    <SidebarProvider>
      {/* 1. Wrap the layout in the Sheet component and control its state */}
      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
        <div className="min-h-dvh flex w-full bg-background text-foreground">
          {/* 2. Pass the click handler to close the mobile menu on navigation */}
          <AppSidebar onLinkClick={() => setMobileMenuOpen(false)} />

          {/* Main Content Area */}
          <div className="flex-1 flex flex-col h-dvh overflow-hidden">
            {/* Header */}
            <motion.header
              role="banner"
              aria-label="Dashboard Header"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
              style={{ height: "4.55rem" }}
              className="sticky top-0 z-30 items-stretch border-b border-border bg-card/50 backdrop-blur-sm flex px-4 lg:px-6"
            >
              {/* Left Section: Mobile Menu Button + Logo */}
              <div className="flex items-center gap-4 flex-1">
                {/* 3. The trigger now correctly opens the parent Sheet */}
                <div className="lg:hidden">
                  <AppSidebar.MobileTrigger />
                </div>

                <div className="w-8 h-8 bg-gradient-to-br from-primary to-primary-glow rounded-lg flex items-center justify-center">
                  <Shield className="w-5 h-5 text-primary-foreground" />
                </div>
                <div>
                  <h1 className="text-lg font-semibold">Quantum Shield</h1>
                  <p className="text-sm text-muted-foreground">
                    Post-Quantum Crypto
                  </p>
                </div>
              </div>

              {/* Right Section: Live + Theme Toggle + User */}
              <div className="flex items-center gap-3">
                <div className="h-2 w-2 rounded-full bg-success animate-pulse"></div>
                <span className="text-sm text-muted-foreground">Live</span>

                <Button
                  size="icon"
                  variant="ghost"
                  aria-label="Toggle Theme"
                  onClick={toggleTheme}
                >
                  {theme === "dark" ? <Sun size={18} /> : <Moon size={18} />}
                </Button>

                <UserCircle className="w-8 h-8 text-muted-foreground" />
              </div>
            </motion.header>

            {/* Main Content */}
            <main
              className="flex-1 p-6 overflow-auto"
              role="main"
              aria-label="Dashboard Content"
            >
              {children}
            </main>
          </div>
        </div>

        {/* Toast notifications */}
        <Toaster />
      </Sheet>
    </SidebarProvider>
  );
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\MigrationTimelineChart.tsx ---
import React, { useMemo } from "react";
import {
  LineChart,
  Line,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer
} from "recharts";

interface CSVData {
  current_date: string;
  total_algorithms: number;
  total_certificates: number;
  total_pqc_vulnerable_certificates: number;
  total_pqc_vulnerable_algorithms: number;
  cert_changes: number;
  alg_changes: number;
}

interface Props {
  data: CSVData[];
}

type ChartPoint = {
  name: string;
  migrationProgress: number;
  assetsCompleted: number;
};

export const MigrationTimelineChart: React.FC<Props> = ({ data }) => {
  const chartData: ChartPoint[] = useMemo(() => {
    const monthlyData: { [key: string]: ChartPoint } = {};

    data.forEach(app => {
      const [day, month, year] = app.current_date.split("-");
      const key = `${new Date(`${year}-${month}-01`).toLocaleString("default", {
        month: "short"
      })} ${year}`;

      const migrationProgress =
        app.total_pqc_vulnerable_certificates +
        app.total_pqc_vulnerable_algorithms -
        app.cert_changes -
        app.alg_changes;

      const assetsCompleted = app.total_algorithms + app.total_certificates;

      if (!monthlyData[key]) {
        monthlyData[key] = {
          name: key,
          migrationProgress: 0,
          assetsCompleted: 0
        };
      }

      monthlyData[key].migrationProgress += Math.max(0, migrationProgress);
      monthlyData[key].assetsCompleted += assetsCompleted;
    });

    return Object.values(monthlyData).sort(
      (a, b) => new Date(a.name).getTime() - new Date(b.name).getTime()
    );
  }, [data]);

  return (
    <div className="p-4 rounded-xl shadow-lg border bg-white">
      <h2 className="text-lg font-semibold mb-1">Migration Timeline</h2>
      <p className="text-sm text-muted-foreground mb-2">
        Overall progress over time
      </p>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis domain={[0, 600]} />
          <Tooltip />
          <Legend />
          <Line
            type="monotone"
            dataKey="migrationProgress"
            stroke="#3b82f6"
            strokeWidth={2}
            name="Migration Progress"
            dot={{ r: 3 }}
          />
          <Line
            type="monotone"
            dataKey="assetsCompleted"
            stroke="#34d399"
            strokeWidth={2}
            name="Assets Completed"
            dot={{ r: 3 }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ProgressChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";

interface ProgressItem {
  label: string;
  value: number;
  total: number;
  color: "primary" | "success" | "warning" | "destructive";
}

interface ProgressChartProps {
  title: string;
  items: ProgressItem[];
}

export function ProgressChart({ title, items }: ProgressChartProps) {
  const getProgressColor = (color: string) => {
    const colors = {
      primary: "bg-primary",
      success: "bg-success", 
      warning: "bg-warning",
      destructive: "bg-destructive"
    };
    return colors[color as keyof typeof colors] || "bg-primary";
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg font-semibold text-foreground">
          {title}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {items.map((item, index) => {
          const percentage = (item.value / item.total) * 100;
          return (
            <div key={index} className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-foreground font-medium">{item.label}</span>
                <span className="text-muted-foreground">
                  {item.value}/{item.total} ({percentage.toFixed(1)}%)
                </span>
              </div>
              <Progress 
                value={percentage} 
                className="h-2"
              />
            </div>
          );
        })}
      </CardContent>
    </Card>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\Table.tsx ---
import React from 'react';

interface ResponsiveCardTableWrapperProps {
  title?: string;
  description?: string;
  children: React.ReactNode;
  className?: string;
}

const ResponsiveCardTableWrapper: React.FC<ResponsiveCardTableWrapperProps> = ({
  title,
  description,
  children,
  className = ''
}) => {
  return (
    <div className={`bg-white rounded-lg shadow-md border border-gray-200 ${className}`}>
      {/* Card Header - Always visible and responsive */}
      {(title || description) && (
        <div className="p-4 border-b border-gray-200">
          {title && (
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              {title}
            </h3>
          )}
          {description && (
            <p className="text-sm text-gray-600">
              {description}
            </p>
          )}
        </div>
      )}
      
      {/* Scrollable Table Container */}
      <div className="w-full">
        {/* 
          Key CSS classes for table-only scrolling:
          - w-full: Full width of the card
          - overflow-x-auto: Horizontal scroll when needed
          - max-w-full: Prevents the container from expanding beyond card width
        */}
        <div className="w-full overflow-x-auto max-w-full">
          {/* 
            Inner container to ensure proper scrolling behavior
            - min-w-full: Ensures table takes full width when content is small
            - The table inside should have min-w-max or specific min-width
          */}
          <div className="min-w-full">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResponsiveCardTableWrapper;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\ApplicationsView.tsx ---
import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Search, Filter, Shield, Clock, ChevronDown, ArrowLeft, RefreshCw } from "lucide-react";
import { CSVData } from "./types";
import { DUMMY_DATA } from "./constants";

const getRiskBadgeVariant = (risk: string) => {
  switch (risk) {
    case "Low": return "default";
    case "Medium": return "secondary";
    case "High": return "destructive";
    default: return "outline";
  }
};

const getProgressBarColor = (percentage: number) => {
  if (percentage >= 80) return "bg-green-600";
  if (percentage >= 60) return "bg-yellow-600";
  return "bg-red-600";
};

interface ApplicationsFilterProps {
  searchTerm: string;
  setSearchTerm: (term: string) => void;
  selectedRiskFilters: string[];
  toggleRiskFilter: (risk: string) => void;
  selectedTimeComplexityFilters: string[];
  toggleTimeComplexityFilter: (complexity: string) => void;
  selectedQuarterFilters: string[];
  toggleQuarterFilter: (quarter: string) => void;
  quarterFromMode: boolean;
  setQuarterFromMode: (mode: boolean) => void;
  selectedValueBasedFilters: string[];
  toggleValueBasedFilter: (tag: string) => void;
}

function ApplicationsFilter({
  searchTerm,
  setSearchTerm,
  selectedRiskFilters,
  toggleRiskFilter,
  selectedTimeComplexityFilters,
  toggleTimeComplexityFilter,
  selectedQuarterFilters,
  toggleQuarterFilter,
  quarterFromMode,
  setQuarterFromMode,
  selectedValueBasedFilters,
  toggleValueBasedFilter,
}: ApplicationsFilterProps) {
  const [isRiskDropdownOpen, setIsRiskDropdownOpen] = useState(false);
  const [isTimeComplexityDropdownOpen, setIsTimeComplexityDropdownOpen] = useState(false);
  const [isQuarterDropdownOpen, setIsQuarterDropdownOpen] = useState(false);
  const [isValueBasedDropdownOpen, setIsValueBasedDropdownOpen] = useState(false);

  return (
    <Card>
      <CardContent className="p-4">
        <div className="space-y-4">
          <div className="relative mb-2">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search applications, algorithms, or sub-organizations..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9"
              aria-label="Search applications"
            />
          </div>
          <div className="flex flex-row flex-wrap gap-4">
            <div className="relative">
              <Button variant="outline" className="gap-2" onClick={() => setIsRiskDropdownOpen(v => !v)} aria-label="Risk Level Filter">
                <Shield className="h-4 w-4 text-red-600" />
                Risk Level
                <ChevronDown className={`h-4 w-4 transition-transform ${isRiskDropdownOpen ? 'rotate-180' : ''}`} />
              </Button>
              {isRiskDropdownOpen && (
                <div className="absolute z-50 mt-2 left-0 w-48 bg-background border rounded-md shadow-lg">
                  <div className="p-2">
                    {DUMMY_DATA.filterOptions.risk.map(opt => (
                      <div key={opt.value} className={`flex items-center gap-2 px-2 py-1 rounded cursor-pointer hover:bg-muted/50 ${selectedRiskFilters.includes(opt.value) ? 'bg-primary/10' : ''}`} onClick={() => toggleRiskFilter(opt.value)} tabIndex={0} role="checkbox" aria-checked={selectedRiskFilters.includes(opt.value) ? "true" : "false"}>
                        <div className={`w-3 h-3 rounded border ${selectedRiskFilters.includes(opt.value) ? 'bg-red-600 border-red-600' : 'border-muted-foreground'}`} />
                        <span className="text-sm">{opt.label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            <div className="relative">
              <Button variant="outline" className="gap-2" onClick={() => setIsTimeComplexityDropdownOpen(v => !v)} aria-label="Time Complexity Filter">
                <Clock className="h-4 w-4 text-yellow-600" />
                Time Complexity
                <ChevronDown className={`h-4 w-4 transition-transform ${isTimeComplexityDropdownOpen ? 'rotate-180' : ''}`} />
              </Button>
              {isTimeComplexityDropdownOpen && (
                <div className="absolute z-50 mt-2 left-0 w-56 bg-background border rounded-md shadow-lg">
                  <div className="p-2">
                    {DUMMY_DATA.filterOptions.timeComplexity.map(opt => (
                      <div key={opt.value} className={`flex items-center gap-2 px-2 py-1 rounded cursor-pointer hover:bg-muted/50 ${selectedTimeComplexityFilters.includes(opt.value) ? 'bg-primary/10' : ''}`} onClick={() => toggleTimeComplexityFilter(opt.value)} tabIndex={0} role="checkbox" aria-checked={selectedTimeComplexityFilters.includes(opt.value) ? "true" : "false"}>
                        <div className={`w-3 h-3 rounded border ${selectedTimeComplexityFilters.includes(opt.value) ? 'bg-yellow-600 border-yellow-600' : 'border-muted-foreground'}`} />
                        <span className="text-sm">{opt.label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            <div className="relative">
              <Button variant="outline" className="gap-2" onClick={() => setIsQuarterDropdownOpen(v => !v)} aria-label="Quarter Filter">
                <Filter className="h-4 w-4 text-blue-600" />
                Quarter
                <ChevronDown className={`h-4 w-4 transition-transform ${isQuarterDropdownOpen ? 'rotate-180' : ''}`} />
              </Button>
              {isQuarterDropdownOpen && (
                <div className="absolute z-50 mt-2 left-0 w-56 bg-background border rounded-md shadow-lg">
                  <div className="p-2">
                    <div className="flex items-center gap-2 mb-2">
                      <input type="checkbox" checked={quarterFromMode} onChange={e => setQuarterFromMode(e.target.checked)} id="quarter-from-mode" />
                      <label htmlFor="quarter-from-mode" className="text-xs">From Quarter Mode</label>
                    </div>
                    {DUMMY_DATA.filterOptions.quarter.map(opt => (
                      <div key={opt.value} className={`flex items-center gap-2 px-2 py-1 rounded cursor-pointer hover:bg-muted/50 ${selectedQuarterFilters.includes(opt.value) ? 'bg-primary/10' : ''}`} onClick={() => toggleQuarterFilter(opt.value)} tabIndex={0} role="checkbox" aria-checked={selectedQuarterFilters.includes(opt.value) ? "true" : "false"}>
                        <div className={`w-3 h-3 rounded border ${selectedQuarterFilters.includes(opt.value) ? 'bg-blue-600 border-blue-600' : 'border-muted-foreground'}`} />
                        <span className="text-sm">{opt.label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            <div className="relative">
              <Button variant="outline" className="gap-2" onClick={() => setIsValueBasedDropdownOpen(v => !v)} aria-label="Value-Based Tag Filter">
                <Badge className="bg-purple-600 text-white">Tags</Badge>
                Value-Based
                <ChevronDown className={`h-4 w-4 transition-transform ${isValueBasedDropdownOpen ? 'rotate-180' : ''}`} />
              </Button>
              {isValueBasedDropdownOpen && (
                <div className="absolute z-50 mt-2 left-0 w-72 bg-background border rounded-md shadow-lg">
                  <div className="p-2">
                    {DUMMY_DATA.filterOptions.valueBasedTags.map(opt => (
                      <div key={opt.tag} className={`flex items-center gap-2 px-2 py-1 rounded cursor-pointer hover:bg-muted/50 ${selectedValueBasedFilters.includes(opt.tag) ? 'bg-primary/10' : ''}`} onClick={() => toggleValueBasedFilter(opt.tag)} tabIndex={0} role="checkbox" aria-checked={selectedValueBasedFilters.includes(opt.tag) ? "true" : "false"}>
                        <div className={`w-3 h-3 rounded border ${selectedValueBasedFilters.includes(opt.tag) ? 'bg-purple-600 border-purple-600' : 'border-muted-foreground'}`} />
                        <span className="text-sm font-semibold">{opt.tag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          <div className="flex flex-wrap gap-2 mt-4">
            {selectedRiskFilters.map((risk) => (<Badge key={"risk-"+risk} variant="destructive" className="gap-1 cursor-pointer" onClick={() => toggleRiskFilter(risk)}>{risk} <span className="text-xs">Ã—</span></Badge>))}
            {selectedTimeComplexityFilters.map((tc) => (<Badge key={"tc-"+tc} variant="secondary" className="gap-1 cursor-pointer" onClick={() => toggleTimeComplexityFilter(tc)}>{tc} <span className="text-xs">Ã—</span></Badge>))}
            {selectedQuarterFilters.map((q) => (<Badge key={"q-"+q} variant="outline" className="gap-1 cursor-pointer" onClick={() => toggleQuarterFilter(q)}>{quarterFromMode ? `From ${q}` : q} <span className="text-xs">Ã—</span></Badge>))}
            {selectedValueBasedFilters.map((tag) => (<Badge key={"tag-"+tag} className="bg-purple-600 text-white gap-1 cursor-pointer" onClick={() => toggleValueBasedFilter(tag)}>{tag} <span className="text-xs">Ã—</span></Badge>))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

interface ApplicationsTableProps {
  applications: CSVData[];
  view: 'allapps' | 'suborgapps';
}

function ApplicationsTable({ applications, view }: ApplicationsTableProps) {
  if (applications.length === 0) {
    return (
      <Card>
        <CardContent className="text-center py-12">
          <Filter className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">No applications found</h3>
          <p className="text-muted-foreground">Try adjusting your search terms or filters</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardContent className="p-0">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="border-b"><tr className="bg-muted/50">
              <th className="text-left p-4 font-medium">Application</th>
              {view === 'allapps' && <th className="text-left p-4 font-medium">Sub-Organization</th>}
              <th className="text-left p-4 font-medium">Risk Level</th>
              <th className="text-left p-4 font-medium">Time Complexity</th>
              <th className="text-left p-4 font-medium">Time</th>
              <th className="text-left p-4 font-medium">PQC Ready</th>
              <th className="text-left p-4 font-medium">Vulnerabilities</th>
              <th className="text-left p-4 font-medium">Algorithms</th>
              <th className="text-left p-4 font-medium">Last Scan</th>
            </tr></thead>
            <tbody>
              {applications.map((app, index) => (
                <tr key={index} className="border-b hover:bg-muted/25 transition-colors">
                  <td className="p-4 font-medium">{app.application}</td>
                  {view === 'allapps' && (<td className="p-4 text-sm text-muted-foreground">{app.sub_org}</td>)}
                  <td className="p-4"><Badge variant={getRiskBadgeVariant(app.risk_level)}>{app.risk_level}</Badge></td>
                  <td className="p-4"><Badge variant="outline">{app.time_complexity}</Badge></td>
                  <td className="p-4"><Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">{app.time_quarter}</Badge></td>
                  <td className="p-4"><div className="flex items-center gap-2">
                      <div className="w-16 bg-muted rounded-full h-2"><div className={`h-2 rounded-full ${getProgressBarColor(app.pqc_ready)}`} style={{ width: `${app.pqc_ready}%` }} /></div>
                      <span className="text-sm text-muted-foreground">{app.pqc_ready}%</span>
                  </div></td>
                  <td className="p-4"><span className={`font-semibold ${app.vulnerabilities > 20 ? 'text-red-600' : app.vulnerabilities > 10 ? 'text-yellow-600' : 'text-green-600'}`}>{app.vulnerabilities}</span></td>
                  <td className="p-4 text-sm text-muted-foreground max-w-xs truncate">{app.algorithms_used}</td>
                  <td className="p-4 text-sm text-muted-foreground">{app.last_scan}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
}

interface ApplicationsViewProps extends ApplicationsFilterProps {
  currentView: 'allapps' | 'suborgapps';
  selectedSubOrg: string;
  onBack: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  filteredApplications: CSVData[];
}

export function ApplicationsView({
  currentView,
  selectedSubOrg,
  onBack,
  onRefresh,
  isRefreshing,
  filteredApplications,
  ...filterProps
}: ApplicationsViewProps) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          {currentView === 'suborgapps' && (
            <Button variant="outline" onClick={onBack} className="gap-2">
              <ArrowLeft className="h-4 w-4" />
              Back
            </Button>
          )}
          <div>
            <h2 className="text-3xl font-bold text-foreground">
              {currentView === 'suborgapps' ? `${selectedSubOrg} - Applications` : 'All Applications'}
            </h2>
            <p className="text-muted-foreground">
              {currentView === 'suborgapps' 
                ? `Applications in ${selectedSubOrg}`
                : 'All applications across the organization'
              }
            </p>
          </div>
        </div>
        <Button onClick={onRefresh} variant="outline" disabled={isRefreshing} className="gap-2">
          <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
          {isRefreshing ? "Refreshing..." : "Refresh Data"}
        </Button>
      </div>

      <ApplicationsFilter {...filterProps} />

      <ApplicationsTable
        applications={filteredApplications}
        view={currentView}
      />
    </div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\constants.ts ---
import { ValueBasedTag } from "./types";

export const DUMMY_DATA = {
  filterOptions: {
    risk: [
      { category: "risk" as const, label: "High Risk", value: "High" },
      { category: "risk" as const, label: "Medium Risk", value: "Medium" },
      { category: "risk" as const, label: "Low Risk", value: "Low" }
    ],
    timeComplexity: [
      { category: "timeComplexity" as const, label: "High Complexity", value: "High" },
      { category: "timeComplexity" as const, label: "Medium Complexity", value: "Medium" },
      { category: "timeComplexity" as const, label: "Low Complexity", value: "Low" }
    ],
    quarter: [
      { category: "quarter" as const, label: "Q1", value: "Q1" },
      { category: "quarter" as const, label: "Q2", value: "Q2" },
      { category: "quarter" as const, label: "Q3", value: "Q3" },
      { category: "quarter" as const, label: "Q4", value: "Q4" },
      { category: "quarter" as const, label: "Q5", value: "Q5" },
      { category: "quarter" as const, label: "Q6", value: "Q6" }
    ],
    valueBasedTags: [
      { tag: "Critical Bottleneck", description: "Extremely risky and time-consuming â€” demands urgent action, high resources, and top priority." },
      { tag: "High-Stakes Project", description: "Risky with moderate complexity â€” needs tight monitoring and structured mid-term effort." },
      { tag: "Quick Risk Fix", description: "High risk but fast to resolve â€” quick mitigation brings immediate value. High ROI potential." },
      { tag: "Complex Opportunity", description: "Manageable risk but time-intensive â€” plan carefully. Can offer value if handled systematically." },
      { tag: "Strategic Task", description: "Balanced on both axes â€” ideal for standard project planning. Moderate, reliable value." },
      { tag: "Low-Hanging Fruit", description: "Some risk but very quick to resolve â€” should be prioritized early for easy wins." },
      { tag: "Resource Drain", description: "Not risky, but consumes a lot of time â€” often low value unless required by policy or mandate." },
      { tag: "Routine Task", description: "Low risk, moderate effort â€” good for backlog or routine workload. Steady, lower-priority value." },
      { tag: "Trivial Fix", description: "Minimal risk and effort â€” best suited for automation, training, or quick efficiency wins." }
    ]
  }
};

export const VALUE_BASED_MATRIX: Record<string, Record<string, ValueBasedTag>> = {
  High: {
    High: DUMMY_DATA.filterOptions.valueBasedTags[0],
    Medium: DUMMY_DATA.filterOptions.valueBasedTags[1],
    Low: DUMMY_DATA.filterOptions.valueBasedTags[2],
  },
  Medium: {
    High: DUMMY_DATA.filterOptions.valueBasedTags[3],
    Medium: DUMMY_DATA.filterOptions.valueBasedTags[4],
    Low: DUMMY_DATA.filterOptions.valueBasedTags[5],
  },
  Low: {
    High: DUMMY_DATA.filterOptions.valueBasedTags[6],
    Medium: DUMMY_DATA.filterOptions.valueBasedTags[7],
    Low: DUMMY_DATA.filterOptions.valueBasedTags[8],
  },
};

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\SubOrgsView.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Building2, Eye, RefreshCw } from "lucide-react";
import { SubOrg } from "./types";

const getStatusBadgeVariant = (status: string) => {
  switch (status) {
    case "Good": return "default";
    case "Warning": return "secondary";
    case "Critical": return "destructive";
    default: return "outline";
  }
};

const getRiskColor = (risk: string) => {
  switch (risk) {
    case "Low": return "text-green-600";
    case "Medium": return "text-yellow-600";
    case "High": return "text-red-600";
    default: return "text-gray-500";
  }
};

const getProgressBarColor = (percentage: number) => {
  if (percentage >= 80) return "bg-green-600";
  if (percentage >= 60) return "bg-yellow-600";
  return "bg-red-600";
};

interface SubOrgCardProps {
  subOrg: SubOrg;
  onClick: (name: string) => void;
}

function SubOrgCard({ subOrg, onClick }: SubOrgCardProps) {
  return (
    <Card 
      className="hover:shadow-lg transition-all cursor-pointer transform hover:scale-105"
      onClick={() => onClick(subOrg.name)}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            <Building2 className="h-5 w-5 text-primary" />
            <CardTitle className="text-xl font-semibold text-foreground">
              {subOrg.name}
            </CardTitle>
          </div>
          <Badge variant={getStatusBadgeVariant(subOrg.pqc_status)}>
            {subOrg.pqc_status}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex justify-between items-center">
          <span className="text-sm font-medium text-foreground">Applications</span>
          <span className="text-base text-muted-foreground">{subOrg.total_apps}</span>
        </div>
        
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-foreground">High Risk</span>
            <span className={`text-base font-semibold ${getRiskColor("High")}`}>{subOrg.high_risk_count}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-foreground">Medium Risk</span>
            <span className={`text-base font-semibold ${getRiskColor("Medium")}`}>{subOrg.medium_risk_count}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium text-foreground">Low Risk</span>
            <span className={`text-base font-semibold ${getRiskColor("Low")}`}>{subOrg.low_risk_count}</span>
          </div>
        </div>

        <div>
          <div className="flex justify-between items-center mb-2">
            <span className="text-base font-medium text-foreground">PQC Readiness</span>
            <span className="text-base text-muted-foreground">{subOrg.pqc_ready_percentage}%</span>
          </div>
          <div className="relative w-full bg-muted rounded-full h-2.5">
            <div 
              className={`h-2.5 rounded-full transition-all duration-300 ${getProgressBarColor(subOrg.pqc_ready_percentage)}`}
              style={{ width: `${subOrg.pqc_ready_percentage}%` }}
            />
          </div>
        </div>

        <Button variant="outline" size="sm" className="w-full gap-2">
          <Eye className="h-4 w-4" />
          View Details
        </Button>
      </CardContent>
    </Card>
  );
}

interface SubOrgsViewProps {
  subOrgs: SubOrg[];
  onSubOrgClick: (name: string) => void;
  onRefresh: () => void;
  isRefreshing: boolean;
}

export function SubOrgsView({ subOrgs, onSubOrgClick, onRefresh, isRefreshing }: SubOrgsViewProps) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-4xl font-bold text-foreground">Sub-Organizations</h2>
          <p className="text-lg text-muted-foreground">
            Overview of post-quantum cryptography readiness across all departments
          </p>
        </div>
        <Button 
          variant="outline" 
          className="gap-2"
          onClick={onRefresh}
          disabled={isRefreshing}
        >
          <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
          Refresh Data
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {subOrgs.map((subOrg, index) => (
          <SubOrgCard
            key={index}
            subOrg={subOrg}
            onClick={onSubOrgClick}
          />
        ))}
      </div>
    </div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\types.ts ---
export interface CSVData {
  application: string;
  sub_org: string;
  risk_level: string;
  time_complexity: string;
  time_quarter: string;
  pqc_ready: number;
  vulnerabilities: number;
  algorithms_used: string;
  last_scan: string;
}

export interface SubOrg {
  name: string;
  total_apps: number;
  pqc_ready_percentage: number;
  high_risk_count: number;
  medium_risk_count: number;
  low_risk_count: number;
  pqc_status: string;
}

export interface FilterOption {
  category: "risk" | "quarter" | "timeComplexity";
  label: string;
  value: string;
}

export interface ValueBasedTag {
  tag: string;
  description: string;
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\utils.ts ---
import { CSVData } from "./types";
import { VALUE_BASED_MATRIX } from "./constants";

export function getValueBasedTag(risk: string, timeComplexity: string) {
  if (VALUE_BASED_MATRIX[risk] && VALUE_BASED_MATRIX[risk][timeComplexity]) {
    return VALUE_BASED_MATRIX[risk][timeComplexity].tag;
  }
  return "";
}

export function isQuarterInRange(appQuarter: string, selectedQuarters: string[], fromMode: boolean) {
  let currentDateStr = "2025-08-08"; // fallback
  if (typeof window !== "undefined") {
    // @ts-ignore
    if (window["__CURRENT_DATE__"]) {
      // @ts-ignore
      currentDateStr = window["__CURRENT_DATE__"];
    }
    // @ts-ignore
    if (window["__APP_DATA__"] && window["__APP_DATA__"].applications && window["__APP_DATA__"].applications.length > 0) {
      // @ts-ignore
      const firstApp = window["__APP_DATA__"].applications[0];
      if (firstApp.last_scan) currentDateStr = firstApp.last_scan;
      if (firstApp.current_date) currentDateStr = firstApp.current_date;
    }
  }
  let currentYear = 2025;
  let currentMonth = 7;
  if (currentDateStr) {
    const parts = currentDateStr.split("-");
    if (parts.length >= 2) {
      currentYear = parseInt(parts[0], 10);
      currentMonth = parseInt(parts[1], 10) - 1;
    }
  }
  const monthToQuarter = (month: number) => {
    if (month >= 0 && month <= 2) return "Q1";
    if (month >= 3 && month <= 5) return "Q2";
    if (month >= 6 && month <= 8) return "Q3";
    if (month >= 9 && month <= 11) return "Q4";
    return "Q1";
  };
  const currentQuarter = monthToQuarter(currentMonth);
  function parseQuarterYear(qstr: string) {
    const match = qstr.match(/(Q[1-6])\s*(\d{4})?/);
    if (!match) return { quarter: qstr, year: currentYear };
    return {
      quarter: match[1],
      year: match[2] ? parseInt(match[2], 10) : currentYear
    };
  }
  function getQuarterIndex(q: string, year: number) {
    const qNum = parseInt(q.replace("Q", ""), 10);
    return (year * 4) + (qNum - 1);
  }
  const currentQuarterIdx = getQuarterIndex(currentQuarter, currentYear);
  if (fromMode) {
    return selectedQuarters.some(selectedQ => {
      const selQ = parseQuarterYear(selectedQ);
      const appQ = parseQuarterYear(appQuarter);
      const selIdx = getQuarterIndex(selQ.quarter, selQ.year);
      const appIdx = getQuarterIndex(appQ.quarter, appQ.year);
      return appIdx >= selIdx && appIdx <= currentQuarterIdx;
    });
  } else {
    return selectedQuarters.some(selectedQ => {
      const appQ = parseQuarterYear(appQuarter);
      const appIdx = getQuarterIndex(appQ.quarter, appQ.year);
      const selectedQNum = parseInt(selectedQ.replace("Q", ""), 10);
      const currQNum = parseInt(currentQuarter.replace("Q", ""), 10);
      let targetYear = currentYear;
      let targetQNum = selectedQNum;
      if (selectedQNum <= currQNum) {
        targetYear = currentYear + 1;
      }
      const targetIdx = getQuarterIndex(`Q${targetQNum}`, targetYear);
      return appIdx === targetIdx;
    });
  }
}

export function filterApplicationsByMultipleCategories(applications: CSVData[], {
  selectedRiskFilters,
  selectedTimeComplexityFilters,
  selectedQuarterFilters,
  quarterFromMode,
  selectedValueBasedFilters,
  searchTerm,
}: {
  selectedRiskFilters: string[];
  selectedTimeComplexityFilters: string[];
  selectedQuarterFilters: string[];
  quarterFromMode: boolean;
  selectedValueBasedFilters: string[];
  searchTerm: string;
}) {
  return applications.filter(app => {
    const riskMatch = selectedRiskFilters.length === 0 || selectedRiskFilters.includes(app.risk_level);
    const timeComplexityMatch = selectedTimeComplexityFilters.length === 0 || selectedTimeComplexityFilters.includes(app.time_complexity);
    const appQuarter = app.time_quarter.split(" ")[0];
    const quarterMatch = selectedQuarterFilters.length === 0 || isQuarterInRange(appQuarter, selectedQuarterFilters, quarterFromMode);
    const appTag = getValueBasedTag(app.risk_level, app.time_complexity);
    const valueTagMatch = selectedValueBasedFilters.length === 0 || selectedValueBasedFilters.includes(appTag);
    const searchMatch = !searchTerm || (
      app.application.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.algorithms_used.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.sub_org.toLowerCase().includes(searchTerm.toLowerCase())
    );
    return riskMatch && timeComplexityMatch && quarterMatch && valueTagMatch && searchMatch;
  });
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\applications\ViewSwitcher.tsx ---
"use client";

import { Building2, Shield } from "lucide-react";
import { Button } from "@/components/ui/button";

interface ViewSwitcherProps {
  currentView: 'suborgs' | 'allapps';
  onViewSwitch: (view: 'suborgs' | 'allapps') => void;
}

export function ViewSwitcher({ currentView, onViewSwitch }: ViewSwitcherProps) {
  return (
    <div className="flex gap-2">
      <Button
        variant={currentView === 'suborgs' ? "default" : "outline"}
        onClick={() => onViewSwitch('suborgs')}
        className="gap-2"
      >
        <Building2 className="h-4 w-4" />
        <span className="hidden sm:inline">Sub-Organizations</span>
        <span className="sm:hidden">Sub-Orgs</span>
      </Button>
      <Button
        variant={currentView === 'allapps' ? "default" : "outline"}
        onClick={() => onViewSwitch('allapps')}
        className="gap-2"
      >
        <Shield className="h-4 w-4" />
        <span className="hidden sm:inline">All Applications</span>
        <span className="sm:hidden">All Apps</span>
      </Button>
    </div>
  );
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\dashboard\DashboardMetrics.tsx ---

import { Server, TrendingUp, CheckCircle, AlertTriangle, Shield } from "lucide-react";
import { Progress } from '@/components/ui/progress'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

interface DashboardMetricsProps {
  totalApps: number;
  totalAlgChanges: number;
  totalCertChanges: number;
  avgAlgPerApp: string;
  avgCertPerApp: string;
  totalVulns: number;
  secureApps: number;
  avgMigration: number;
  avgPQC: number;
}

export const DashboardMetrics: React.FC<DashboardMetricsProps> = ({
  totalApps,
  totalAlgChanges,
  totalCertChanges,
  avgAlgPerApp,
  avgCertPerApp,
  totalVulns,
  secureApps,
  avgMigration,
  avgPQC,
}) => {
  return (
    <div className="space-y-6">
      {/* First Row: Progress Bars */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">PQC Readiness</CardTitle>
            <TrendingUp className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-3">{avgMigration.toFixed(1)}%</div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
              <div
                className={`h-3 rounded-full transition-all duration-300 ${
                  avgMigration < 30
                    ? 'bg-red-800'
                    : avgMigration < 50
                    ? 'bg-red-600'
                    : avgMigration < 80
                    ? 'bg-orange-400'
                    : 'bg-green-500'

                }`}
                style={{ width: `${avgMigration}%` }}
              />
            </div>
            <p className="text-sm font-medium text-muted-foreground mt-2">
              {avgMigration >= 80
                ? "+on track"
                : avgMigration >= 60
                ? "~moderate"
                : avgMigration >= 30
                ? "~lagging"
                : "-behind schedule"}
            </p>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">Migration Progress</CardTitle>
            <Shield className="h-5 w-5 text-green-600" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-3">{Math.round(avgPQC)}%</div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
              <div
                className={`h-3 rounded-full transition-all duration-300 ${
                  avgPQC < 30
                    ? 'bg-red-800'
                    : avgPQC < 50
                    ? 'bg-red-400'
                    : avgPQC < 80
                    ? 'bg-orange-400'
                    : 'bg-green-500'
                }`}
                style={{ width: `${avgPQC}%` }}
              />
            </div>
            <p className="text-sm font-medium text-muted-foreground mt-2">
              {avgPQC >= 80
                ? "+stable"
                : avgPQC >= 60
                ? "~moderate"
                : avgPQC >= 30
                ? "~needs work"
                : "-critical"}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Second Row: 5 Cards, equally spaced */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6">
        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">Total Applications</CardTitle>
            <Server className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-2">{totalApps}</div>
            <p className="text-sm font-medium text-muted-foreground">+2 this week</p>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">Algorithms Migrated</CardTitle>
            <TrendingUp className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-2">{totalAlgChanges}</div>
            <p className="text-sm font-medium text-muted-foreground">{avgAlgPerApp} per app</p>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">Certificates Migrated</CardTitle>
            <CheckCircle className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-2">{totalCertChanges}</div>
            <p className="text-sm font-medium text-muted-foreground">{avgCertPerApp} per app</p>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-sm font-semibold text-gray-700 dark:text-gray-200">Vulnerabilities</CardTitle>
            <AlertTriangle className="h-5 w-5 text-destructive" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-destructive mb-2">{totalVulns}</div>
            <p className="text-sm font-medium text-muted-foreground">{totalApps - secureApps} fully secure</p>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-900 rounded-2xl shadow-md hover:shadow-lg hover:scale-[1.01] transition duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 px-6 pt-6">
            <CardTitle className="text-base font-semibold text-gray-700 dark:text-gray-200">Secure Apps</CardTitle>
            <CheckCircle className="h-5 w-5 text-green-600" />
          </CardHeader>
          <CardContent className="px-6 pb-6">
            <div className="text-3xl font-bold text-green-600 mb-2">{secureApps}</div>
            <p className="text-sm font-medium text-muted-foreground">{((secureApps / totalApps) * 100).toFixed(1)}% of total</p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\dashboard\MetricCard.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { LucideIcon } from "lucide-react";
import { cn } from "@/lib/utils";

interface MetricCardProps {
  title: string;
  value: string | number;
  change?: string;
  changeType?: "positive" | "negative" | "neutral";
  icon: LucideIcon;
  gradient?: boolean;
  iconClassName?: string;
}

export function MetricCard({ 
  title, 
  value, 
  change, 
  changeType = "neutral", 
  icon: Icon,
  gradient = false,
  iconClassName
}: MetricCardProps) {
  const changeColors = {
    positive: "text-success",
    negative: "text-destructive", 
    neutral: "text-muted-foreground"
  };

  return (
    <Card
      className={cn(
        "relative overflow-hidden transition-all duration-200 rounded-xl p-4",
        "bg-glass-light dark:bg-glass-dark backdrop-blur-md",
        "hover:shadow-lg dark:hover:shadow-xl", // Enhanced hover effect for dark mode
        "border border-border dark:border-white/10", // Optional: subtle border for visibility
        gradient && "bg-gradient-to-br from-card to-accent/10"
      )}
    >
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        <Icon className={cn("h-4 w-4 text-primary", iconClassName)} />
      </CardHeader>
      <CardContent>
        <div className="text-2xl lg:text-3xl font-bold text-foreground">{value}</div>
        {change && (
          <p className={cn("text-xs mt-1", changeColors[changeType])}>
            {change}
          </p>
        )}
      </CardContent>

      {gradient && (
        <div className="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent pointer-events-none" />
      )}
    </Card>
  );
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\dashboard\MigrationAndRiskCharts.tsx ---
// components/Charts/MigrationAndRiskCharts.tsx

import React from "react";
import ReactECharts from "echarts-for-react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { TrendingUp as TrendingUpIcon } from "lucide-react";
import { useTheme } from "next-themes";
import { motion } from "framer-motion";

interface MigrationAndRiskChartsProps {
  vulnerabilityByQuarter: { name: string; algorithms: number; certificates: number }[];
  riskChartData: { name: string; count: number }[];
  assetDistributionData: { name: string; value: number; fill: string }[];
  applicationsByQuarter?: { name: string; count: number }[];
}

const MigrationAndRiskCharts: React.FC<MigrationAndRiskChartsProps> = ({
  vulnerabilityByQuarter,
  riskChartData,
  assetDistributionData = [],
  applicationsByQuarter = [],
}) => {
  const { theme } = useTheme();
  const axisLabelColor = theme === "dark" ? "#ddd" : "#333";

  const colorMap: Record<string, string> = {
    Low: "#2cbe7eff",
    Medium: "#FFD700",
    High: "#FF8C00",
    "Very High": "#d41919e9",
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };

  return (
    <motion.div
      className="grid grid-cols-1 lg:grid-cols-2 gap-6"
      initial="hidden"
      animate="visible"
      variants={{
        visible: { transition: { staggerChildren: 0.1 } },
      }}
    >
      {/* Migration Timeline Chart - Fixed */}
      <motion.div variants={cardVariants}>
        <Card className="shadow-sm rounded-xl border bg-card text-card-foreground h-full">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">
              Vulnerabilities by Migration Quarter
            </CardTitle>
          </CardHeader>
          <CardContent className="py-6">
            <ReactECharts
              option={{
                tooltip: {
                  trigger: "axis",
                  axisPointer: { type: "shadow" },
                },
                legend: {
                  data: ["Algorithms", "Certificates"],
                  top: 0,
                  textStyle: {
                    color: axisLabelColor, // use the same color adapting to theme
                  },
                },
                grid: {
                  left: "3%",
                  right: "4%",
                  bottom: "3%",
                  containLabel: true,
                },
                xAxis: {
                  type: "category",
                  data: vulnerabilityByQuarter.map((item) => item.name),
                  axisLabel: {
                    color: axisLabelColor,
                  },
                },
                yAxis: {
                  type: "value",
                  axisLabel: {
                    color: axisLabelColor,
                  },
                },
                series: [
                  {
                    name: "Algorithms",
                    type: "bar",
                    data: vulnerabilityByQuarter.map((item) => item.algorithms),
                  },
                  {
                    name: "Certificates",
                    type: "bar",
                    data: vulnerabilityByQuarter.map((item) => item.certificates),
                  },
                ],
              }}
              style={{ height: "350px", width: "100%" }}
            />
          </CardContent>
        </Card>
      </motion.div>

      {/* Risk Level Distribution Chart */}
      <motion.div variants={cardVariants}>
        <Card className="h-full">
          <CardHeader>
            <CardTitle className="text-lg font-semibold text-foreground flex items-center gap-2">
              <TrendingUpIcon className="h-5 w-5" />
              Risk Level Distribution
            </CardTitle>
          </CardHeader>
          <CardContent className="py-6">
            <ReactECharts
              option={{
                tooltip: {
                  trigger: "axis",
                  axisPointer: { type: "shadow" },
                },
                legend: {
                  data: Object.keys(colorMap),
                  top: 0,
                  textStyle: { color: axisLabelColor },
                },
                grid: {
                  left: "3%",
                  right: "4%",
                  bottom: "3%",
                  containLabel: true,
                },
                xAxis: {
                  type: "category",
                  data: riskChartData.map((item) => item.name),
                  axisLabel: { color: axisLabelColor },
                },
                yAxis: {
                  type: "value",
                  axisLabel: { color: axisLabelColor },
                },
                series: [
                  {
                    name: "Count",
                    type: "bar",
                    data: riskChartData.map((item) => ({
                      value: item.count,
                      itemStyle: {
                        color: colorMap[item.name],
                      },
                    })),
                    emphasis: { itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } }
                  },
                ],
              }}
              style={{ height: "350px", width: "100%" }}
            />
          </CardContent>
        </Card>
      </motion.div>

      {/* Asset Distribution Radial Chart */}
      <motion.div variants={cardVariants}>
        <Card className="h-full">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">
              Asset Type Distribution
            </CardTitle>
            <CardDescription>Breakdown of assets by type</CardDescription>
          </CardHeader>
          <CardContent className="py-6">
            <ReactECharts
              option={{
                tooltip: {
                  trigger: "item",
                  formatter: (params: { name: string; value: number; percent: number }) =>
                    `Asset Type<br/>${params.name}: ${params.value} (${params.percent}%)`,
                },
                legend: {
                  orient: "vertical",
                  left: 10,
                  data: assetDistributionData.map((item) => item.name),
                  textStyle: { color: axisLabelColor },
                },
                series: [
                  {
                    name: "Asset Type",
                    type: "pie",
                    radius: ["50%", "70%"],
                    avoidLabelOverlap: false,
                    label: { show: false, position: "center" },
                    emphasis: {
                      label: { show: true, fontSize: "24", fontWeight: "bold" },
                    },
                    labelLine: { show: false },
                    data: assetDistributionData.map(item => ({
                      ...item,
                      itemStyle: { color: item.fill }
                    })),
                  },
                ],
              }}
              style={{ height: "350px", width: "100%" }}
            />
          </CardContent>
        </Card>
      </motion.div>

      {/* Applications by Quarter Chart - Fixed */}
      <motion.div variants={cardVariants}>
        <Card className="shadow-sm rounded-xl border bg-card text-card-foreground h-full">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">
              Migration Timeline
            </CardTitle>
          </CardHeader>
          <CardContent className="py-6">
            <ReactECharts
              option={{
                tooltip: {
                  trigger: "axis",
                },
                xAxis: {
                  type: "category",
                  data: applicationsByQuarter.map((d) => d.name),
                  axisLabel: {
                    color: axisLabelColor,
                  },
                },
                yAxis: {
                  type: "value",
                  name: "Applications",
                  axisLabel: {
                    color: axisLabelColor,
                  },
                },
                series: [
                  {
                    name: "Applications",
                    type: "line",
                    smooth: false,
                    data: applicationsByQuarter.map((d) => d.count),
                  },
                ],
              }}
              style={{ height: "350px", width: "100%" }}
            />
          </CardContent>
        </Card>
      </motion.div>
    </motion.div>
  );
};

export default MigrationAndRiskCharts;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\dashboard\OrganizationalRiskChart.tsx ---
// frontend/src/components/OrganizationalRiskChart.tsx

import React from "react";
import ReactECharts from "echarts-for-react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

interface AppData {
  application: string;
  risk_level: "Low" | "Medium" | "High" | "Very High";
  "Sub Org": string;
}

interface Props {
  data: AppData[];
}

const centerColor = "#E2DFF0";  // Slightly dark glassy gray center

const subOrgColorMap = [
  "#A5D6A7",  // Soft Green-Grey â€” complements Low
  "#FFF176",  // Pale Yellow â€” pairs smoothly with Medium
  "#FFCC80",  // Light Orange â€” echoes High tone
  "#EF9A9A"   // Muted Red â€” aligns with Very High
];

const riskColors: Record<string, string> = {
  Low: "#81C784",        // Soft Green â€” safe & calming
  Medium: "#FFEB3B",     // Rich Yellow â€” caution but not alarming
  High: "#F57C00",       // Amber Orange â€” alert, getting risky
  "Very High": "#E53935" // Deep Red â€” critical, clearly dangerous
};







;

const OrganizationalRiskChart: React.FC<Props> = ({ data }) => {
  const subOrgMap: Record<string, { color: string; apps: { name: string; value: number; risk: string }[] }> = {};

  data.forEach((app, index) => {
    const subOrg = app["Sub Org"];
    if (!subOrgMap[subOrg]) {
      subOrgMap[subOrg] = {
        color: subOrgColorMap[index % subOrgColorMap.length],
        apps: []
      };
    }
    subOrgMap[subOrg].apps.push({
      name: app.application,
      value: 1,
      risk: app.risk_level
    });
  });

  const chartData = [
    {
      name: "Amazon",
      itemStyle: { color: centerColor },
      children: Object.entries(subOrgMap).map(([subOrgName, info]) => ({
        name: subOrgName,
        itemStyle: { color: info.color },
        children: info.apps.map(app => ({
          name: app.name,
          value: app.value,
          itemStyle: { color: riskColors[app.risk] }
        }))
      }))
    }
  ];

  const chartOptions = {
  series: {
    type: "sunburst",
    center: ["50%", "50%"],  // Always center the chart
    radius: [0, "90%"],      // Limit to 90% to avoid overflow
    sort: null,
    highlightPolicy: "ancestor",
    nodeClick: "rootToNode", // Ensures drill-down and reset work well
    animation: "auto",
    animationDurationUpdate: 500,
    emphasis: {
      focus: "ancestor",
      itemStyle: {
        borderColor: "#000",
        borderWidth: 2
      }
    },
    data: chartData,
    levels: [
      {
        itemStyle: {
          borderWidth: 0,
          gapWidth: 0
        }
      },
      {
        r0: "0%",
        r: "25%",
        label: {
          rotate: 0,
          color: "#000",
          fontWeight: "bold",
          fontSize: 14,
          overflow: "truncate"
        },
        itemStyle: {
          borderWidth: 2,
          borderColor: "#fff"
        }
      },
      {
        r0: "25%",
        r: "60%",
        label: {
          rotate: "radial",
          color: "#000",
          fontSize: 12,
          overflow: "truncate"
        },
        itemStyle: {
          borderWidth: 2,
          borderColor: "#fff"
        }
      },
      {
        r0: "60%",
        r: "90%",
        label: {
          rotate: "tangential",
          fontSize: 11,
          color: "#000",
          overflow: "truncate"
        },
        itemStyle: {
          borderWidth: 1,
          borderColor: "#fff",
          shadowBlur: 6,
          shadowColor: "rgba(0, 0, 0, 0.2)"
        }
      }
    ],
    label: {
      show: true,
      formatter: "{b}",
      overflow: "truncate"
    },
    tooltip: {
      formatter: function (info: any) {
        const path = info.treePathInfo.map((x: any) => x.name).join(" â†’ ");
        return `<strong>${path}</strong><br/>Value: ${info.value || 0}`;
      }
    }
  }
};


  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg font-semibold text-foreground">
          Organizational Risk Breakdown
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[650px]">
          <ReactECharts option={chartOptions} style={{ height: "100%" }} />
        </div>
      </CardContent>
    </Card>
  );
};

export default OrganizationalRiskChart;

//import OrganizationalRiskChart from "@/components/OrganizationalRiskChart";
//{/* Sunburst Chart */}
  //    <OrganizationalRiskChart data={data} />

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\dashboard\RiskBreakdown.tsx ---
import React, { useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ChevronDown, ChevronRight } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

interface CSVData {
  application: string;
  pqc_ready: number;
  vulnerabilities: number;
  risk_level: "Low" | "Medium" | "High" | "Very High";
  status: string;
  alg_changes: number;
  cert_changes: number;
  total_pqc_vulnerable_certificates: number;
  total_pqc_vulnerable_algorithms: number;
  "Sub Org": string;
}

interface GroupedData {
  subOrg: string;
  avgPqcReady: number;
  avgVulnerabilities: number;
  mostCommonStatus: string;
  riskDistribution: Record<string, number>;
  apps: CSVData[];
}

const riskColors: Record<string, string> = {
  Low: "#10b981",
  Medium: "#facc15",
  High: "#f97316",
  "Very High": "#dc2626",
};

const badgeColor = (level: string) =>
  level === "Low"
    ? "bg-green-100 text-green-800"
    : level === "Medium"
    ? "bg-yellow-100 text-yellow-800"
    : level === "High"
    ? "bg-orange-100 text-orange-800"
    : "bg-red-100 text-red-800";

const RiskBreakdown: React.FC<{ data: CSVData[] }> = ({ data }) => {
  const [expandedSubOrgs, setExpandedSubOrgs] = useState<Record<string, boolean>>({});

  const grouped: GroupedData[] = useMemo(() => {
    return Object.values(
      data.reduce((acc: Record<string, GroupedData>, app) => {
        const subOrg = app["Sub Org"];
        // vulnerabilityCount = vulnerable certs + vulnerable algos - cert changes - algo changes
        const vulnerabilityCount =
          (app.total_pqc_vulnerable_certificates || 0) +
          (app.total_pqc_vulnerable_algorithms || 0) -
          (app.cert_changes || 0) -
          (app.alg_changes || 0);

        if (!acc[subOrg]) {
          acc[subOrg] = {
            subOrg,
            avgPqcReady: 0,
            avgVulnerabilities: 0,
            mostCommonStatus: "",
            riskDistribution: {},
            apps: [],
          };
        }

        acc[subOrg].apps.push({ ...app, vulnerabilities: vulnerabilityCount });
        return acc;
      }, {})
    ).map((group) => {
      const totalApps = group.apps.length;
      group.avgPqcReady = group.apps.reduce((sum, a) => sum + a.pqc_ready, 0) / totalApps;
      group.avgVulnerabilities =
        group.apps.reduce((sum, a) => sum + a.vulnerabilities, 0) / totalApps;

      const statusCount: Record<string, number> = {};
      const riskCount: Record<string, number> = {};
      group.apps.forEach((app) => {
        statusCount[app.status] = (statusCount[app.status] || 0) + 1;
        riskCount[app.risk_level] = (riskCount[app.risk_level] || 0) + 1;
      });

      group.mostCommonStatus = Object.entries(statusCount).sort((a, b) => b[1] - a[1])[0][0];
      group.riskDistribution = riskCount;
      return group;
    });
  }, [data]);

  const toggleExpand = (subOrg: string) => {
    setExpandedSubOrgs((prev) => ({ ...prev, [subOrg]: !prev[subOrg] }));
  };

  return (
    <>
    <style>
      {`
        @media (max-width: 768px) {
          td[data-label]::before {
            content: attr(data-label);
            font-weight: bold;
            display: block;
          }
        }
      `}
    </style>
    <Card>
  <CardHeader>
    <CardTitle className="text-lg font-semibold text-foreground">
      Organizational Risk Breakdown
    </CardTitle>
  </CardHeader>
  <CardContent className="p-0 md:p-4">
    <div className="overflow-x-auto overflow-y-auto max-h-[500px]">
      <table className="w-full text-sm whitespace-nowrap table-auto">
        <thead className="border-b bg-muted/50">
          <tr className="text-left text-muted-foreground">
            <th className="py-3 px-4 font-medium">Sub Org</th>
            <th className="py-3 px-4 font-medium">Avg PQC Ready</th>
            <th className="py-3 px-4 font-medium">Avg Vulnerabilities</th>
            <th className="py-3 px-4 font-medium">Risk Distribution</th>
            <th className="py-3 px-4 font-medium">Common Status</th>
          </tr>
        </thead>
        <motion.tbody>
          {grouped.map((group) => (
            <React.Fragment key={group.subOrg}>
              <motion.tr
                whileHover={{ backgroundColor: "hsl(var(--muted) / 0.5)" }}
                className="border-b transition-colors"
              >
                <td className="p-4 font-semibold text-foreground">
                  <button
                    onClick={() => toggleExpand(group.subOrg)}
                    className="flex items-center gap-2 w-full text-left"
                  >
                    {expandedSubOrgs[group.subOrg] ? (
                      <ChevronDown className="h-4 w-4 text-muted-foreground flex-shrink-0" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-muted-foreground flex-shrink-0" />
                    )}
                    {group.subOrg}
                  </button>
                </td>
                <td className="p-4">
                  <div className="relative w-full max-w-[120px] h-2 bg-muted rounded-full">
                    <div
                      className="h-2 bg-blue-500 rounded-full"
                      style={{ width: `${group.avgPqcReady}%` }}
                    />
                  </div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {group.avgPqcReady.toFixed(1)}%
                  </div>
                </td>
                <td className="p-4">{group.avgVulnerabilities.toFixed(1)}</td>
                <td className="p-4">
                  <div className="flex items-center gap-1">
                    {Object.entries(group.riskDistribution).map(([level, count]) => (
                      <span
                        key={level}
                        className={`px-2 py-0.5 text-xs rounded-full font-medium ${badgeColor(level)}`}
                      >
                        {level}: {count}
                      </span>
                    ))}
                  </div>
                </td>
                <td className="p-4">
                  <span className="text-xs bg-muted px-2 py-1 rounded-full font-medium">
                    {group.mostCommonStatus}
                  </span>
                </td>
              </motion.tr>

              {/* Expanded rows (apps) stay inline too */}
              <AnimatePresence>
                {expandedSubOrgs[group.subOrg] &&
                  group.apps.map((app, j) => (
                    <motion.tr
                      key={`${group.subOrg}-${j}`}
                      whileHover={{ backgroundColor: "hsl(var(--muted) / 0.3)" }}
                      className="border-b bg-muted/20 text-sm transition-colors"
                    >
                      <td className="p-4 text-muted-foreground">â†³ {app.application}</td>
                      <td className="p-4">
                        <div className="w-full max-w-[100px] h-2 bg-muted-foreground/20 rounded-full">
                          <div
                            className="h-2 bg-blue-600 rounded-full"
                            style={{ width: `${app.pqc_ready}%` }}
                          />
                        </div>
                        <div className="text-xs text-muted-foreground mt-1">
                          {app.pqc_ready}%
                        </div>
                      </td>
                      <td className="p-4">{app.vulnerabilities}</td>
                      <td className="p-4">
                        <span
                          className={`text-xs font-medium px-2 py-0.5 rounded-full ${badgeColor(app.risk_level)}`}
                        >
                          {app.risk_level}
                        </span>
                      </td>
                      <td className="p-4">
                        <span className="text-xs bg-muted px-2 py-1 rounded-full font-medium">
                          {app.status}
                        </span>
                      </td>
                    </motion.tr>
                  ))}
              </AnimatePresence>
            </React.Fragment>
          ))}
        </motion.tbody>
      </table>
    </div>
  </CardContent>
</Card>

    </>
  );
};

export default RiskBreakdown;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\data\cryptoData.ts ---
// src/data/cryptoData.ts

export const codeExamples = {
  kem_examples: {
    vulnerable: {
      description: "RSA-based Key Encapsulation Mechanism vulnerable to quantum attacks via Shor's algorithm",
      code: `from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import os

def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def rsa_kem_encapsulate(public_key):
    # Generate a random symmetric key (e.g., for AES)
    symmetric_key = os.urandom(32) # 256-bit key

    # Encrypt the symmetric key with RSA public key
    encrypted_symmetric_key = public_key.encrypt(
        symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted_symmetric_key, symmetric_key

def rsa_kem_decapsulate(private_key, encrypted_symmetric_key):
    # Decrypt the symmetric key with RSA private key
    decrypted_symmetric_key = private_key.decrypt(
        encrypted_symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_symmetric_key`,
      vulnerability: `RSA-KEM relies on integer factorization, which Shor's algorithm can efficiently solve on quantum computers, compromising the encapsulated symmetric key.`,
      performance: {
        keySize: '256 bytes (public key)',
        ciphertextSize: '256 bytes',
        encryptionTime: '~100,000 cycles',
        decryptionTime: '~100,000 cycles',
      },
    },
    pqc_compliant: {
      description: 'Lattice-based Key Encapsulation Mechanism resistant to quantum attacks',
      code: `# Conceptual Kyber implementation (requires PQC library)
class KyberKEM:
    def __init__(self, security_level="Kyber768"):
        print(f"Initializing CRYSTALS-Kyber KEM with {security_level} security level.")

    def generate_key_pair(self):
        # In real implementation, calls Kyber key generation
        public_key = b"kyber_public_key_bytes"
        secret_key = b"kyber_secret_key_bytes"
        return public_key, secret_key

    def encapsulate(self, public_key):
        # In real implementation, calls Kyber encapsulation
        ciphertext = b"kyber_ciphertext_bytes"
        shared_secret = b"kyber_shared_secret_bytes"
        return ciphertext, shared_secret

    def decapsulate(self, ciphertext, secret_key):
        # In real implementation, calls Kyber decapsulation
        shared_secret = b"kyber_recovered_shared_secret_bytes"
        return shared_secret

# Usage example
kyber_kem = KyberKEM("Kyber768")
pk, sk = kyber_kem.generate_key_pair()
ct, ss_sender = kyber_kem.encapsulate(pk)
ss_receiver = kyber_kem.decapsulate(ct, sk)`,
      security: 'Based on Module-LWE problem, believed to be resistant to both classical and quantum attacks. No known efficient quantum algorithms exist.',
      performance: {
        keySize: '1184 bytes (public key)',
        ciphertextSize: '1088 bytes',
        encapsulationTime: '67,624 cycles (AVX2)',
        decapsulationTime: '53,156 cycles (AVX2)',
      },
    },
  },
}

export const performanceData = {
  comparison_data: {
    key_sizes: [
      { algorithm: 'RSA-KEM', publicKey: 256 },
      { algorithm: 'CRYSTALS-Kyber', publicKey: 1184 },
    ],
  },
  analysis: {
    size_impact: 'Post-quantum algorithms tend to have larger key and ciphertext sizes.',
    performance_impact: 'Some post-quantum algorithms require more CPU cycles but remain practical.',
    security_benefit: 'Quantum-resistant algorithms offer long-term security against quantum attacks.',
    recommendations: [
      'Adopt hybrid classical + PQC mechanisms during transition.',
      'Use PQC for high-value data today.',
    ],
  },
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\profile\applications.tsx ---
import React, { useState, useEffect, useMemo } from 'react';
import { Search, ChevronDown, ChevronUp, Shield, Lock, Hash, Key, Zap, ArrowLeft, Edit, Save, RotateCcw, Plus, Check, X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const getSectionIcon = (section: string) => {
  const icons: Record<string, React.ReactNode> = {
    "Symmetric Algorithms": <Lock className="w-5 h-5" />,
    "Asymmetric Algorithms": <Key className="w-5 h-5" />,
    "Hash Functions": <Hash className="w-5 h-5" />,
    "MACs & KDFs": <Shield className="w-5 h-5" />,
    "Post-Quantum Cryptography": <Zap className="w-5 h-5" />
  };
  return icons[section] || <Shield className="w-5 h-5" />;
};

const getStatusBadge = (status: string) => {
  const colors: Record<string, string> = {
    "Strong": "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300",
    "Medium": "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300",
    "Weak": "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300",
    "Safe": "bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300",
    "Standardized": "bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300"
  };
  return colors[status] || "bg-muted text-muted-foreground";
};

// Editable table row component
const EditableTableRow = ({ 
  algorithm, 
  isEditing, 
  onEdit, 
  onSave, 
  onCancel, 
  onChange 
}: {
  algorithm: any;
  isEditing: boolean;
  onEdit: () => void;
  onSave: () => void;
  onCancel: () => void;
  onChange: (field: string, value: string) => void;
}) => {
  if (isEditing) {
    return (
      <tr className="bg-yellow-50 dark:bg-yellow-900/20">
        <td className="px-4 py-4">
          <input
            className="w-full p-1 border rounded text-sm mt-1"
            value={algorithm.usage_context}
            onChange={(e) => onChange('usage_context', e.target.value)}
            aria-label="Usage context"
          />
        </td>
        <td className="px-4 py-4">
          <input
            className="w-full p-1 border rounded text-sm"
            value={algorithm.variant}
            onChange={(e) => onChange('variant', e.target.value)}
            aria-label="Algorithm variant"
          />
        </td>
        <td className="px-4 py-4">
          <input
            className="w-full p-1 border rounded text-sm"
            value={algorithm.purpose}
            onChange={(e) => onChange('purpose', e.target.value)}
            aria-label="Algorithm purpose"
          />
        </td>
        <td className="px-4 py-4">
          <select
            className="w-full p-1 border rounded text-sm"
            value={algorithm.status_today}
            onChange={(e) => onChange('status_today', e.target.value)}
            aria-label="Status today"
          >
            <option value="Strong">Strong</option>
            <option value="Medium">Medium</option>
            <option value="Weak">Weak</option>
            <option value="Safe">Safe</option>
          </select>
        </td>
        <td className="px-4 py-4">
          <select
            className="w-full p-1 border rounded text-sm"
            value={algorithm.pqc_status}
            onChange={(e) => onChange('pqc_status', e.target.value)}
            aria-label="PQC status"
          >
            <option value="Safe">Safe</option>
            <option value="Medium">Medium</option>
            <option value="Weak">Weak</option>
            <option value="Standardized">Standardized</option>
          </select>
        </td>
        <td className="px-4 py-4">
          <select
            className="w-full p-1 border rounded text-sm"
            value={algorithm.priority}
            onChange={(e) => onChange('priority', e.target.value)}
            aria-label="Priority level"
          >
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>
        </td>
        <td className="px-4 py-4">
          <input
            className="w-full p-1 border rounded text-sm"
            value={algorithm.notes}
            onChange={(e) => onChange('notes', e.target.value)}
            aria-label="Algorithm notes"
          />
        </td>
        <td className="px-4 py-4">
          <div className="flex space-x-1">
            <Button size="sm" variant="ghost" onClick={onSave}>
              <Check className="w-3 h-3" />
            </Button>
            <Button size="sm" variant="ghost" onClick={onCancel}>
              <X className="w-3 h-3" />
            </Button>
          </div>
        </td>
      </tr>
    );
  }

  return (
    <tr className="hover:bg-muted/50">
      <td className="px-4 py-4 align-top">
        <div className="font-medium text-foreground max-h-18 overflow-y-auto">{algorithm.name || algorithm.algorithm_name}</div>
      </td>
      <td className="px-4 py-4 align-top">
        <div className="text-sm text-foreground max-h-18 overflow-y-auto">
          {algorithm.variant}
        </div>
      </td>
      <td className="px-4 py-4 align-top">
        <div className="text-sm text-foreground max-h-18 overflow-y-auto">
          {algorithm.purpose}
        </div>
      </td>
      <td className="px-4 py-4 align-top">
        <div className="text-sm text-foreground max-h-18 overflow-y-auto">
          {algorithm.usage_context}
        </div>
      </td>
      <td className="px-4 py-4 whitespace-nowrap">
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(algorithm.status_today)}`}>
          {algorithm.status_today}
        </span>
      </td>
      <td className="px-4 py-4 whitespace-nowrap">
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(algorithm.pqc_status)}`}>
          {algorithm.pqc_status}
        </span>
      </td>
      <td className="px-4 py-4 whitespace-nowrap">
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          algorithm.priority === 'High' ? 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300' :
          algorithm.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300' :
          'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
        }`}>
          {algorithm.priority}
        </span>
      </td>
      <td className="px-4 py-4 align-top">
        <div className="text-sm text-foreground max-h-18 overflow-y-auto">
          {algorithm.notes}
        </div>
      </td>
      <td className="px-4 py-4">
        <Button size="sm" variant="ghost" onClick={onEdit}>
          <Edit className="w-3 h-3" />
        </Button>
      </td>
    </tr>
  );
};

// Enhanced table component with editing capabilities
const EditableTable = ({ 
  algorithms, 
  sectionName, 
  availableAlgorithms, 
  onAlgorithmsChange, 
  originalAlgorithms 
}: {
  algorithms: any[];
  sectionName: string;
  availableAlgorithms: any[];
  onAlgorithmsChange: (algorithms: any[]) => void;
  originalAlgorithms: any[];
}) => {
  const [isTableEditMode, setIsTableEditMode] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [newRow, setNewRow] = useState<Partial<any>>({});
  const [editingRowIndex, setEditingRowIndex] = useState<number | null>(null);
  const [tempEditData, setTempEditData] = useState<any>({});

  const isEdited = JSON.stringify(algorithms) !== JSON.stringify(originalAlgorithms);

  const handleTableEdit = () => {
    setIsEditModalOpen(true);
  };
  const handleAlgorithmSelectionChange = (newAlgorithms: any[]) => {
    onAlgorithmsChange(newAlgorithms);
  };

  const handleAddRow = () => {
    const newAlgorithm = {
      // Use a unique ID for new rows
      id: `custom-${Date.now()}`,
      // Default values for a new custom algorithm
      name: 'New Algorithm',
      variant: '',
      purpose: '',
      usage_context: '',
      status_today: 'Medium',
      pqc_status: 'Safe',
      priority: 'Medium',
      classical_recommended: 'yes',
      quantum_recommended: 'yes',
      nist_reference: '',
      notes: 'Custom added algorithm',
      isCustom: true
    };
    onAlgorithmsChange([...algorithms, newAlgorithm]);
  };

  const handleAddRowModal = () => {
    setNewRow({
      id: `custom-${Date.now()}`,
      name: 'New Custom Algorithm',
      variant: '',
      purpose: '',
      usage_context: '',
      status_today: 'Medium',
      pqc_status: 'Safe',
      priority: 'Medium',
      notes: 'Custom added algorithm',
      isCustom: true,
    });
    setIsAddModalOpen(true);
  };

  const handleRowEdit = (index: number) => {
    setEditingRowIndex(index);
    setTempEditData({ ...algorithms[index] });
  };

  const handleRowSave = () => {
    if (editingRowIndex !== null) {
      const updatedAlgorithms = [...algorithms];
      updatedAlgorithms[editingRowIndex] = tempEditData;
      onAlgorithmsChange(updatedAlgorithms);
      setEditingRowIndex(null);
      setTempEditData({});
    }
  };

  const handleRowCancel = () => {
    setEditingRowIndex(null);
    setTempEditData({});
  };

  const handleFieldChange = (field: string, value: string) => {
    setTempEditData({ ...tempEditData, [field]: value });
  };

  const handleTableReset = () => {
    onAlgorithmsChange([...originalAlgorithms]);
    setEditingRowIndex(null);
  };

  const dropdownOptions: Record<string, string[]> = {
    status_today: ['Strong', 'Medium', 'Weak', 'Safe'],
    pqc_status: ['Safe', 'Medium', 'Weak', 'Standardized'],
    priority: ['High', 'Medium', 'Low'],
  };
  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-3">
          <Badge variant={isEdited ? "destructive" : "secondary"}>
            {isEdited ? "Edited" : "Default"}
          </Badge>
        </div>
        <div className="space-x-2">
          <Button size="sm" variant="outline" onClick={handleTableEdit}>
            <Edit className="w-4 h-4 mr-2" /> Edit
          </Button>
          <Button size="sm" variant="outline" onClick={handleTableReset} disabled={!isEdited}>
            <RotateCcw className="w-4 h-4 mr-2" /> Reset
          </Button>
        </div>
      </div>
      {(!algorithms || algorithms.length === 0) ? (
        <div className="text-center py-4 text-muted-foreground">
          <p>No algorithms in this category</p>
          <div className="mt-4 space-x-2">
            <Button size="sm" variant="outline" onClick={handleTableEdit} >
              <Edit className="w-4 h-4 mr-1" /> Add Algorithms
            </Button>
            <Button size="sm" variant="outline" onClick={handleAddRowModal}>
              <Plus className="w-4 h-4 mr-1" /> Add Custom Row
            </Button>
          </div>
        </div>
      ) : (
        <div>
          {/* Table */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-border">
              <thead className="bg-muted/50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Algorithm</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Variant</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Purpose</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Usage Context</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Status Today</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">PQC Status</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Priority</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Notes</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider min-w-[100px]">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-card divide-y divide-border">
                {algorithms.map((algo, index) => (
                  <EditableTableRow
                    key={index}
                    algorithm={editingRowIndex === index ? tempEditData : algo}
                    isEditing={editingRowIndex === index}
                    onEdit={() => handleRowEdit(index)}
                    onSave={handleRowSave}
                    onCancel={handleRowCancel}
                    onChange={handleFieldChange}
                  />
                ))}
              </tbody>
            </table>
          </div>
          <Button variant="ghost" className="mt-2 w-full" onClick={handleAddRowModal}>
            <Plus className="w-4 h-4 mr-2" /> Add Row
          </Button>
        </div>
      )}

      {/* Edit Algorithms Modal */}
      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Edit Algorithms for {sectionName}</DialogTitle>
          </DialogHeader>
          <AlgorithmSelectionContent
            availableAlgorithms={availableAlgorithms}
            selectedAlgorithms={algorithms}
            onSelectionChange={handleAlgorithmSelectionChange}
            onClose={() => setIsEditModalOpen(false)}
            sectionName={sectionName}
          />
        </DialogContent>
      </Dialog>

      {/* Add New Row Modal */}
      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Custom Row to {sectionName}</DialogTitle>
          </DialogHeader>
          <div className="grid grid-cols-2 gap-4 py-4">
            {Object.keys(newRow).filter(k => !['id', 'isCustom'].includes(k)).map(key => (
              <div key={key}>
                <Label htmlFor={key} className="text-sm font-medium capitalize">{key.replace(/_/g, ' ')}</Label>
                {dropdownOptions[key] ? (
                  <Select
                    value={(newRow as any)[key] || ''}
                    onValueChange={(value) => setNewRow({ ...newRow, [key]: value })}
                  >
                    <SelectTrigger id={key}>
                      <SelectValue placeholder={`Select ${key.replace(/_/g, ' ')}`} />
                    </SelectTrigger>
                    <SelectContent>
                      {dropdownOptions[key].map(option => (
                        <SelectItem key={option} value={option}>{option}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                ) : (
                  <Input
                    id={key}
                    value={(newRow as any)[key] || ''}
                    onChange={(e) => setNewRow({ ...newRow, [key]: e.target.value })}
                  />
                )}
              </div>
            ))}
          </div>
          <DialogFooter>
            <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
            <Button onClick={() => {
              onAlgorithmsChange([...algorithms, newRow]);
              setIsAddModalOpen(false);
            }}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

const AlgorithmSelectionContent = ({ availableAlgorithms = [], selectedAlgorithms = [], onSelectionChange, onClose, sectionName }: any) => {
  const [tempSelected, setTempSelected] = useState<any[]>(selectedAlgorithms);

  useEffect(() => {
    setTempSelected([...selectedAlgorithms]);
  }, [selectedAlgorithms]);

  const allAvailableAlgorithms = useMemo(() => {
    if (!availableAlgorithms || !selectedAlgorithms) return [];

    const customAlgos = selectedAlgorithms
      .filter((a: any) => a.isCustom)
      .map((a: any) => ({
        ...a,
        Algorithm_Name: a.name || a.algorithm_name
      }));

    const apiAlgorithms = availableAlgorithms.map((algo: any) => ({
      // Keep original API fields
      ...algo,
      // Ensure Algorithm_Name is set for display
      Algorithm_Name: algo.Algorithm_Name || algo.name || algo.algorithm_name,
      // Map common field variations to ensure consistency
      Variant: algo.Variant || algo.variant || '',
      Purpose: algo.Purpose || algo.purpose || '',
      Usage_Context: algo.Usage_Context || algo.usage_context || '',
      Status_Today: algo.Status_Today || algo.status_today || 'Medium',
      PQC_Status: algo.PQC_Status || algo.pqc_status || 'Safe',
      Priority: algo.Priority || algo.priority || 'Medium',
      Notes: algo.Notes || algo.notes || ''
    }));

    // Simple deduplication based on Algorithm_Name
    const combined = [...apiAlgorithms, ...customAlgos];
    const uniqueAlgos = Array.from(new Map(combined.map(item => [item.Algorithm_Name, item])).values());

    return uniqueAlgos;
  }, [availableAlgorithms, selectedAlgorithms]);

  const handleToggleAlgorithm = (algorithm: any) => {
    const algorithmKey = algorithm.Algorithm_Name;
    const isSelected = tempSelected.some(a => (a.name || a.algorithm_name) === algorithmKey);

    if (isSelected) {
      setTempSelected(tempSelected.filter(a => a.name !== algorithmKey && a.algorithm_name !== algorithmKey));
    } else {
      // Map all the fields from the available algorithm to the expected format
      const newAlgo = {
        id: algorithm.id || `algo-${Date.now()}-${Math.random()}`,
        name: algorithm.Algorithm_Name,
        algorithm_name: algorithm.Algorithm_Name,
        variant: algorithm.Variant || algorithm.variant || '',
        purpose: algorithm.Purpose || algorithm.purpose || '',
        usage_context: algorithm.Usage_Context || algorithm.usage_context || '',
        status_today: algorithm.Status_Today || algorithm.status_today || 'Medium',
        pqc_status: algorithm.PQC_Status || algorithm.pqc_status || 'Safe',
        priority: algorithm.Priority || algorithm.priority || 'Medium',
        classical_recommended: algorithm.Classical_Recommended || algorithm.classical_recommended || 'yes',
        quantum_recommended: algorithm.Quantum_Recommended || algorithm.quantum_recommended || 'yes',
        nist_reference: algorithm.NIST_Reference || algorithm.nist_reference || '',
        notes: algorithm.Notes || algorithm.notes || '',
        isCustom: algorithm.isCustom || false
      };
      setTempSelected([...tempSelected, newAlgo]);
    }
  };

  const handleSave = () => {
    onSelectionChange(tempSelected);
    onClose();
  };

  if (!allAvailableAlgorithms || allAvailableAlgorithms.length === 0) {
    return (
      <div className="p-4 text-center text-muted-foreground">
        No algorithms available for this section.
      </div>
    );
  }

  return (
    <>
      <div className="max-h-[60vh] overflow-y-auto p-1">
        {allAvailableAlgorithms.map((algorithm: any, index: number) => {
          const algorithmKey = algorithm.Algorithm_Name || `key-${index}`;
          const isSelected = tempSelected.some(a => a.name === algorithmKey || a.algorithm_name === algorithmKey);
          return (
            <div key={`${algorithmKey}-${index}`} className="flex items-center gap-4 p-2 border-b">
              <Checkbox id={`algo-${index}`} checked={isSelected} onCheckedChange={() => handleToggleAlgorithm(algorithm)} />
              <Label htmlFor={`algo-${index}`} className="flex-grow text-sm cursor-pointer">{algorithm.Algorithm_Name}</Label>
            </div>
          );
        })}
      </div>
      <DialogFooter className="mt-4">
        <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
        <Button onClick={handleSave}>Save Selection</Button>
      </DialogFooter>
    </>
  );
};

const ApplicationDetail = ({ 
  app, 
  onBack, 
  allAlgorithms 
}: { 
  app: any; 
  onBack: () => void; 
  allAlgorithms: any[];
}) => {
  const [editedApp, setEditedApp] = useState(app);
  const [originalApp, setOriginalApp] = useState(app);

  const handleSectionChange = (sectionName: string, newAlgorithms: any[]) => {
    setEditedApp({
      ...editedApp,
      cryptographic_profile: {
        ...editedApp.cryptographic_profile,
        [sectionName]: newAlgorithms
      }
    });
  };

  const handleSaveAll = () => {
    console.log('Saving all changes:', editedApp);
    setOriginalApp(editedApp);
    // Here you would typically make API calls to save the changes
  };

  const handleResetAll = () => {
    setEditedApp(originalApp);
  };

  const getAvailableAlgorithmsForSection = (sectionName: string) => {
    return allAlgorithms.filter(algo => algo.Section === sectionName);
  };

  const cardVariants = {
    hidden: { opacity: 0, x: 50 },
    visible: { opacity: 1, x: 0 },
    exit: { opacity: 0, x: -50 },
  };

  return (
    <motion.div
      key="detail"
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      transition={{ duration: 0.3, ease: "easeInOut" }}
    >
      <div className="mb-6 flex justify-between items-center">
        <Button onClick={onBack} variant="outline">
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Applications
        </Button>
      </div>
      
      <div className="bg-card rounded-lg shadow-md overflow-hidden border border-border">
        <div className="p-6 border-b border-border">
          <h3 className="text-xl font-bold text-card-foreground mb-2">{editedApp.application}</h3>
          <div className="text-sm text-muted-foreground">
            <div className="flex items-center space-x-4">
              <span>Total Algorithms: {editedApp.summary.total_algorithms}</span>
              <span>Categories: {editedApp.summary.sections_with_algorithms}</span>
            </div>
          </div>
        </div>
        
        <div className="p-6 space-y-8">
          {Object.entries(editedApp.cryptographic_profile).map(([section, algorithms]) => (
            <div key={section} className="bg-muted/50 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-4">
                {getSectionIcon(section)}
                <h4 className="text-md font-semibold text-foreground">{section}</h4>
                <span className="text-sm text-muted-foreground">({(algorithms as any[])?.length || 0})</span>
              </div>
              
              <EditableTable
                algorithms={algorithms as any[]}
                sectionName={section}
                availableAlgorithms={getAvailableAlgorithmsForSection(section)}
                onAlgorithmsChange={(newAlgorithms) => handleSectionChange(section, newAlgorithms)}
                originalAlgorithms={originalApp.cryptographic_profile[section] || []}
              />
            </div>
          ))}
        </div>
      </div>

      <div className="mt-6 flex justify-end space-x-2">
        <Button onClick={handleSaveAll} size="lg">
          <Save className="h-4 w-4 mr-2" />
          Save All Changes
        </Button>
        <Button onClick={handleResetAll} variant="outline">
          <RotateCcw className="h-4 w-4 mr-2" />
          Reset All
        </Button>
      </div>
    </motion.div>
  );
};

const ApplicationsList = ({ 
  applications, 
  onAppClick, 
  searchTerm, 
  onSearchChange, 
  onBack 
}: {
  applications: any[];
  onAppClick: (app: any) => void;
  searchTerm: string;
  onSearchChange: (term: string) => void;
  onBack: () => void;
}) => {
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  return (
    <motion.div
      key="list"
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      transition={{ duration: 0.3, ease: "easeInOut" }}
    >
      <div className="mb-4">
        <h1 className="text-3xl font-bold text-foreground">Cryptographic Applications</h1>
      </div>
      
      <div className="flex items-center justify-between mb-8">
        <div className="relative max-w-md">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search className="h-5 w-5 text-muted-foreground" />
          </div>
          <input
            type="text"
            className="block w-full pl-10 pr-3 py-2 border border-border rounded-md leading-5 bg-card text-card-foreground placeholder-muted-foreground focus:outline-none focus:placeholder-muted-foreground/80 focus:ring-1 focus:ring-ring focus:border-ring"
            placeholder="Search applications or algorithms..."
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>
        <Button onClick={onBack} variant="outline">
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Dashboard
        </Button>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {applications.map((app, index) => (
          <div 
            key={index} 
            className="bg-card rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg border border-border cursor-pointer"
            onClick={() => onAppClick(app)}
          >
            <div className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-card-foreground mb-2">{app.application}</h3>
                  <div className="text-sm text-muted-foreground">
                    <div className="flex items-center space-x-4">
                      <span>Total Algorithms: {app.summary.total_algorithms}</span>
                      <span>Categories: {app.summary.sections_with_algorithms}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {applications.length === 0 && searchTerm && (
        <div className="text-center py-12">
          <div className="text-muted-foreground text-lg">No applications found matching "{searchTerm}"</div>
          <button 
            onClick={() => onSearchChange('')}
            className="mt-4 text-primary hover:text-primary/80 font-medium"
          >
            Clear search
          </button>
        </div>
      )}
    </motion.div>
  );
};

export default function Applications({
  data,
  isLoading,
  error,
  onRefresh,
  isRefreshing,
  onBack,
  allAlgorithms, // Add this line
}: {
  data: any;
  isLoading: boolean;
  error: string | null;
  onRefresh: () => void;
  isRefreshing: boolean;
  onBack: () => void;
  allAlgorithms: any[]; // Add this line
}) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedApp, setSelectedApp] = useState<any | null>(null);

  const filteredApplications = React.useMemo(() => {
    if (!data?.applications) return [];
    if (!searchTerm) return data.applications;
    return data.applications.filter((app: any) => {
      if (app.application.toLowerCase().includes(searchTerm.toLowerCase())) return true;
      const profile = app.cryptographic_profile;
      const allAlgorithmsProfile = [
        ...(profile["Symmetric Algorithms"] || []),
        ...(profile["Asymmetric Algorithms"] || []),
        ...(profile["Hash Functions"] || []),
        ...(profile["MACs & KDFs"] || []),
        ...(profile["Post-Quantum Cryptography"] || [])
      ];
      return allAlgorithmsProfile.some((algo: any) =>
        algo.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    });
  }, [searchTerm, data]);

  if (isLoading || isRefreshing) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <div className="text-muted-foreground">Loading applications...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center text-destructive">
          <div className="text-lg font-semibold mb-2">Error</div>
          <div>{error}</div>
          <button
            onClick={onRefresh}
            className="mt-4 text-primary hover:text-primary/80 font-medium"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <AnimatePresence mode="wait">
          {selectedApp ? (
            <ApplicationDetail
              key="detailView"
              app={selectedApp}
              onBack={() => setSelectedApp(null)}
              allAlgorithms={allAlgorithms} // Use the prop directly
            />
          ) : (
            <ApplicationsList
              key="listView"
              applications={filteredApplications}
              onAppClick={setSelectedApp}
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
              onBack={onBack}
            />
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\profile\ApplicationsList.tsx ---


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\profile\crypto table.tsx ---
import React, { useState, useEffect } from "react";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Edit, Plus, Check, Pencil, RotateCcw } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";

// Types for table data
export interface CryptoAlgorithm {
  id: string;
  algorithm_name: string;
  variant: string;
  purpose: string;
  usage_context: string[];
  status_today: string;
  pqc_status: string;
  priority: string;
  classical_recommended: string;
  quantum_recommended: string;
  nist_reference: string[];
  notes: string;
  section: string;
  visible?: boolean;
}

// Column definition interface
export interface ColumnDef {
  key: string;
  header: string;
}

// Status badge component
const StatusBadge = ({ status }: { status: string }) => {
  const getBadgeClass = (status: string): string => {
    switch (status?.toLowerCase()) {
      // General Status
      case "strong":
      case "safe":
      case "standardized":
      case "yes":
      case "low":
        return "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
      case "medium":
      case "candidate":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
      case "weak":
        return "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300";
      case "insecure":
      case "no":
        return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
      
      // Priority
      case "high":
        return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";

      default:
        return "bg-muted text-muted-foreground";
    }
  };

  return (
    <Badge className={`text-xs border-transparent ${getBadgeClass(status)}`}>
      {status}
    </Badge>
  );
};

// Cell component to handle rendering
const DataCell = ({ value, columnKey }: { value: any; columnKey: string }) => {
  const columnsWithBadges = [
    'status_today', 
    'pqc_status', 
    'priority', 
    'classical_recommended', 
    'quantum_recommended'
  ];

  if (columnsWithBadges.includes(columnKey) && typeof value === 'string') {
    return <StatusBadge status={value} />;
  }

  return Array.isArray(value) ? value.join(', ') : value;
};

const dropdownOptions: Record<string, string[]> = {
  status_today: ['Strong', 'Weak', 'Medium', 'Insecure'],
  pqc_status: ['Safe', 'Weak', 'Medium', 'Standardized'],
  priority: ['Low', 'Medium', 'High'],
  classical_recommended: ['yes', 'no'],
  quantum_recommended: ['yes', 'no'],
};

// Table Component
export const CryptoTable = ({
  title,
  data,
  columns,
  isEdited,
  onUpdate,
  onReset,
}: {
  title: string;
  data: CryptoAlgorithm[];
  columns: ColumnDef[];
  onUpdate: (newData: CryptoAlgorithm[]) => void;
  isEdited: boolean;
  onReset: () => void;
}) => {
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isIndividualEditModalOpen, setIsIndividualEditModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [tempData, setTempData] = useState<CryptoAlgorithm[]>([]);
  const [tempEditingData, setTempEditingData] = useState<Record<string, string | string[]>>({});
  const [tempIndividualRowData, setTempIndividualRowData] = useState<Record<string, string | string[]>>({});
  const [editingRow, setEditingRow] = useState<CryptoAlgorithm | null>(null);
  const [editingIndividualRow, setEditingIndividualRow] = useState<CryptoAlgorithm | null>(null);
  const [newRow, setNewRow] = useState<Partial<CryptoAlgorithm>>({});

  useEffect(() => {
    // When the data prop changes (e.g., on reset), update the temp data for the modal
    setTempData(JSON.parse(JSON.stringify(data)));
  }, [data]);

  const handleEditClick = () => {
    setTempData(JSON.parse(JSON.stringify(data)));
    setIsEditModalOpen(true);
  };

  const handleDone = () => {
    onUpdate(tempData);
    setIsEditModalOpen(false);
  };

  const handleCheckboxChange = (id: string, checked: boolean) => {
    setTempData(tempData.map(row => row.id === id ? { ...row, visible: checked } : row));
  };

  const handleRowEdit = (row: CryptoAlgorithm) => {
    setEditingRow({ ...row });
    const initialEditingData: Record<string, string | string[]> = {};
    columns.forEach(col => {
      const value = row[col.key as keyof CryptoAlgorithm];
      initialEditingData[col.key] = Array.isArray(value) ? value.join(', ') : (value as string);
    });
    setTempEditingData(initialEditingData);
  };

  const handleRowSave = () => {
    if (!editingRow) return;
    const updatedRow = { ...editingRow, ...tempEditingData };
    setTempData(tempData.map(row => row.id === editingRow.id ? updatedRow : row));
    setEditingRow(null);
    setTempEditingData({});
  };

  const handleIndividualRowEdit = (row: CryptoAlgorithm) => {
    // Always initialize with fresh data from the row prop
    setEditingIndividualRow(row);
    const initialEditingData: Record<string, string | string[]> = {};
    columns.forEach(col => {
      const value = row[col.key as keyof CryptoAlgorithm];
      initialEditingData[col.key] = Array.isArray(value) ? value.join(', ') : (value as string);
    });
    setTempIndividualRowData(initialEditingData);
    setIsIndividualEditModalOpen(true);
  };

  const handleSaveIndividualRow = () => {
    if (!editingIndividualRow) return;

    const updatedRow = { ...editingIndividualRow };
    for (const key in tempIndividualRowData) {
      const originalValue = editingIndividualRow[key as keyof CryptoAlgorithm];
      if (Array.isArray(originalValue)) {
        (updatedRow as any)[key] = (tempIndividualRowData[key] as string).split(',').map(s => s.trim());
      } else {
        (updatedRow as any)[key] = tempIndividualRowData[key];
      }
    }

    const updatedData = data.map(row => (row.id === editingIndividualRow.id ? updatedRow : row));
    onUpdate(updatedData);
    
    setIsIndividualEditModalOpen(false);
    setEditingIndividualRow(null);
    setTempIndividualRowData({});
  };

  const handleAddRow = () => {
    // Reset newRow state before opening the modal
    setNewRow({ id: `new-${Date.now()}`, section: title, visible: true });
    setIsAddModalOpen(true);
  };

  const handleSaveNewRow = () => {
    const newFullRow: CryptoAlgorithm = {
      id: newRow.id!,
      algorithm_name: newRow.algorithm_name || '',
      variant: newRow.variant || '',
      purpose: newRow.purpose || '',
      usage_context: Array.isArray(newRow.usage_context) ? newRow.usage_context : ((newRow.usage_context as string) || '').split(',').map(s => s.trim()),
      status_today: newRow.status_today || '',
      pqc_status: newRow.pqc_status || '',
      priority: newRow.priority || '',
      classical_recommended: newRow.classical_recommended || '',
      quantum_recommended: newRow.quantum_recommended || '',
      nist_reference: Array.isArray(newRow.nist_reference) ? newRow.nist_reference : ((newRow.nist_reference as string) || '').split(',').map(s => s.trim()),
      notes: newRow.notes || '',
      section: title,
      visible: true,
    };
    onUpdate([...data, newFullRow]);
    setIsAddModalOpen(false);
  };

  const visibleRows = data.filter(row => row.visible);

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <div className="flex items-center gap-3">
          <CardTitle>{title}</CardTitle>
          <Badge variant={isEdited ? "destructive" : "secondary"}>
            {isEdited ? "Edited" : "Default"}
          </Badge>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={handleEditClick}><Edit className="h-4 w-4 mr-2" /> Edit</Button>
          <Button variant="outline" size="sm" onClick={onReset} disabled={!isEdited}><RotateCcw className="h-4 w-4 mr-2" /> Reset</Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b">
                {columns.map(col => <th key={col.key} className="p-2 text-left font-medium">{col.header}</th>)}
                <th className="p-2 text-left font-medium">Actions</th>
              </tr>
            </thead>
            <tbody>
              {visibleRows.map(row => (
                <tr key={row.id} className="border-b">
                  {columns.map(col => (
                    <td key={col.key} className="p-2 text-sm align-top"><DataCell value={row[col.key as keyof CryptoAlgorithm]} columnKey={col.key} /></td>
                  ))}
                  <td className="p-2"><Button size="icon" variant="ghost" onClick={() => handleIndividualRowEdit(row)}><Pencil className="h-4 w-4" /></Button></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <Button variant="ghost" className="mt-2 w-full" onClick={handleAddRow}><Plus className="h-4 w-4 mr-2" /> Add Row</Button>
      </CardContent>

      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader><DialogTitle>Edit {title}</DialogTitle></DialogHeader>
          <div className="max-h-[60vh] overflow-y-auto">
            {tempData.map(row => (
              <div key={row.id} className="flex items-center gap-4 p-2 border-b">
                <Checkbox checked={row.visible} onCheckedChange={(checked) => handleCheckboxChange(row.id, !!checked)} />
                {editingRow?.id === row.id ? (
                  <div className="flex-grow grid grid-cols-3 gap-2">
                    {columns.map(col => (
                      <Input
                        key={col.key}
                        placeholder={col.header}
                        value={tempEditingData[col.key] as string || ''}
                        onChange={(e) => setTempEditingData({ ...tempEditingData, [col.key]: e.target.value })}
                      />
                    ))}
                  </div>
                ) : (
                  <span className="flex-grow text-sm">{row.algorithm_name}</span>
                )}
                {editingRow?.id === row.id ? (
                  <Button size="sm" onClick={handleRowSave}><Check className="h-4 w-4" /></Button>
                ) : (
                  <Button size="sm" variant="ghost" onClick={() => handleRowEdit(row)}><Pencil className="h-4 w-4" /></Button>
                )}
              </div>
            ))}
          </div>
          <DialogFooter>
            <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
            <Button onClick={handleDone}>Done</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent>
          <DialogHeader><DialogTitle>Add new row to {title}</DialogTitle></DialogHeader>
          <div className="grid grid-cols-2 gap-4 py-4">
            {columns.map(col => (
              <div key={col.key}>
                <label className="text-sm font-medium">{col.header}</label>
                {dropdownOptions[col.key] ? (
                  <Select
                    value={(newRow[col.key as keyof CryptoAlgorithm] as string) || ''}
                    onValueChange={(value) => setNewRow({ ...newRow, [col.key]: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder={`Select ${col.header}`} />
                    </SelectTrigger>
                    <SelectContent>
                      {dropdownOptions[col.key].map(option => (
                        <SelectItem key={option} value={option}>{option}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                ) : (
                  <Input
                    value={(newRow[col.key as keyof CryptoAlgorithm] as string) || ''}
                    onChange={(e) => setNewRow({ ...newRow, [col.key]: e.target.value })}
                  />
                )}
              </div>
            ))}
          </div>
          <DialogFooter>
            <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
            <Button onClick={handleSaveNewRow}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isIndividualEditModalOpen} onOpenChange={setIsIndividualEditModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader><DialogTitle>Edit Row in {title}</DialogTitle></DialogHeader>
          <div className="grid grid-cols-2 gap-4 py-4 max-h-[60vh] overflow-y-auto">
            {columns.map(col => (
              <div key={col.key}>
                <label className="text-sm font-medium">{col.header}</label>
                {dropdownOptions[col.key] ? (
                  <Select
                    value={tempIndividualRowData[col.key] as string || ''}
                    onValueChange={(value) => setTempIndividualRowData({ ...tempIndividualRowData, [col.key]: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder={`Select ${col.header}`} />
                    </SelectTrigger>
                    <SelectContent>
                      {dropdownOptions[col.key].map(option => (
                        <SelectItem key={option} value={option}>{option}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                ) : (
                  <Input
                    value={tempIndividualRowData[col.key] as string || ''}
                    onChange={(e) => setTempIndividualRowData({ ...tempIndividualRowData, [col.key]: e.target.value })}
                  />
                )}
              </div>
            ))}
          </div>
          <DialogFooter>
            <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
            <Button onClick={handleSaveIndividualRow}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\scan\ResultsDetailPage.tsx ---
import React, { useState, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Search, X, Globe, Lock, Key, Hash, Shield, Zap, Check, CheckCircle, AlertTriangle, ShieldAlert, Info } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
 
interface ScanResult {
  request_id: string;
  url: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  requested_at: string;
  total_urls: number;
  execution_time_seconds?: number;
  scan_status?: string;
  tls_version?: string;
  public_key_size_bits?: number;
  cipher_suite_name?: string;
  cipher_protocol?: string;
  cipher_strength_bits?: number;
  ephemeral_key_exchange?: boolean;
  cert_subject?: string;
  cert_issuer?: string;
  cert_serial_number?: string;
  cert_not_before?: string;
  cert_not_after?: string;
  public_key_algorithm?: string;
  hsts_enabled?: boolean;
  csp_enabled?: boolean;
  x_frame_options_enabled?: boolean;
  ocsp_stapling_active?: boolean;
  ct_present?: boolean;
  error_message?: string;
  raw_response?: any;
  quantum_score?: number;
  quantum_grade?: string;
  detailedResults?: ScanResult[];
  finalDomainProgress?: {[key: string]: {status: string, duration?: number}};
  pqc_analysis?: {
    overall_score: number;
    overall_grade: string;
    security_level: string;
    quantum_ready: boolean;
    hybrid_ready: boolean;
    components: {
      kex: ComponentScore;
      signature: ComponentScore;
      symmetric: ComponentScore;
      certificate: ComponentScore;
      protocol: ComponentScore;
    };
  };
}

interface ComponentScore {
  weighted_average: number;
  grade: string;
  pqc_percentage: number;
  quantum_safe_count: number;
}

interface ResultsDetailPageProps {
  scan: ScanResult;
  onBack: () => void;
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

const getGradeColor = (grade: string): string => {
  if (!grade) return 'text-muted-foreground';
  if (grade.startsWith('A')) return 'bg-gradient-to-r from-emerald-500 to-green-500 bg-clip-text text-transparent';
  if (grade.startsWith('B')) return 'bg-gradient-to-r from-blue-500 to-cyan-500 bg-clip-text text-transparent';
  if (grade.startsWith('C')) return 'bg-gradient-to-r from-yellow-400 to-amber-500 bg-clip-text text-transparent';
  if (grade.startsWith('D')) return 'bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent';
  return 'bg-gradient-to-r from-rose-500 to-red-500 bg-clip-text text-transparent';
};

const getSectionIcon = (section: string) => {
  const icons: Record<string, React.ReactNode> = {
    "Symmetric Algorithms": <Lock className="w-5 h-5" />,
    "Asymmetric Algorithms": <Key className="w-5 h-5" />,
    "Hash Functions": <Hash className="w-5 h-5" />,
    "MACs & KDFs": <Shield className="w-5 h-5" />,
    "Post-Quantum Cryptography": <Zap className="w-5 h-5" />,
    "kex": <Key className="w-5 h-5" />,
    "signature": <Shield className="w-5 h-5" />,
    "symmetric": <Lock className="w-5 h-5" />,
    "certificate": <Shield className="w-5 h-5" />,
    "protocol": <Globe className="w-5 h-5" />
  };
  return icons[section] || <Shield className="w-5 h-5" />;
};

const PQCStatusBadges: React.FC<{
  is_pqc?: boolean;
  is_hybrid?: boolean;
  quantum_safe?: boolean;
}> = ({ is_pqc, is_hybrid, quantum_safe }) => (
  <div className="flex items-center gap-2 flex-wrap">
    {is_pqc && <span className="px-1.5 py-0.5 text-xs bg-purple-100 dark:bg-purple-900/30 rounded text-purple-700 dark:text-purple-300">PQC</span>}
    {is_hybrid && <span className="px-1.5 py-0.5 text-xs bg-blue-100 dark:bg-blue-900/30 rounded text-blue-700 dark:text-blue-300">Hybrid</span>}
    {quantum_safe && <span className="px-1.5 py-0.5 text-xs bg-green-100 dark:bg-green-900/30 rounded text-green-700 dark:text-green-300">Quantum-Safe</span>}
  </div>
);


// ============================================================================
// DETAIL COMPONENTS
// ============================================================================

const DetailSection: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => {
  const [isOpen, setIsOpen] = useState(false);
  
  return (
    <div className="border border-white/20 rounded-xl mb-4 backdrop-blur-xl bg-white/80 dark:bg-slate-900/80">
      <div 
        className="flex items-center justify-between p-3 bg-muted hover:bg-muted/80 cursor-pointer transition-colors"
        onClick={(e) => {
          e.stopPropagation();
          setIsOpen(!isOpen);
        }}
      >
        <h4 className="font-medium">{title}</h4>
        <motion.div
          animate={{ rotate: isOpen ? 180 : 0 }}
          transition={{ duration: 0.2 }}
        >
          <ArrowLeft className="h-4 w-4" />
        </motion.div>
      </div>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="p-6 space-y-2">
              {children}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const DetailRow: React.FC<{ label: string; value: string | React.ReactNode; className?: string }> = ({ label, value, className = '' }) => (
  <div className={`flex justify-between items-start py-1 ${className}`}>
    <span className="text-slate-500 font-semibold text-xs uppercase tracking-wider min-w-0 flex-shrink">{label}:</span>
    <span className="text-foreground text-right ml-4 min-w-0 break-words">{value}</span>
  </div>
);

const ComponentScoreCard: React.FC<{ name: string; data: ComponentScore }> = ({ name, data }) => {
  return (
    <TooltipProvider>
      <div className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
        <div className="flex items-center gap-3">
          {getSectionIcon(name)}
          <div>
            <div className="font-medium capitalize">{name}</div>
            <div className="text-xs text-slate-500 font-semibold uppercase tracking-wider">
              {data.pqc_percentage}% PQC â€¢ {data.quantum_safe_count} quantum-safe
            </div>
          </div>
        </div>
        <div className="text-right">
          <div className="flex items-center gap-1 justify-end">
            <div className={`text-lg font-bold ${getGradeColor(data.grade)}`}>
              {data.grade}
            </div>
            <Tooltip>
              <TooltipTrigger>
                <Info className="h-3 w-3 text-muted-foreground cursor-help" />
              </TooltipTrigger>
              <TooltipContent>
                <p>This score reflects both classical strength and PQC readiness.</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <div className="text-sm text-muted-foreground">
            Weighted Score: {data.weighted_average.toFixed(1)}/100
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
};

const PQCAnalysisSection: React.FC<{ analysis: any }> = ({ analysis }) => {
  if (!analysis) return null;

  return (
    <DetailSection title="Post-Quantum Cryptography Analysis">
      <div className="p-6 bg-muted/50 rounded-xl mb-4">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div>
            <span className="text-xs uppercase tracking-wider font-semibold text-slate-500">Overall Score</span>
            <div className="text-2xl font-bold">{analysis.overall_score.toFixed(2)}/100</div>
          </div>
          <div>
            <span className="text-xs uppercase tracking-wider font-semibold text-slate-500">Grade</span>
            <div className={`text-2xl font-bold ${getGradeColor(analysis.overall_grade)}`}>
              {analysis.overall_grade}
            </div>
          </div>
          <div>
            <span className="text-xs uppercase tracking-wider font-semibold text-slate-500">Security Level</span>
            <div className="text-lg font-semibold capitalize">{analysis.security_level}</div>
          </div>
          <div>
            <span className="text-xs uppercase tracking-wider font-semibold text-slate-500">Quantum Ready</span>
            <div className="text-lg flex items-center gap-2">
              {analysis.quantum_ready 
                ? <><div className="w-5 h-5 rounded-full bg-emerald-500/20 flex items-center justify-center"><Check className="w-3 h-3 text-emerald-600" /></div><span>Yes</span></>
                : <><div className="w-5 h-5 rounded-full bg-rose-500/20 flex items-center justify-center"><X className="w-3 h-3 text-rose-600" /></div><span>No</span></>}
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-3">
        <h5 className="font-semibold text-sm">Component Analysis</h5>
        {Object.entries(analysis.components).map(([key, value]: [string, any]) => (
          <ComponentScoreCard key={key} name={key} data={value} />
        ))}
      </div>
    </DetailSection>
  );
};

const DetailedSections: React.FC<{ result: any }> = ({ result }) => {
  const rawData = result.raw_response || {};
  const tlsConfig = rawData.tls_configuration || {};
  const certChain = rawData.certificate_chain || {};
  const leafCert = certChain.leaf_certificate || {};
  const signatureAlgorithms = rawData.signature_algorithms || {};
  
  const getHashFromCipherName = (name: string): string => {
    const hashMatch = name.match(/SHA\d+/);
    if (hashMatch) return hashMatch[0];
    if (name.endsWith('_SHA')) return 'SHA1';
    return 'N/A';
  };

  return (
    <div className="space-y-3 max-h-[70vh] overflow-y-auto pr-4">
      <DetailSection title="TLS/SSL Information">
        <DetailRow label="Supported Protocols" value={(tlsConfig.supported_protocols || []).join(', ') || 'N/A'} />
      </DetailSection>

      <DetailSection title="Elliptic Curves">
        {(tlsConfig.supported_elliptic_curves?.curves || []).map((curve: any, idx: number) => (
          <div key={idx} className="p-4 bg-muted/50 rounded-xl mb-2">
            <div className="flex justify-between items-start">
              <div className="font-medium">{curve.name}</div>
              <div className="text-sm text-muted-foreground">{curve.type} ({curve.bits} bits)</div>
            </div>
            {curve.curve_pqc_score !== undefined && (
              <div className="mt-2 flex items-center justify-between">
                <PQCStatusBadges 
                  is_pqc={curve.curve_is_pqc}
                  is_hybrid={curve.curve_is_hybrid}
                  quantum_safe={curve.curve_quantum_safe}
                />
                <div className={`text-sm font-semibold ${getGradeColor(curve.curve_pqc_grade)}`}>{curve.curve_pqc_grade} ({curve.curve_pqc_score})</div>
              </div>
            )}
          </div>
        ))}
      </DetailSection>

      <DetailSection title="Certificate Chain">
        <div className="mb-4 p-5 bg-muted/50 rounded-xl">
          <div className="font-semibold mb-2">Leaf Certificate</div>
          <DetailRow label="Certificate" value={leafCert.certificate || 'N/A'} />
          <DetailRow label="Subject Alt Names" value={(leafCert.subject_alternative_names || []).join(', ') || 'N/A'} />
          <DetailRow label="Certificate Transparency" value={leafCert.certificate_transparency ? <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-emerald-500/20 flex items-center justify-center"><Check className="w-3 h-3 text-emerald-600" /></div><span>Yes</span></div> : <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-rose-500/20 flex items-center justify-center"><X className="w-3 h-3 text-rose-600" /></div><span>No</span></div>} />
          {leafCert.cert_pqc_score !== undefined && (
            <div className="mt-3 pt-3 border-t">
              <DetailRow label="PQC Grade" value={<span className={`font-bold ${getGradeColor(leafCert.cert_pqc_grade)}`}>{leafCert.cert_pqc_grade} ({leafCert.cert_pqc_score})</span>} />
              <DetailRow label="Status" value={<PQCStatusBadges 
                is_pqc={leafCert.cert_is_pqc}
                is_hybrid={leafCert.cert_is_hybrid}
                quantum_safe={leafCert.cert_quantum_safe}
              />} />
            </div>
          )}
        </div>

        {(certChain.intermediate_certificates || []).map((cert: any, index: number) => (
          <div key={`intermediate-${index}`} className="mb-4 p-5 bg-muted/50 rounded-xl">
            <div className="font-semibold mb-2">Intermediate Certificate {index + 1}</div>
            <DetailRow label="Public Key Algorithm" value={cert.public_key_algorithm || 'N/A'} />
            <DetailRow label="Public Key Size" value={`${cert.public_key_size || 'N/A'} bits`} />
            {cert.cert_pqc_score !== undefined && (
              <div className="mt-2 pt-2 border-t">
                <DetailRow label="PQC Grade" value={<span className={`font-bold ${getGradeColor(cert.cert_pqc_grade)}`}>{cert.cert_pqc_grade} ({cert.cert_pqc_score})</span>} />
                <DetailRow label="Status" value={<PQCStatusBadges 
                  is_pqc={cert.cert_is_pqc}
                  is_hybrid={cert.cert_is_hybrid}
                  quantum_safe={cert.cert_quantum_safe}
                />} />
              </div>
            )}
          </div>
        ))}
      </DetailSection>

      {signatureAlgorithms.certificate_signatures && signatureAlgorithms.certificate_signatures.length > 0 && (
        <DetailSection title="Certificate Signatures">
          <div className="space-y-3">
            {signatureAlgorithms.certificate_signatures.map((sig: any, idx: number) => (
              <div key={idx} className="p-5 bg-muted/50 rounded-xl">
                <div className="font-semibold mb-2">Position {sig.position}: {sig.certificate_subject}</div>
                <DetailRow label="Signature Algorithm" value={sig.signature_algorithm} />
                <DetailRow label="Hash Algorithm" value={sig.hash_algorithm} />
                <DetailRow label="Public Key" value={`${sig.public_key_type} (${sig.public_key_size} bits)`} />
                {sig.sig_pqc_score !== undefined && (
                  <div className="mt-2 pt-2 border-t">
                    <div className="text-xs uppercase tracking-wider font-semibold text-slate-500 mb-1">Signature Analysis</div>
                    <DetailRow label="PQC Grade" value={<span className={`font-bold ${getGradeColor(sig.sig_pqc_grade)}`}>{sig.sig_pqc_grade} ({sig.sig_pqc_score})</span>} />
                    <DetailRow label="Status" value={<PQCStatusBadges 
                      is_pqc={sig.sig_is_pqc}
                      is_hybrid={sig.sig_is_hybrid}
                      quantum_safe={sig.sig_quantum_safe}
                    />} />
                  </div>
                )}
                {sig.hash_pqc_score !== undefined && (
                  <div className="mt-2 pt-2 border-t">
                    <div className="text-xs uppercase tracking-wider font-semibold text-slate-500 mb-1">Hash Analysis</div>
                    <DetailRow label="PQC Grade" value={<span className={`font-bold ${getGradeColor(sig.hash_pqc_grade)}`}>{sig.hash_pqc_grade} ({sig.hash_pqc_score})</span>} />
                  </div>
                )}
              </div>
            ))}
          </div>
        </DetailSection>
      )}

      <DetailSection title="Handshake Signature Algorithms">
        {signatureAlgorithms.handshake_signatures && signatureAlgorithms.handshake_signatures.length > 0 ? (
          <div className="space-y-3">
            {signatureAlgorithms.handshake_signatures.map((sig: any, idx: number) => (
              <div key={idx} className="p-4 bg-muted/50 rounded-xl">
                <div className="flex justify-between items-start">
                  <div className="font-medium">{sig.algorithm}</div>
                  <div className="text-sm text-muted-foreground">{sig.protocol}</div>
                </div>
                {sig.sig_pqc_score !== undefined && (
                  <div className="mt-2 flex items-center justify-between">
                    <PQCStatusBadges 
                      is_pqc={sig.sig_is_pqc}
                      is_hybrid={sig.sig_is_hybrid}
                      quantum_safe={sig.sig_quantum_safe}
                    />
                    <div className={`text-sm font-semibold ${getGradeColor(sig.sig_pqc_grade)}`}>{sig.sig_pqc_grade} ({sig.sig_pqc_score})</div>
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p className="text-muted-foreground text-sm">No handshake signature algorithms available</p>
        )}
      </DetailSection>

      <DetailSection title="Cipher Suites">
        {tlsConfig['tls_1.3_cipher_suites'] && (
          <div className="mb-6">
            <div className="font-semibold mb-2 flex justify-between items-center">
              <span>TLS 1.3 Cipher Suites</span>
              {tlsConfig['tls_1.3_cipher_suites'].component_kex_score !== undefined && (
                <div className="text-sm">
                  <span className="text-muted-foreground">KEX Score: </span>
                  <span className={`font-bold ${getGradeColor(tlsConfig['tls_1.3_cipher_suites'].component_kex_grade)}`}>
                    {tlsConfig['tls_1.3_cipher_suites'].component_kex_grade} ({tlsConfig['tls_1.3_cipher_suites'].component_kex_score})
                  </span>
                </div>
              )}
            </div>
            {(tlsConfig['tls_1.3_cipher_suites'].suites || []).map((cipher: any, idx: number) => (
              <div key={idx} className="border-b border-border last:border-0 py-3">
                <div className="flex justify-between items-start mb-2">
                  <div className="flex-1">
                    <div className="font-medium">{cipher.name}</div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Encryption: {cipher.encryption} | Hash: {getHashFromCipherName(cipher.name)}
                    </div>
                  </div>
                  <div className="text-sm text-muted-foreground ml-4">
                    {cipher.key_exchange} {cipher.curve_bits ? `(${cipher.curve_bits} bits)` : ''}
                  </div>
                </div>
                
                {cipher.kex_pqc_score !== undefined && (
                  <div className="flex gap-4 text-xs mt-2">
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">KEX:</span>
                      <span className={`font-semibold ${getGradeColor(cipher.kex_pqc_grade)}`}>
                        {cipher.kex_pqc_grade} ({cipher.kex_pqc_score})
                      </span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
        {tlsConfig['tls_1.2_cipher_suites'] && (
          <div>
            <div className="font-semibold mb-2 flex justify-between items-center">
              <span>TLS 1.2 Cipher Suites</span>
              {tlsConfig['tls_1.2_cipher_suites'].component_kex_score !== undefined && (
                <div className="text-sm">
                  <span className="text-muted-foreground">KEX Score: </span>
                  <span className={`font-bold ${getGradeColor(tlsConfig['tls_1.2_cipher_suites'].component_kex_grade)}`}>
                    {tlsConfig['tls_1.2_cipher_suites'].component_kex_grade} ({tlsConfig['tls_1.2_cipher_suites'].component_kex_score})
                  </span>
                </div>
              )}
            </div>
            {(tlsConfig['tls_1.2_cipher_suites'].suites || []).map((cipher: any, idx: number) => (
              <div key={idx} className="border-b border-border last:border-0 py-3">
                <div className="flex justify-between items-start mb-2">
                  <div className="flex-1">
                    <div className="font-medium">{cipher.name}</div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Encryption: {cipher.encryption} | Hash: {getHashFromCipherName(cipher.name)}
                    </div>
                  </div>
                  <div className="text-sm text-muted-foreground ml-4">
                    {cipher.key_exchange} {cipher.curve_bits ? `(${cipher.curve_bits} bits)` : ''}
                  </div>
                </div>
                
                {cipher.kex_pqc_score !== undefined && (
                  <div className="flex gap-4 text-xs mt-2">
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">KEX:</span>
                      <span className={`font-semibold ${getGradeColor(cipher.kex_pqc_grade)}`}>
                        {cipher.kex_pqc_grade} ({cipher.kex_pqc_score})
                      </span>
                      <PQCStatusBadges 
                        is_pqc={cipher.kex_is_pqc}
                        is_hybrid={cipher.kex_is_hybrid}
                        quantum_safe={cipher.kex_quantum_safe}
                      />
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Encryption:</span>
                      <span className={`font-semibold ${getGradeColor(cipher.encryption_pqc_grade)}`}>
                        {cipher.encryption_pqc_grade} ({cipher.encryption_pqc_score})
                      </span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </DetailSection>

      {rawData.pqc_analysis && (
        <PQCAnalysisSection analysis={rawData.pqc_analysis} />
      )}

      {rawData && Object.keys(rawData).length > 0 && (
        <DetailSection title="Raw Scan Data (JSON)">
          <div className="bg-muted p-6 rounded-xl overflow-auto max-h-80">
            <pre className="text-xs font-mono whitespace-pre-wrap break-words">
              {JSON.stringify(rawData, null, 2)}
            </pre>
          </div>
        </DetailSection>
      )}
    </div>
  );
};

// ============================================================================
// MODAL COMPONENT
// ============================================================================

const ExpandedDetailModal: React.FC<{
  result: ScanResult;
  onClose: () => void;
}> = ({ result, onClose }) => {
  const isSuccess = result.scan_status === 'success';
  const pqcScore = result.raw_response?.pqc_analysis?.overall_score ?? result.quantum_score ?? 'N/A';
  const pqcGrade = result.raw_response?.pqc_analysis?.overall_grade ?? result.quantum_grade ?? 'N/A';

  return (
    <>
      {/* Backdrop */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.2 }}
        onClick={onClose}
        className="fixed inset-0 bg-black/60 backdrop-blur-md z-40"
      />

      {/* Modal */}
      <motion.div
        initial={{ opacity: 0, scale: 0.95, y: 20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.95, y: 20 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className="fixed inset-4 md:inset-8 lg:inset-16 z-50 flex flex-col"
        onClick={(e) => e.stopPropagation()}
      >
        <Card className="flex flex-col h-full shadow-2xl border border-white/20 ring-1 ring-black/5 backdrop-blur-xl bg-white/80 dark:bg-slate-900/80">
          {/* Modal Header */}
          <div className="flex items-center justify-between p-6 border-b">
            <div className="flex-1">
              <h3 className="text-xl font-bold truncate">{result.url}</h3>
              <div className="text-sm text-muted-foreground mt-1">
                {isSuccess 
                  ? <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-emerald-500/20 flex items-center justify-center"><Check className="w-3 h-3 text-emerald-600" /></div><span>Scan Successful</span></div>
                  : <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-rose-500/20 flex items-center justify-center"><X className="w-3 h-3 text-rose-600" /></div><span>Scan Failed</span></div>}
              </div>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={onClose}
              className="ml-4 flex-shrink-0"
            >
              <X className="h-5 w-5" />
            </Button>
          </div>

          {/* Modal Content */}
          <CardContent className="flex-1 overflow-y-auto p-6">
            {isSuccess ? (
              <div className="space-y-8">
                {/* Quick Stats */}
                <div className="grid grid-cols-3 gap-4 pb-6 border-b">
                  <div className="text-center">
                    <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">PQC Score</div>
                    <div className="text-3xl font-bold mt-2">{pqcScore}</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">Grade</div>
                    <div className={`text-3xl font-bold mt-2 ${getGradeColor(pqcGrade)}`}>
                      {pqcGrade}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">Status</div>
                    <div className="text-2xl font-bold mt-2 flex items-center justify-center"><div className="w-5 h-5 rounded-full bg-emerald-500/20 flex items-center justify-center"><Check className="w-3 h-3 text-emerald-600" /></div></div>
                  </div>
                </div>

                {/* Detailed Sections */}
                <DetailedSections result={result} />
              </div>
            ) : (
              <div className="p-6 bg-destructive/10 text-destructive rounded-xl">
                <p className="font-semibold text-lg mb-2">Scan Failed</p>
                <p>{result.error_message || 'An unknown error occurred.'}</p>
              </div>
            )}
          </CardContent>

          {/* Modal Footer */}
          <div className="border-t p-6 flex justify-between items-center">
            <p className="text-xs text-muted-foreground">
              Click outside or press the close button to dismiss
            </p>
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button variant="outline" onClick={onClose}>
                <X className="h-4 w-4 mr-2" /> Close
              </Button>
            </motion.div>
          </div>
        </Card>
      </motion.div>
    </>
  );
};

// ============================================================================
// DOMAIN CARD COMPONENT
// ============================================================================

const DomainCard: React.FC<{
  result: ScanResult;
  onExpand: () => void;
}> = ({ result, onExpand }) => {
  const isSuccess = result.scan_status === 'success';
  const pqcScore = result.raw_response?.pqc_analysis?.overall_score ?? result.quantum_score ?? 'N/A';
  const pqcGrade = result.raw_response?.pqc_analysis?.overall_grade ?? result.quantum_grade ?? 'N/A';

  return (
    <Card 
      className={`cursor-pointer transition-all duration-300 ease-out hover:scale-[1.02] hover:shadow-2xl hover:-translate-y-1 border-l-4 ${
        isSuccess ? 'border-l-emerald-500' : 'border-l-rose-500'
      }`}
      onClick={onExpand}
    >
      <CardContent className="p-6">
        <div className="space-y-3">
          <div className="flex items-start justify-between gap-2">
            <div className="flex-1 min-w-0">
              <h5 className="font-semibold truncate text-base">{result.url}</h5>
              <div className="text-xs text-muted-foreground mt-1">
                {isSuccess 
                  ? <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-emerald-500/20 flex items-center justify-center"><Check className="w-3 h-3 text-emerald-600" /></div><span>Successful</span></div>
                  : <div className="flex items-center gap-2"><div className="w-5 h-5 rounded-full bg-rose-500/20 flex items-center justify-center"><X className="w-3 h-3 text-rose-600" /></div><span>Failed</span></div>}
              </div>
            </div>
            <div className={`w-3 h-3 rounded-full flex-shrink-0 mt-1 animate-pulse ${
              isSuccess ? 'bg-emerald-500 shadow-lg shadow-emerald-500/50' : 'bg-rose-500 shadow-lg shadow-rose-500/50'
            }`}></div>
          </div>

          {isSuccess && (
            <div className="grid grid-cols-3 gap-2 text-center">
              <div className="bg-muted p-2 rounded-xl">
                <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">PQC Score</div>
                <div className="font-bold text-sm">{pqcScore}</div>
              </div>
              <div className="bg-muted p-2 rounded-xl">
                <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">Grade</div>
                <div className={`font-bold text-sm ${getGradeColor(pqcGrade)}`}>
                  {pqcGrade}
                </div>
              </div>
              <div className="bg-muted p-2 rounded-xl">
                <div className="text-xs uppercase tracking-wider font-semibold text-slate-500">Status</div>
                <div className="font-bold text-sm">Success</div>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

// ============================================================================
// MAIN RESULTS DETAIL PAGE COMPONENT
// ============================================================================

const ResultsDetailPage: React.FC<ResultsDetailPageProps> = ({ scan, onBack }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedResult, setExpandedResult] = useState<ScanResult | null>(null);

  // Filter results based on search query
  const filteredResults = useMemo(() => {
    if (!scan.detailedResults) return [];
    return scan.detailedResults.filter(result =>
      result.url.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [scan.detailedResults, searchQuery]);

  // Calculate summary stats
  const stats = useMemo(() => {
    if (!scan.detailedResults) return { successful: 0, failed: 0 };
    return {
      successful: scan.detailedResults.filter(r => r.scan_status === 'success').length,
      failed: scan.detailedResults.filter(r => r.scan_status !== 'success').length,
    };
  }, [scan.detailedResults]);

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      transition={{ duration: 0.3 }}
      className="p-4 sm:p-6 max-w-7xl mx-auto"
    >
      {/* Header */}
      <div className="mb-8">
        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
          <Button 
            variant="outline" 
            onClick={onBack} 
            className="mb-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" /> Back to Scan History
          </Button>
        </motion.div>
        
        <div>
          <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-slate-900 to-slate-700 dark:from-white dark:to-slate-300 bg-clip-text text-transparent">
            Scan Results
          </h2>
          <p className="text-sm text-muted-foreground mt-1">
            Request ID: {scan.request_id}
          </p>
        </div>

        {/* Stats Row */}
        <div className="grid grid-cols-3 gap-4 mt-6">
          <Card className="relative overflow-hidden backdrop-blur-xl bg-white/80 dark:bg-slate-900/80 border border-white/20 rounded-xl shadow-md hover:shadow-xl transition-all duration-300">
            <div className="absolute -right-4 -top-4 w-24 h-24 bg-gradient-to-br from-emerald-500/10 to-green-500/10 rounded-full blur-2xl"></div>
            <CardContent className="p-5 text-center relative z-10">
              <div className="w-12 h-12 mx-auto mb-3 rounded-xl bg-gradient-to-br from-emerald-500 to-green-600 flex items-center justify-center">
                <CheckCircle className="w-6 h-6 text-white" />
              </div>
              <div className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-green-600 bg-clip-text text-transparent">
                {stats.successful}
              </div>
              <div className="text-xs uppercase tracking-wider text-slate-500 font-semibold mt-1">
                Successful
              </div>
            </CardContent>
          </Card>
          <Card className="relative overflow-hidden backdrop-blur-xl bg-white/80 dark:bg-slate-900/80 border border-white/20 rounded-xl shadow-md hover:shadow-xl transition-all duration-300">
            <div className="absolute -right-4 -top-4 w-24 h-24 bg-gradient-to-br from-rose-500/10 to-red-500/10 rounded-full blur-2xl"></div>
            <CardContent className="p-5 text-center relative z-10">
              <div className="w-12 h-12 mx-auto mb-3 rounded-xl bg-gradient-to-br from-rose-500 to-red-600 flex items-center justify-center">
                <ShieldAlert className="w-6 h-6 text-white" />
              </div>
              <div className="text-3xl font-bold bg-gradient-to-r from-rose-600 to-red-600 bg-clip-text text-transparent">
                {stats.failed}
              </div>
              <div className="text-xs uppercase tracking-wider text-slate-500 font-semibold mt-1">
                Failed
              </div>
            </CardContent>
          </Card>
          <Card className="relative overflow-hidden backdrop-blur-xl bg-white/80 dark:bg-slate-900/80 border border-white/20 rounded-xl shadow-md hover:shadow-xl transition-all duration-300">
             <div className="absolute -right-4 -top-4 w-24 h-24 bg-gradient-to-br from-slate-500/10 to-slate-500/10 rounded-full blur-2xl"></div>
            <CardContent className="p-5 text-center relative z-10">
               <div className="w-12 h-12 mx-auto mb-3 rounded-xl bg-gradient-to-br from-slate-500 to-slate-600 flex items-center justify-center">
                <Globe className="w-6 h-6 text-white" />
              </div>
              <div className="text-3xl font-bold text-foreground">{scan.detailedResults?.length ?? 0}</div>
              <div className="text-xs uppercase tracking-wider text-slate-500 font-semibold mt-1">Total</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Search Bar */}
      <div className="mb-8 relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search by domain name..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="pl-10 h-12 border-slate-200 dark:border-slate-700 focus:ring-2 focus:ring-blue-500/20 transition-all"
        />
        <p className="text-xs text-muted-foreground mt-2">
          Showing {filteredResults.length} of {scan.detailedResults?.length ?? 0} domains
        </p>
      </div>

      {/* Domain Cards Grid */}
      {filteredResults.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredResults.map((result, index) => (
            <motion.div
              key={result.url}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05, duration: 0.4 }}
            >
              <DomainCard
                result={result}
                onExpand={() => setExpandedResult(result)}
              />
            </motion.div>
          ))}
        </div>
      ) : (
        <Card className="backdrop-blur-xl bg-white/50 dark:bg-slate-900/50">
          <CardContent className="flex flex-col items-center justify-center py-16">
            <div className="w-16 h-16 rounded-full bg-slate-100 dark:bg-slate-800 flex items-center justify-center mb-4">
              <Search className="w-8 h-8 text-slate-400" />
            </div>
            <p className="text-lg font-semibold text-slate-700 dark:text-slate-300 mb-2">
              {searchQuery ? 'No domains found' : 'No results available'}
            </p>
            <p className="text-sm text-slate-500">
              {searchQuery ? 'Try adjusting your search' : 'Start by running a scan'}
            </p>
          </CardContent>
        </Card>
      )}

      {/* Expanded Modal */}
      <AnimatePresence>
        {expandedResult && (
          <ExpandedDetailModal
            result={expandedResult}
            onClose={() => setExpandedResult(null)}
          />
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ResultsDetailPage;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\scan\webscan.tsx ---
import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowLeft, ArrowRight, Globe, RefreshCw, Play, Edit, Save, RotateCcw, Plus, Check, X, Shield, Lock, Hash, Key, Zap, Trash2 } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import ResultsDetailPage from './ResultsDetailPage'; // NEW IMPORT

// ============================================================================
// INTERFACES & TYPES
// ============================================================================

interface WebScanProps {
  onBack: () => void;
  apiBaseUrl: string;
}

interface ScanResult {
  request_id: string;
  id?: number; // ADD THIS for individual result deletion
  batch_id?: string; // ADD THIS
  url: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  requested_at: string;
  total_urls: number;
  execution_time_seconds?: number;
  scan_status?: string;
  tls_version?: string;
  public_key_size_bits?: number;
  cipher_suite_name?: string;
  cipher_protocol?: string;
  cipher_strength_bits?: number;
  ephemeral_key_exchange?: boolean;
  cert_subject?: string;
  cert_issuer?: string;
  cert_serial_number?: string;
  cert_not_before?: string;
  cert_not_after?: string;
  public_key_algorithm?: string;
  hsts_enabled?: boolean;
  csp_enabled?: boolean;
  x_frame_options_enabled?: boolean;
  ocsp_stapling_active?: boolean;
  ct_present?: boolean;
  error_message?: string;
  raw_response?: any;
  quantum_score?: number;
  quantum_grade?: string;
  detailedResults?: ScanResult[];
  finalDomainProgress?: {[key: string]: {status: string, duration?: number}};
  pqc_analysis?: {
    overall_score: number;
    overall_grade: string;
    security_level: string;
    quantum_ready: boolean;
    hybrid_ready: boolean;
    components: {
      kex: ComponentScore;
      signature: ComponentScore;
      symmetric: ComponentScore;
      certificate: ComponentScore;
      protocol: ComponentScore;
    };
  };
}

interface ComponentScore {
  weighted_average: number;
  grade: string;
  pqc_percentage: number;
  quantum_safe_count: number;
}

interface DomainProgressInfo {
  status: string;
  duration?: number;
  error?: string;
  round?: number;
  startedAt?: string;
  timeInCurrentRound?: number;
}
interface RoundInfo {
  round: number;
  duration: number;
  domainsProcessed: number;
}

interface ProgressDisplayProps {
  scanProgress: { total: number; completed: number };
  domainProgress: {[key: string]: DomainProgressInfo};
  processingDomains: {[key: string]: DomainProgressInfo};
  currentRound?: number;
  roundHistory: RoundInfo[];
  onCancel?: () => void;
  isCancelling?: boolean;
  isActiveProgress?: boolean;
}

// ============================================================================
// HELPER COMPONENTS
// ============================================================================

const getSectionIcon = (section: string) => {
  const icons: Record<string, React.ReactNode> = {
    "Symmetric Algorithms": <Lock className="w-5 h-5" />,
    "Asymmetric Algorithms": <Key className="w-5 h-5" />,
    "Hash Functions": <Hash className="w-5 h-5" />,
    "MACs & KDFs": <Shield className="w-5 h-5" />,
    "Post-Quantum Cryptography": <Zap className="w-5 h-5" />,
    "kex": <Key className="w-5 h-5" />,
    "signature": <Shield className="w-5 h-5" />,
    "symmetric": <Lock className="w-5 h-5" />,
    "certificate": <Shield className="w-5 h-5" />,
    "protocol": <Globe className="w-5 h-5" />
  };
  return icons[section] || <Shield className="w-5 h-5" />;
};

const getStatusBadge = (status: string) => {
  const colors: Record<string, string> = {
    "Strong": "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300",
    "Medium": "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300",
    "Weak": "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300",
    "Safe": "bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300",
    "Standardized": "bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300"
  };
  return colors[status] || "bg-muted text-muted-foreground";
};

const getGradeColor = (grade: string): string => {
  if (!grade) return 'text-muted-foreground';
  if (grade.startsWith('A')) return 'text-green-500';
  if (grade.startsWith('B')) return 'text-blue-500';
  if (grade.startsWith('C')) return 'text-yellow-500';
  if (grade.startsWith('D')) return 'text-orange-500';
  return 'text-red-500';
};

const ProgressDisplay: React.FC<ProgressDisplayProps> = ({ 
  scanProgress, 
  domainProgress, 
  processingDomains, 
  currentRound, 
  roundHistory, 
  onCancel, 
  isCancelling,
  isActiveProgress = false
}) => {
  if (Object.keys(domainProgress).length === 0) return null;
  
  const percentage = (scanProgress.completed / scanProgress.total) * 100;
  
  return (
    <Card className={`mb-6 ${isActiveProgress ? 'animate-pulse' : ''}`}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <CardTitle>
              {isActiveProgress
                ? `Scan Progress... (Round ${currentRound || 1})`
                : 'Scan Summary'}
            </CardTitle>
            {scanProgress.total > 0 && (
              <CardDescription>
                {scanProgress.completed}/{scanProgress.total} domains scanned ({percentage.toFixed(0)}%)
              </CardDescription>
            )}
          </div>
          {isActiveProgress && onCancel && (
            <Button 
              variant="destructive" 
              size="sm"
              onClick={onCancel}
              disabled={isCancelling}
            >
              {isCancelling ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Cancelling...
                </>
              ) : (
                <>
                  <X className="h-4 w-4 mr-2" />
                  Cancel Scan
                </>
              )}
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent>
        {scanProgress.total > 0 && (
          <div className="w-full bg-muted rounded-full h-2.5 overflow-hidden mb-4">
            <motion.div
              className="bg-primary h-full rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${percentage}%` }}
              transition={{ duration: 0.5, ease: "easeInOut" }}
            />
          </div>
        )}
        
        {roundHistory.length > 0 && (
          <div className="mt-4 border-t pt-4">
            <h4 className="font-semibold text-sm mb-2">Round Summary</h4>
            <div className="flex flex-wrap gap-2">
              {roundHistory.map(round => (
                <div key={round.round} className="text-xs bg-muted px-2 py-1 rounded-md">
                  <strong>Round {round.round}:</strong> {round.domainsProcessed} domains in {round.duration.toFixed(1)}s
                </div>
              ))}
            </div>
          </div>
        )}

        {(Object.keys(domainProgress).length > 0 || Object.keys(processingDomains).length > 0) && (
          <div className="mt-4 border-t pt-4">
            <h4 className="font-semibold text-sm mb-2">Domain Status</h4>
          </div>
        )}
        {(Object.keys(domainProgress).length > 0 || Object.keys(processingDomains).length > 0) && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-h-60 overflow-y-auto">
            <div>
              <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                <Check className="h-4 w-4 text-green-500" />
                Successful ({Object.values(domainProgress).filter(i => i.status === 'completed').length})
              </h4>
              <div className="space-y-1">
                {Object.entries(domainProgress)
                  .filter(([, info]) => info.status === 'completed')
                  .map(([domain, info]) => (
                    <div key={domain} className="flex items-center justify-between text-sm py-1 px-2 bg-green-100/50 dark:bg-green-900/20 rounded">
                      <div className="flex items-center gap-2 flex-1 min-w-0">
                        <span className="truncate" title={domain}>{domain}</span>
                      </div>
                      <div className="flex items-center gap-2 flex-shrink-0 ml-2">
                        {info.round && <span className="text-xs text-muted-foreground">R{info.round}</span>}
                        {typeof info.duration === 'number' ? ( // Check if it's explicitly a number
                          <span className="text-muted-foreground text-xs">{info.duration.toFixed(1)}s</span>
                        ) : (
                          <span className="text-muted-foreground text-xs">-</span>
                        )}
                      </div>
                    </div>
                  ))}
              </div>
            </div>
            {isActiveProgress && (
              <div>
                <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                  <RefreshCw className="h-4 w-4 text-blue-500 animate-spin" />
                  In Progress ({Object.keys(processingDomains).length})
                </h4>
                <div className="space-y-1">
                  {Object.entries(processingDomains).map(([domain, info]) => (
                    <div key={domain} className={`flex flex-col text-sm py-1 px-2 bg-blue-100/50 dark:bg-blue-900/20 rounded ${ 
                      (info.timeInCurrentRound ?? 0) > 120 ? 'border-l-4 border-l-yellow-500' : ''
                    }`}>
                      <div className="flex items-center justify-between gap-2">
                        <div className="flex items-center gap-2 flex-1 min-w-0">
                          <span className="truncate" title={domain}>{domain}</span>
                        </div>
                        <div className="flex items-center gap-2 flex-shrink-0">
                          {info.round && <span className="text-xs text-muted-foreground">R{info.round}</span>}
                          {info.timeInCurrentRound !== undefined && <span className="text-muted-foreground text-xs animate-pulse">{info.timeInCurrentRound.toFixed(1)}s</span>}
                        </div>
                      </div>
                      {(info.timeInCurrentRound ?? 0) > 120 && (
                        <span className="text-xs text-yellow-600 mt-1">âš ï¸ Taking longer than expected</span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
            <div>
              <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                <X className="h-4 w-4 text-red-500" />
                Failed ({Object.values(domainProgress).filter(i => i.status === 'failed').length})
              </h4>
              <div className="space-y-2">
                {Object.entries(domainProgress)
                  .filter(([, info]) => info.status === 'failed')
                  .map(([domain, info]) => (
                    <div key={domain} className="p-2 bg-red-100/50 dark:bg-red-900/20 rounded">
                      <div className="flex items-center justify-between text-sm mb-1 gap-2">
                        <div className="flex items-center gap-2 flex-1 min-w-0">                          
                          <span className="truncate font-medium" title={domain}>{domain}</span>
                        </div>
                        <div className="flex items-center gap-2 flex-shrink-0">
                          <span className="text-xs bg-red-200 dark:bg-red-800 px-2 py-1 rounded-full">
                            Failed in Round {info.round}
                          </span>
                          {info.duration && (
                            <span className="text-muted-foreground text-xs">after {info.duration.toFixed(1)}s</span>
                          )}
                        </div>
                      </div>
                      {(info as any).error && (
                        <div className="text-xs text-red-600 dark:text-red-400 mt-1">
                          {(info as any).error}
                        </div>
                      )}
                    </div>
                  ))}
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

const deleteScanBatch = async (apiBaseUrl: string, batchId: string): Promise<boolean> => {
  try {
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    
    // FIXED: Use correct endpoint path
    const deleteUrl = `${normalizedBaseUrl}/scans/batch/${batchId}`;
    console.log('ðŸ—‘ï¸ Attempting to delete batch at:', deleteUrl);
    
    const response = await fetch(deleteUrl, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Response status:', response.status);
    console.log('Response OK:', response.ok);
    
    if (response.ok) {
      const data = await response.json();
      console.log('âœ… Batch deleted successfully:', data);
      return true;
    } else {
      const errorData = await response.text();
      console.error('âŒ Delete failed with status', response.status, ':', errorData);
      return false;
    }
  } catch (error) {
    console.error('âŒ Error deleting batch:', error);
    return false;
  }
};

const deleteScanResult = async (apiBaseUrl: string, resultId: number): Promise<boolean> => {
  try {
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    
    // FIXED: Use correct endpoint path
    const deleteUrl = `${normalizedBaseUrl}/scans/result/${resultId}`;
    console.log('ðŸ—‘ï¸ Attempting to delete result at:', deleteUrl);
    
    const response = await fetch(deleteUrl, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Response status:', response.status);
    console.log('Response OK:', response.ok);
    
    if (response.ok) {
      const data = await response.json();
      console.log('âœ… Result deleted successfully:', data);
      return true;
    } else {
      const errorData = await response.text();
      console.error('âŒ Delete failed with status', response.status, ':', errorData);
      return false;
    }
  } catch (error) {
    console.error('âŒ Error deleting result:', error);
    return false;
  }
};

// FIXED: Clear all function with proper error handling
const clearAllScans = async (apiBaseUrl: string): Promise<boolean> => {
  try {
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    
    // FIXED: Use correct endpoint path
    const deleteUrl = `${normalizedBaseUrl}/scans/clear-all`;
    console.log('ðŸ—‘ï¸ Attempting to clear all at:', deleteUrl);
    
    const response = await fetch(deleteUrl, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Response status:', response.status);
    console.log('Response OK:', response.ok);
    
    if (response.ok) {
      const data = await response.json();
      console.log('âœ… All data cleared successfully:', data);
      return true;
    } else {
      const errorData = await response.text();
      console.error('âŒ Clear all failed with status', response.status, ':', errorData);
      return false;
    }
  } catch (error) {
    console.error('âŒ Error clearing all scans:', error);
    return false;
  }
};

const loadHistoricalScans = async (apiBaseUrl: string) => {
  try {
    // Call the scan-service which proxies to db-service
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    const response = await fetch(`${normalizedBaseUrl}/batches`);
    
    if (!response.ok) {
      console.warn(`Failed to load historical scans: ${response.status}`);
      return [];
    }
    
    const batchesData = await response.json();
    // Handle both array and object with 'batches' key
    const batches = Array.isArray(batchesData) ? batchesData : (batchesData.batches || []);
    
    // Convert batches to ScanResult format
    return batches.map((batch: any) => ({
      request_id: batch.batch_id, // Use batch_id as the primary key for history items
      batch_id: batch.batch_id,
      url: `Batch with ${batch.total_urls} domains`,
      status: batch.status as 'pending' | 'processing' | 'completed' | 'failed',
      requested_at: batch.created_at,
      total_urls: batch.total_urls,
      // These fields are not in the batch summary, will be loaded on demand
      execution_time_seconds: undefined, 
      scan_status: batch.status === 'completed' ? 'success' : 'failed', // Simplified status
      // Add counts from batch data
      successful_count: batch.successful_count,
      failed_count: batch.failed_count,
      error_message: batch.status === 'failed' ? 'Batch processing failed' : undefined,
      finalDomainProgress: {}, // To be loaded on demand
      detailedResults: [] // Will be loaded on demand
    }));
  } catch (error) {
    console.error('Error loading historical scans from database:', error);
    return [];
  }
};

const loadBatchDetails = async (apiBaseUrl: string, batchId: string) => {
  try {
    // Call the scan-service which proxies to db-service
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    const response = await fetch(`${normalizedBaseUrl}/results/batch/${batchId}`);
    
    if (!response.ok) {
      console.warn(`Failed to load batch details for ${batchId}: ${response.status}`);
      return [];
    }
    
    const data = await response.json();
    const results = Array.isArray(data) ? data : (data.results || []);
    
    // Convert database results to frontend ScanResult format
    return results.map((result: any) => ({
      ...result,
      scan_status: result.status === 'completed' ? 'success' : 'failed',
      total_urls: 1 // Each detailed result is for one URL
    }));
  } catch (error) {
    console.error('Error loading batch details:', error);
    return [];
  }
};



const getStatusIcon = (status: string) => {
  switch (status) {
    case 'completed': return <div className="h-2 w-2 bg-green-500 rounded-full" />;
    case 'failed': return <div className="h-2 w-2 bg-red-500 rounded-full" />;
    case 'processing': return <div className="h-2 w-2 bg-blue-500 rounded-full animate-pulse" />;
    default: return <div className="h-2 w-2 bg-yellow-500 rounded-full" />;
  }
};

const connectSSEWithPost = async (
  apiBaseUrl: string,
  domains: string,
  saveToDb: boolean,  // ADD THIS PARAMETER
  onStart: (requestId: string) => void,
  onProgress: (data: any) => void,
  onComplete: (data: any) => void,
  onError: (error: string) => void
) => {
  try {
    // Normalize API base URL (remove trailing slash)
    const normalizedBaseUrl = apiBaseUrl.replace(/\/$/, '');
    const fullUrl = `${normalizedBaseUrl}/scan-with-progress`;

    console.log('ðŸ” Attempting to connect to:', fullUrl);
    console.log('ðŸ“¦ Request body:', {
      domain: domains,
      max_concurrent: 5,
      save_to_db: saveToDb  // ADD THIS
    });

    const response = await fetch(fullUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'text/event-stream'
      },
      body: JSON.stringify({
        domain: domains,
        max_concurrent: 5,
        save_to_db: saveToDb  // ADD THIS - This is critical!
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const reader = response.body?.getReader();
    const decoder = new TextDecoder();

    if (!reader) {
      throw new Error('No response body');
    }

    let buffer = '';

    while (true) {
      const { done, value } = await reader.read();
      
      if (done) break;

      buffer += decoder.decode(value, { stream: true });
      
      // Process complete SSE messages
      const lines = buffer.split('\n\n');
      buffer = lines.pop() || ''; // Keep incomplete message in buffer

      for (const line of lines) {
        if (line.startsWith('data: ')) {
          try {
            const data = JSON.parse(line.slice(6));
            
            if (data.type === 'start') {
              onStart(data.request_id);
              onProgress(data);
            } else if (data.type === 'domain_processing') {
              onProgress(data);
            } else if (data.type === 'round_start') { // Restored this handler
              onProgress(data);
            } else if (data.type === 'domain_complete') {
              onProgress(data);
            } else if (data.type === 'round_complete') {
              onProgress(data);
            } else if (data.type === 'retry_wait') {
              // Handle retry_wait separately to show a specific message
              onProgress(data);
            } else if (data.type === 'cancelled') {
              onComplete(data);
              return;
            } else if (data.type === 'complete') {
              onComplete(data);
              return;
            }
          } catch (err) {
            console.error('Parse error:', err);
          }
        }
      }
    }
  } catch (err) {
    console.error('Fetch SSE error:', err);
    onError(err instanceof Error ? err.message : 'Unknown error'); // Pass empty tempRequestId on fetch error
  }
};

// ============================================================================
// MAIN WEBSCAN COMPONENT
// ============================================================================

const WebScan: React.FC<WebScanProps> = ({ onBack, apiBaseUrl }) => {
  const [activeTab, setActiveTab] = useState<'scan' | 'history'>('scan');
  const [urls, setUrls] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanHistory, setScanHistory] = useState<ScanResult[]>([]);
  const [scanProgress, setScanProgress] = useState({ total: 0, completed: 0 });
  const [expandedSummary, setExpandedSummary] = useState<Set<string>>(new Set());
  const [message, setMessage] = useState<{ text: string; type: 'success' | 'error' | 'info' | 'warning' } | null>(null);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [domainProgress, setDomainProgress] = useState<{[key: string]: DomainProgressInfo}>({});
  const [processingDomains, setProcessingDomains] = useState<{[key: string]: DomainProgressInfo}>({});
  const [currentRequestId, setCurrentRequestId] = useState<string | null>(null);
  const [isCancelling, setIsCancelling] = useState(false);
  const [currentBatchId, setCurrentBatchId] = useState<string | null>(null); // ADD THIS
  const [expandedProgress, setExpandedProgress] = useState<Set<string>>(new Set());
  const [roundHistory, setRoundHistory] = useState<RoundInfo[]>([]);
  const [currentRound, setCurrentRound] = useState(1);const [viewingResultsFor, setViewingResultsFor] = useState<string | null>(null);

  // Load historical scans on component mount from the API
  useEffect(() => {
    const initializeScans = async () => {
      console.log('Loading scan history from database...');
      const historicalScans = await loadHistoricalScans(apiBaseUrl);
      if (historicalScans && historicalScans.length > 0) {
        console.log(`Loaded ${historicalScans.length} scans from database`);
        setScanHistory(historicalScans);
      } else {
        console.log('No scans found in database');
      }
    };
    
    initializeScans();
  }, [apiBaseUrl]);

  // ============================================================================
  // NO localStorage STORAGE - DATABASE IS THE SOURCE OF TRUTH
  // ============================================================================
  // Removed: useEffect that saves/loads from localStorage
  // The database is now the single source of truth

  const showMessage = (text: string, type: 'success' | 'error' | 'info' | 'warning') => {
    setMessage({ text, type });
    setTimeout(() => setMessage(null), 5000);
  };

  const handleCancelScan = async () => {
    if (!currentRequestId) return;
    
    setIsCancelling(true);
    try {
      const response = await fetch(`${apiBaseUrl}/cancel-scan/${currentRequestId}`, {
        method: 'POST'
      });
      
      if (response.ok) {
        showMessage('Cancelling scan...', 'warning');
      }
    } catch (error) {
      showMessage('Failed to cancel scan', 'error');
    }
  };

  const processFileUrls = async (file: File): Promise<string[]> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const text = e.target?.result as string;
        // Split by newlines and filter empty lines
        const urls = text
          .split('\n')
          .map(line => line.trim())
          .filter(line => line !== '' && !line.startsWith('#')); // Allow comments with #
        resolve(urls);
      };
      
      reader.onerror = () => reject(new Error('Failed to read file'));
      reader.readAsText(file);
    });
  };

  const handleFileSelect = async (file: File) => {
    // Validate file type
    if (!file.name.endsWith('.txt')) {
      showMessage('Please upload a .txt file only', 'error');
      return;
    }

    // Validate file size (max 1MB)
    if (file.size > 1024 * 1024) {
      showMessage('File size should be less than 1MB', 'error');
      return;
    }

    try {
      const urls = await processFileUrls(file);
      if (urls.length === 0) {
        showMessage('No valid URLs found in the file', 'warning');
        return;
      }

      setUploadedFile(file);
      setUrls(urls.join('\n')); // Add URLs to textarea
      showMessage(`Successfully loaded ${urls.length} URL(s) from file`, 'success');
    } catch (error) {
      showMessage('Error reading file: ' + (error instanceof Error ? error.message : 'Unknown error'), 'error');
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => { e.preventDefault(); setIsDragging(true); };
  const handleDragLeave = (e: React.DragEvent) => { e.preventDefault(); setIsDragging(false); };
  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => { const files = e.target.files; if (files && files.length > 0) { handleFileSelect(files[0]); } };
  const removeFile = () => { setUploadedFile(null); setUrls(''); showMessage('File removed and URLs cleared', 'info'); };

  const generateRequestId = () => {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
  };

  const handleScanSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const urlList = urls
      .split(/[\s,\n]+/)
      .map(u => u.trim().replace(/^(https?:\/\/)?(www\.)?/, '').replace(/\/$/, ''))
      .filter(u => u !== '');

    if (urlList.length === 0) {
      showMessage('Please enter at least one URL', 'error');
      return;
    }

    const tempRequestId = generateRequestId(); // This will be used to track the scan before we get a real ID
    const overallStartTime = Date.now();
    
    setIsScanning(true);
    setScanProgress({ total: urlList.length, completed: 0 });
    setDomainProgress({});
    setExpandedSummary(new Set()); // Clear summary on new scan
    setProcessingDomains({});
    setRoundHistory([]);
    setCurrentRequestId(null);
    setIsCancelling(false);
    setCurrentBatchId(null);
    showMessage(`Initiating scan for ${urlList.length} URL(s)...`, 'info');

    const pendingScan: ScanResult = {
      request_id: tempRequestId,
      url: urlList.join(', '),
      status: 'processing',
      requested_at: new Date().toISOString(),
      total_urls: urlList.length,
    };

    setScanHistory(prev => [pendingScan, ...prev]);

    const accumulatedResults: ScanResult[] = [];
    let actualRequestId: string | null = null;

    await connectSSEWithPost(
      apiBaseUrl,
      urlList.join(','),
      true,  // ADD THIS - Enable database persistence
      
      // onStart callback
      (requestId) => {
        actualRequestId = requestId;
        setCurrentRequestId(requestId);
      },
      
      // onProgress callback
      (data) => {
        if (data.type === 'start') {
          const backendRequestId = data.request_id;
          const backendBatchId = data.batch_id;
          setCurrentRequestId(backendRequestId);
          setCurrentBatchId(backendBatchId);
          setScanHistory(prev => prev.map(scan => 
            scan.request_id === tempRequestId
              ? { ...scan, request_id: backendRequestId, batch_id: backendBatchId }
              : scan
          ));
          setScanProgress({ total: data.total_domains, completed: 0 });
          showMessage(`Starting scan of ${data.total_domains} domains...`, 'info');
        } else if (data.type === 'round_start') {
          setCurrentRound(data.round);
          setRoundHistory(prev => [...prev, {
            round: data.round,
            duration: 0,
            domainsProcessed: 0
          }]);
        } else if (data.type === 'domain_processing') {
          setProcessingDomains(prev => ({
            ...prev,
            [data.domain]: {
              status: 'processing',
              round: data.round,
              startedAt: data.started_at, // Use backend's field name
              timeInCurrentRound: 0
            }
          }));
        } else if (data.type === 'domain_complete') {
          // FIRST: Remove from processing
          setProcessingDomains(prev => {
            const newProcessing = {...prev};
            delete newProcessing[data.domain];
            return newProcessing;
          });

          // Update overall progress
          setScanProgress({ 
            total: data.total_domains, 
            completed: data.completed 
          });
          // Update individual domain progress
          setDomainProgress(prev => ({
            ...prev,
            [data.domain]: {
              status: data.status,
              duration: data.duration,
              error: data.error,
              round: data.round,
              timeInCurrentRound: data.time_in_current_round
            }
          }));

          // If scan succeeded, store the result
          if (data.status === 'completed' && data.result) {
            // Backend already formats the result, just add the correct request_id
            accumulatedResults.push({
              ...data.result,
              request_id: actualRequestId || tempRequestId, // Use actual ID
            });
          } else if (data.status === 'failed') {
            // Add a result for the failed domain
            accumulatedResults.push({
              request_id: actualRequestId || tempRequestId,
              url: data.domain,
              status: 'failed',
              scan_status: 'failed',
              error_message: data.error || 'Scan failed for an unknown reason.',
              requested_at: new Date().toISOString(),
              total_urls: 1,
              execution_time_seconds: data.duration,
              raw_response: data.result,
            });
          }

          // Show progress message
        } else if (data.type === 'round_complete') {
          setRoundHistory(prev => prev.map(r => r.round === data.round ? {
            ...r,
            duration: data.duration,
            domainsProcessed: data.domains_processed
          } : r));
        } else if (data.type === 'retry_wait') {
          showMessage(
            `â³ Waiting ${data.delay}s before retry round ${data.next_round}. Retrying ${data.domains_to_retry} failed domains...`,
            'info'
          );
        }
      },
      
      // onComplete callback
      (data) => {
        const endTime = Date.now();
        const executionTimeSeconds = (endTime - overallStartTime) / 1000;

        const finalDomainStatusFromBackend = data.all_domains_status || domainProgress;

        const successfulCount = data.summary?.successful || 0;
        const failedCount = data.summary?.failed || 0;
        const totalScanned = successfulCount + failedCount;
        const hasFailures = failedCount > 0;

        // CRITICAL FIX: Use currentBatchId to find and update the correct scan
        setScanHistory(prev => prev.map(scan => {
          // Match by batch_id if available, otherwise by request_id
          const isMatchingScan = currentBatchId
            ? scan.batch_id === currentBatchId
            : scan.request_id === (actualRequestId || tempRequestId);

          if (isMatchingScan) {
            return {
              ...scan,
              status: (data.type === 'cancelled' || (hasFailures && totalScanned === scan.total_urls)) ? 'failed' : 'completed',
              detailedResults: accumulatedResults,
              finalDomainProgress: finalDomainStatusFromBackend,
              execution_time_seconds: executionTimeSeconds,
              error_message: data.message || (hasFailures ? `${failedCount} domains failed.` : undefined)
            };
          }
          return scan;
        }));

        setDomainProgress(finalDomainStatusFromBackend);

        showMessage(
          data.type === 'cancelled' ? 'Scan cancelled.' : `Scan completed! ${successfulCount} successful, ${failedCount} failed.`,
          hasFailures ? 'warning' : 'success'
        );
        setCurrentRequestId(null);
        setIsCancelling(false);
        setIsScanning(false);
        setScanProgress({ total: 0, completed: 0 });
        setProcessingDomains({}); // Clear processing domains
        setExpandedProgress(new Set()); // Clear expanded progress
      },
      
      // onError callback
      (error) => {
        const endTime = Date.now();
        const executionTimeSeconds = (endTime - overallStartTime) / 1000;

        setDomainProgress(currentProgress => {
          setScanHistory(prev => prev.map(scan => 
            scan.request_id === (actualRequestId || tempRequestId)
              ? { 
                  ...scan,
                  request_id: actualRequestId || tempRequestId,
                  status: 'failed',
                  error_message: error,
                  execution_time_seconds: executionTimeSeconds,
                  detailedResults: accumulatedResults.length > 0 ? accumulatedResults : undefined,
                  finalDomainProgress: { ...currentProgress }
                }
              : scan
          ));
          return currentProgress; // Return unchanged
        });

        showMessage(`âŒ Scan failed: ${error}`, 'error');
        setCurrentRequestId(null);
        setIsCancelling(false);
        setIsScanning(false);
      }
    );
  };

  const toggleSummary = (requestId: string) => {
    // Toggle Summary
    setExpandedSummary(prev => {
      const newSet = new Set(prev);
      if (newSet.has(requestId)) newSet.delete(requestId);
      else newSet.add(requestId);
      return newSet;
    });
  };

  const toggleProgress = (requestId: string) => {
    setExpandedProgress(prev => {
      const newSet = new Set(prev);
      if (newSet.has(requestId)) newSet.delete(requestId);
      else newSet.add(requestId);
      return newSet;
    });
  };

  const handleLoadBatchDetails = async (requestId: string) => {
    const scan = scanHistory.find(s => s.request_id === requestId);
    if (!scan || !scan.batch_id) {
      showMessage('Could not find batch to load.', 'error');
      return;
    }

    try {
      const details = await loadBatchDetails(apiBaseUrl, scan.batch_id);
      if (details && details.length > 0) {
        setScanHistory(prev => prev.map(s => 
          s.request_id === requestId
            ? { ...s, detailedResults: details }
            : s
        ));
        setViewingResultsFor(requestId);
      } else {
        showMessage('No details found for this batch.', 'warning');
      }
    } catch (error) {
      showMessage('Failed to load batch details.', 'error');
    }
  };
  const calculateSecurityScore = (result: any) => {
    if (result.scan_status !== 'success') return 0;
  
    // Prioritize new PQC analysis
    if (result.raw_response?.pqc_analysis) {
      return result.raw_response.pqc_analysis.overall_score;
    }
  
    // Fallback to quantum_score
    if (result.quantum_score !== undefined) {
      return result.quantum_score;
    }
  
    // Original calculation as last resort
    let score = 0;
    if (result.tls_version?.includes('TLS 1.3')) score += 25;
    else if (result.tls_version?.includes('TLS 1.2')) score += 20;
    
    const keySize = result.public_key_size_bits || 0;
    if (keySize >= 4096) score += 20;
    else if (keySize >= 2048) score += 15;
    
    if (result.ephemeral_key_exchange) score += 15;
    if (result.ct_present) score += 10;
    
    return Math.max(0, Math.min(score, 100));
  };

  const getSecurityIndicator = (result: any) => {
    const grade = result.quantum_grade;
    if (!grade && result.raw_response?.pqc_analysis?.overall_grade) {
      return getGradeColor(result.raw_response.pqc_analysis.overall_grade);
    } else if (grade) {
      return getGradeColor(grade);
    } else {
      const score = calculateSecurityScore(result);
      if (score >= 80) return 'bg-green-500';
      if (score >= 60) return 'bg-yellow-500';
      return 'bg-red-500';
    }
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  // Check if viewing results - if yes, show detail page instead of history
  if (viewingResultsFor) {
    const scanToView = scanHistory.find(s => s.request_id === viewingResultsFor);
    if (scanToView) {
      return (
        <ResultsDetailPage
          scan={scanToView}
          onBack={() => setViewingResultsFor(null)}
        />
      );
    }
  }
  
  // Otherwise show normal UI
  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      transition={{ duration: 0.3 }}
      className="p-4 sm:p-6"
    >
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <div className="p-3 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
            <Globe className="h-8 w-8 text-blue-600 dark:text-blue-400" />
          </div>
          <div>
            <h1 className="text-2xl font-bold">Web Scan</h1>
            <p className="text-muted-foreground">Scan your web assets for cryptographic vulnerabilities</p>
          </div>
        </div>
        <Button variant="outline" onClick={onBack}>
          <ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard
        </Button>
      </div>

      {message && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className={`mb-6 p-4 rounded-lg ${
            message.type === 'success' ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200' :
            message.type === 'error' ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200' :
            message.type === 'warning' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200' :
            'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200'
          }`}
        >
          {message.text}
        </motion.div>
      )}

      <div className="flex mb-6 border-b">
        <button
          onClick={() => setActiveTab('scan')}
          className={`px-6 py-3 border-b-2 transition-colors ${
            activeTab === 'scan'
              ? 'border-primary text-primary'
              : 'border-transparent hover:text-primary'
          }`}
        >
          New Scan
        </button>
        <button
          onClick={() => setActiveTab('history')}
          className={`px-6 py-3 border-b-2 transition-colors ${
            activeTab === 'history'
              ? 'border-primary text-primary'
              : 'border-transparent hover:text-primary'
          }`}
        >
          Scan History ({scanHistory.length})
        </button>
      </div>

      <AnimatePresence mode="wait">
        {activeTab === 'scan' ? (
          <motion.div
            key="scan-tab"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="space-y-6"
          >
            <div className="grid md:grid-cols-2 gap-6 items-start">
              <Card>
                <CardHeader>
                  <CardTitle>Manually Enter Domains</CardTitle>
                  <CardDescription>
                    Type or paste domains directly.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <textarea
                    id="urls"
                    value={urls}
                    onChange={(e) => setUrls(e.target.value)}
                    onKeyDown={(e) => { if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) { handleScanSubmit(e as any); } }}
                    placeholder="example.com&#10;google.com, github.com"
                    className="w-full p-3 border rounded-lg min-h-[150px] resize-y bg-background"
                    disabled={!!uploadedFile}
                  />
                  <p className="text-sm text-muted-foreground mt-2">
                    Enter domains separated by <strong>commas</strong>, <strong>spaces</strong>, or <strong>new lines</strong>.
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Upload a .txt File</CardTitle>
                  <CardDescription>
                    Drag & drop or select a file.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                      {uploadedFile ? (
                        <div className="p-4 border rounded-lg bg-muted/50 flex items-center justify-between">
                          <div className="flex items-center gap-3 overflow-hidden">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-primary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>
                            <span className="font-medium truncate" title={uploadedFile.name}>{uploadedFile.name}</span>
                          </div>
                          <button onClick={removeFile} className="text-muted-foreground hover:text-destructive text-2xl leading-none flex-shrink-0 ml-2">&times;</button>
                        </div>
                      ) : (
                        <div
                          onDrop={handleDrop}
                          onDragOver={handleDragOver}
                          onDragLeave={handleDragLeave}
                          className={`relative border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors ${isDragging ? 'border-primary bg-primary/10' : 'border-border hover:border-primary/50'}`}
                        >
                          <input type="file" accept=".txt" onChange={handleFileInputChange} 
                            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                            aria-label="Upload domain list file"
                            title="Select a .txt file containing domains"
                          />
                          <div className="flex flex-col items-center justify-center space-y-2 text-muted-foreground">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-4-4V7a4 4 0 014-4h1.586a1 1 0 01.707.293l1.414 1.414a1 1 0 00.707.293H13.5a4 4 0 014 4v1.586a1 1 0 01-.293.707l-1.414 1.414a1 1 0 00-.293.707V16a4 4 0 01-4 4H7z" /></svg>
                            <p><strong>Drag & drop a .txt file</strong></p>
                            <p className="text-sm">or click to select</p>
                          </div>
                        </div>
                      )}
                      <p className="text-sm text-muted-foreground">
                        File must be .txt, &lt; 1MB. One URL per line. Lines starting with # are ignored.
                      </p>
                      </div>
                </CardContent>
              </Card>
            </div>
            <div className="mt-6">
                <Button 
                  onClick={handleScanSubmit}
                  disabled={isScanning || (!urls && !uploadedFile)}
                  className="w-full sm:w-auto"
                >
                  {isScanning ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <Play className="h-4 w-4 mr-2" />}
                  {isScanning ? 'Scanning...' : 'Start Crypto Scan'}
                </Button>
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="history-tab"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="space-y-6"
          >
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Scan History</h3>
              <Button 
                variant="outline" 
                onClick={async () => {
                  showMessage('Clearing all scan history...', 'info');
                  
                  try {
                    const success = await clearAllScans(apiBaseUrl);
                    
                    if (success) {
                      setScanHistory([]);
                      showMessage('All scan history deleted successfully', 'success');
                    } else {
                      showMessage('Failed to clear all scans', 'error');
                    }
                  } catch (error) {
                    console.error('Error during clear all:', error);
                    showMessage('Error clearing scan history', 'error');
                  }
                }}
                size="sm"
              >
                Clear All
              </Button>
            </div>

            {scanHistory.length === 0 ? (
              <Card>
                <CardContent className="flex items-center justify-center py-12">
                  <p className="text-muted-foreground">No scans found</p>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-4">
                {scanHistory.map((scan) => (
                  <Card key={scan.request_id} className="transition-all hover:shadow-md">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-3 flex-1">
                          {getStatusIcon(scan.status)}
                          <div>
                            <h4 className="font-semibold">Request ID: {scan.request_id}</h4>
                            <p className="text-sm text-muted-foreground">
                              {new Date(scan.requested_at).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            scan.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200' :
                            scan.status === 'failed' || scan.error_message ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200' :
                            scan.status === 'processing' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200' :
                            'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200'
                          }`}>
                            {scan.status.toUpperCase()}
                          </span>
                          
                          {/* DELETE BUTTON FOR INDIVIDUAL BATCH */}
                          <motion.button
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            onClick={async () => {
                              const batchId = scan.batch_id || scan.request_id;
                              showMessage('Deleting scan batch...', 'info');
                              
                              const success = await deleteScanBatch(apiBaseUrl, batchId);
                              
                              if (success) {
                                setScanHistory(prev => 
                                  prev.filter(s => s.request_id !== scan.request_id)
                                );
                                showMessage('Scan batch deleted successfully', 'success');
                              } else {
                                showMessage('Failed to delete scan batch', 'error');
                              }
                            }}
                            className="p-2 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded-lg transition-colors"
                            title="Delete this scan batch"
                            disabled={false}
                          >
                            <Trash2 className="h-4 w-4" />
                          </motion.button>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4 mb-4 text-sm">
                        <div>
                          <span className="text-muted-foreground">URLs:</span> {scan.total_urls}
                        </div>
                        <div>
                          <span className="text-muted-foreground">Execution Time:</span> {scan.execution_time_seconds !== undefined ? `${scan.execution_time_seconds} seconds` : 'N/A'}
                        </div>
                      </div>

                      {/* BUTTONS SECTION */}
                      <div className="flex items-center gap-2 flex-wrap">
                        {/* Show progress button only for processing scans */}
                        {scan.status === 'processing' && (
                          <Button
                            variant="outline"
                            onClick={() => toggleProgress(scan.request_id)}
                            size="sm"
                          >
                            {expandedProgress.has(scan.request_id) ? 'Hide' : 'View'} Progress
                          </Button>
                        )}

                        {/* Show summary button when scan has completed and has domain progress data */}
                        {(scan.status === 'completed' || scan.status === 'failed') && scan.finalDomainProgress && (
                          <Button
                            variant="secondary"
                            onClick={() => toggleSummary(scan.request_id)}
                            size="sm"
                          >
                            {expandedSummary.has(scan.request_id) ? 'Hide' : 'View'} Summary
                          </Button>
                        )}

                        {(scan.status === 'completed' || (scan.status === 'failed' && scan.detailedResults)) && (
                          <Button
                            variant="outline"
                            onClick={() => {
                              // If results already loaded, just view them
                              if (scan.detailedResults && scan.detailedResults.length > 0) {
                                setViewingResultsFor(scan.request_id);
                              } else {
                                // Otherwise, load them first
                                handleLoadBatchDetails(scan.request_id);
                              }
                            }}
                            size="sm"
                          >
                            View Results
                            {scan.detailedResults && (
                              (() => {
                                const uniqueDomains: {[key: string]: ScanResult} = {};
                                scan.detailedResults.forEach(result => {
                                  uniqueDomains[result.url] = result;
                                });
                                const uniqueResults = Object.values(uniqueDomains);
                                const successCount = uniqueResults.filter(r => r.scan_status === 'success').length;
                                const failCount = uniqueResults.filter(r => r.scan_status !== 'success').length;

                                return (
                                  <span className="ml-2 text-xs text-muted-foreground">
                                    (
                                      <span className="text-green-500">{successCount}</span>
                                      /
                                      <span className="text-red-500">{failCount}</span>
                                    )
                                  </span>
                                );
                              })()
                            )}
                          </Button>
                        )}
                      </div>

                      {/* PROGRESS DISPLAY */}
                      {scan.status === 'processing' && expandedProgress.has(scan.request_id) && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="mt-4 col-span-full"
                        >
                          <ProgressDisplay 
                            scanProgress={scanProgress} 
                            domainProgress={domainProgress}
                            processingDomains={processingDomains}
                            onCancel={handleCancelScan}
                            roundHistory={roundHistory}
                            isCancelling={isCancelling}
                            currentRound={currentRound}
                            isActiveProgress={true}
                          />
                        </motion.div>
                      )}

                      {/* SUMMARY DISPLAY */}
                      {(scan.status === 'completed' || scan.status === 'failed') && expandedSummary.has(scan.request_id) && scan.finalDomainProgress && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="mt-4 col-span-full border-t pt-4"
                        >
                          {/* Individual domain results with delete buttons */}
                          <div className="space-y-2">
                            <h5 className="font-semibold text-sm">Individual Results:</h5>
                            {scan.detailedResults?.map((result, idx) => (
                              <div 
                                key={idx} 
                                className="flex items-center justify-between p-3 bg-muted/50 rounded-lg"
                              >
                                <div className="flex items-center gap-3 flex-1 min-w-0">
                                  <div className={`w-2 h-2 rounded-full ${
                                    result.scan_status === 'success' ? 'bg-green-500' : 'bg-red-500'
                                  }`} />
                                  <span className="truncate text-sm">{result.url}</span>
                                </div>
                                <motion.button
                                  whileHover={{ scale: 1.1 }}
                                  whileTap={{ scale: 0.9 }}
                                  onClick={async () => {
                                    if (result.id) {
                                      showMessage(`Deleting ${result.url}...`, 'info');
                                      
                                      const success = await deleteScanResult(apiBaseUrl, result.id);
                                      
                                      if (success) {
                                        setScanHistory(prev =>
                                          prev.map(s =>
                                            s.request_id === scan.request_id
                                              ? {
                                                  ...s,
                                                  detailedResults: s.detailedResults?.filter(r => r.id !== result.id)
                                                }
                                              : s
                                          )
                                        );
                                        showMessage('Result deleted successfully', 'success');
                                      } else {
                                        showMessage('Failed to delete result', 'error');
                                      }
                                    }
                                  }}
                                  className="p-1.5 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded transition-colors flex-shrink-0"
                                  title="Delete this result"
                                >
                                  <Trash2 className="h-3.5 w-3.5" />
                                </motion.button>
                              </div>
                            ))}
                          </div>
                        </motion.div>
                      )}

                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default WebScan;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\accordion.tsx ---
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\aspect-ratio.tsx ---
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\avatar.tsx ---
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\breadcrumb.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\calendar.tsx ---
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\carousel.tsx ---
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\chart.tsx ---
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\checkbox.tsx ---
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\collapsible.tsx ---
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\command.tsx ---
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\context-menu.tsx ---
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\dialog.tsx ---
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\drawer.tsx ---
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\dropdown-menu.tsx ---
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\form.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\hover-card.tsx ---
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\input-otp.tsx ---
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\label.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\menubar.tsx ---
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\navigation-menu.tsx ---
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\pagination.tsx ---
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\progress.tsx ---
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\radio-group.tsx ---
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\resizable.tsx ---
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\select.tsx ---
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\separator.tsx ---
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\sheet.tsx ---
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\sidebar.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { Menu } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-dvh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-dvh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-dvh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <Menu />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-dvh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100dvh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\slider.tsx ---
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\sonner.tsx ---
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\switch.tsx ---
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\table.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\tabs.tsx ---
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\textarea.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\toast.tsx ---
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\toaster.tsx ---
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\toggle-group.tsx ---
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\toggle.tsx ---
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\tooltip.tsx ---
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\ui\use-toast.ts ---
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\AlgorithmsTable.tsx ---
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, CheckCircle } from "lucide-react";
import { AlgorithmData } from "./types";

interface AlgorithmsTableProps {
  algorithmsData: AlgorithmData[];
}

export function AlgorithmsTable({ algorithmsData }: AlgorithmsTableProps) {
  const [hoveredRow, setHoveredRow] = useState<number | null>(null);

  return (
    <div className="w-full">
      <Card className="w-full">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className="text-lg sm:text-xl">Live Cryptographic Algorithms Data</CardTitle>
          <CardDescription className="text-sm">
            Real-time data from backend API with {algorithmsData.length} algorithms
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          {/* Horizontal scroll container */}
          <div className="overflow-x-auto w-full">
            <table className="min-w-full table-auto text-xs sm:text-sm">
              <thead>
                <tr className="border-b border-border bg-muted/50">
                  <th className="text-left p-3 font-medium min-w-[120px] sticky left-0 bg-muted/50 z-10">Algorithm</th>
                  <th className="text-left p-3 font-medium min-w-[100px]">Type</th>
                  <th className="text-left p-3 font-medium min-w-[80px]">Strength</th>
                  <th className="text-left p-3 font-medium min-w-[100px]">NIST Status</th>
                  <th className="text-left p-3 font-medium min-w-[80px]">PQC</th>
                  <th className="text-left p-3 font-medium min-w-[80px]">Usage</th>
                  <th className="text-left p-3 font-medium min-w-[120px]">Implementation</th>
                  <th className="text-left p-3 font-medium min-w-[200px]">Description</th>
                  <th className="text-left p-3 font-medium min-w-[120px]">Quantum Risk</th>
                  <th className="text-left p-3 font-medium min-w-[150px]">Recommendation</th>
                </tr>
              </thead>
              <tbody>
                {algorithmsData.map((alg) => (
                  <tr
                    key={alg.id}
                    className={`border-b border-border/50 hover:bg-muted/30 transition-all duration-200 ${
                      hoveredRow === alg.id ? 'shadow-md' : ''
                    }`}
                    onMouseEnter={() => setHoveredRow(alg.id)}
                    onMouseLeave={() => setHoveredRow(null)}
                  >
                    <td className="p-3 font-medium text-primary min-w-[120px] sticky left-0 bg-background hover:bg-muted/30 z-10 border-r border-border/20">
                      <div className="truncate" title={alg.name}>
                        {alg.name}
                      </div>
                    </td>
                    <td className="p-3 min-w-[100px]">
                      <Badge variant="outline" className="text-xs whitespace-nowrap">
                        {alg.type}
                      </Badge>
                    </td>
                    <td className="p-3 min-w-[80px]">
                      <span className="text-sm">
                        {alg.strength ? `${alg.strength}-bit` : 'N/A'}
                      </span>
                    </td>
                    <td className="p-3 min-w-[100px]">
                      <Badge
                        variant={
                          alg.nistStatus === 'Standardized' ? 'default' :
                          alg.nistStatus === 'Deprecated' ? 'destructive' : 'secondary'
                        }
                        className="text-xs whitespace-nowrap"
                      >
                        {alg.nistStatus}
                      </Badge>
                    </td>
                    <td className="p-3 min-w-[80px]">
                      {alg.isPqc ? (
                        <div className="flex items-center gap-1">
                          <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                          <span className="text-green-600 text-xs">Yes</span>
                        </div>
                      ) : (
                        <div className="flex items-center gap-1">
                          <AlertTriangle className="h-4 w-4 text-destructive flex-shrink-0" />
                          <span className="text-destructive text-xs">No</span>
                        </div>
                      )}
                    </td>
                    <td className="p-3 min-w-[80px]">
                      <div className="flex flex-col">
                        <span className="font-medium text-sm">{alg.usage}</span>
                        <span className="text-xs text-muted-foreground">instances</span>
                      </div>
                    </td>
                    <td className="p-3 min-w-[120px]">
                      <Badge
                        variant={
                          alg.implementationComplexity === 'Low' ? 'default' :
                          alg.implementationComplexity === 'Medium' ? 'secondary' : 'destructive'
                        }
                        className="text-xs whitespace-nowrap"
                      >
                        {alg.implementationComplexity}
                      </Badge>
                    </td>
                    <td className="p-3 text-muted-foreground min-w-[200px]">
                      <div className="truncate max-w-[200px]" title={alg.description}>
                        {alg.description}
                      </div>
                    </td>
                    <td className="p-3 min-w-[120px]">
                      <div
                        className={`text-sm truncate max-w-[120px] ${
                          alg.quantumVulnerability.includes('resistant') ? 'text-green-600' : 'text-destructive'
                        }`}
                        title={alg.quantumVulnerability}
                      >
                        {alg.quantumVulnerability}
                      </div>
                    </td>
                    <td className="p-3 text-sm text-primary min-w-[150px]">
                      <div className="truncate max-w-[150px]" title={alg.recommendedReplacement}>
                        {alg.recommendedReplacement}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\Charts.tsx ---
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { AlgorithmData, TypeDistribution } from "./types";

const COLORS = ['#2563eb', '#dc2626', '#ea580c', '#16a34a', '#7c3aed', '#0891b2'];

const CustomTooltip = ({ active, payload }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-card border rounded p-2 shadow text-sm">
        <p className="font-medium">{payload[0].payload.name}</p>
        <p className="text-muted-foreground">Usage: {payload[0].value}</p>
      </div>
    );
  }
  return null;
};

interface ChartsProps {
  typeDistribution: TypeDistribution[];
  algorithmsData: AlgorithmData[];
}

export function Charts({ typeDistribution, algorithmsData }: ChartsProps) {
  const [hoveredBar, setHoveredBar] = useState<number | null>(null);

  return (
    <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
      <Card className="w-full">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className="text-lg sm:text-xl">Algorithm Type Distribution</CardTitle>
          <CardDescription className="text-sm">Distribution of algorithm types from backend</CardDescription>
        </CardHeader>
        <CardContent className="p-2 sm:p-4">
          <div className="w-full h-[250px] sm:h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={typeDistribution}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ type, percent }) => `${type} (${(percent * 100).toFixed(0)}%)`}
                  outerRadius={typeof window !== 'undefined' && window.innerWidth < 640 ? 60 : 80}
                  fill="#8884d8"
                  dataKey="count"
                >
                  {typeDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <Card className="w-full border-primary/20 hover:shadow-lg transition-all duration-300">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className="text-lg sm:text-xl">Algorithm Usage</CardTitle>
          <CardDescription className="text-sm">Usage instances from backend data</CardDescription>
        </CardHeader>
        <CardContent className="p-2 sm:p-4">
          <div className="w-full h-[250px] sm:h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={algorithmsData} margin={{ bottom: 60, left: 10, right: 10, top: 10 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="name" 
                  angle={-45} 
                  textAnchor="end" 
                  height={80}
                  fontSize={10}
                  interval={0}
                />
                <YAxis fontSize={10} />
                <Tooltip content={<CustomTooltip />} cursor={{ fill: "transparent" }} />
                <Bar dataKey="usage" radius={[4, 4, 0, 0]}>
                  {algorithmsData.map((entry, index) => {
                    const isHovered = hoveredBar === index;
                    const fillColor = isHovered ? "#1e40af" : "#2563eb"; // Hover vs normal blue
                    return (
                      <Cell
                        key={`cell-${index}`}
                        fill={fillColor}
                        onMouseEnter={() => setHoveredBar(index)}
                        onMouseLeave={() => setHoveredBar(null)}
                        style={{
                          transform: isHovered ? "scaleY(1.1)" : "scaleY(1)",
                          transformOrigin: "bottom",
                          transition: "transform 0.2s ease-in-out",
                        }}
                      />
                    );
                  })}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\PageHeader.tsx ---
import { RefreshCw } from "lucide-react";

interface PageHeaderProps {
  onRefresh: () => void;
  loading: boolean;
}

export function PageHeader({ onRefresh, loading }: PageHeaderProps) {
  return (
    <div className="flex items-center justify-between gap-4">
      <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
      <button
        onClick={onRefresh}
        disabled={loading}
        className="flex items-center gap-2 px-4 py-2 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/80 transition-colors disabled:opacity-50 shrink-0 text-sm sm:text-base"
      >
        <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
        <span className="hidden sm:inline">Refresh</span>
        <span className="sm:hidden">Refresh</span>
      </button>
    </div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\StateDisplays.tsx ---
import { Loader2, AlertTriangle, Database, RefreshCw } from "lucide-react";

export const LoadingSpinner = () => (
  <div className="flex items-center justify-center py-8">
    <Loader2 className="h-8 w-8 animate-spin text-primary" />
    <span className="ml-2 text-muted-foreground text-sm sm:text-base">Fetching data from backend API...</span>
  </div>
);

interface ErrorDisplayProps {
  error: string | null;
  onRetry: () => void;
}

export const ErrorDisplay = ({ error, onRetry }: ErrorDisplayProps) => (
  <div className="flex flex-col items-center justify-center py-8 space-y-4">
    <AlertTriangle className="h-12 w-12 text-destructive" />
    <div className="text-center max-w-full px-4">
      <h3 className="text-lg font-semibold text-destructive">Backend Connection Error</h3>
      <p className="text-muted-foreground max-w-md break-words">{error}</p>
      <p className="text-sm text-muted-foreground mt-2 break-all">
        Make sure your backend API is running at https://backend-ed29.onrender.com/api/apps2
      </p>
      <button
        onClick={onRetry}
        className="mt-4 flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors mx-auto"
      >
        <RefreshCw className="h-4 w-4" />
        Retry Connection
      </button>
    </div>
  </div>
);

interface EmptyStateProps {
  onRefresh: () => void;
}

export const EmptyState = ({ onRefresh }: EmptyStateProps) => (
  <div className="flex flex-col items-center justify-center py-8 space-y-4">
    <Database className="h-12 w-12 text-muted-foreground" />
    <div className="text-center">
      <h3 className="text-lg font-semibold">No Data Available</h3>
      <p className="text-muted-foreground">No algorithms found in the backend database</p>
      <button
        onClick={onRefresh}
        className="mt-4 flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors mx-auto"
      >
        <RefreshCw className="h-4 w-4" />
        Refresh Data
      </button>
    </div>
  </div>
);

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\SummaryCards.tsx ---
import { Card, CardContent } from "@/components/ui/card";
import { AlertTriangle, Shield, CheckCircle } from "lucide-react";
import { SeverityCounts, PQCStats } from "./types";

interface SummaryCardsProps {
  severityCounts: SeverityCounts;
  pqcStats: PQCStats;
}

export function SummaryCards({ severityCounts, pqcStats }: SummaryCardsProps) {
  return (
    <>
      {/* Vulnerability Summary Cards */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <AlertTriangle className="h-5 w-5 text-destructive mb-2" />
            <p className="text-base sm:text-lg text-muted-foreground">Critical</p>
            <p className="text-2xl sm:text-3xl font-bold text-destructive">{severityCounts.Critical}</p>
          </CardContent>
        </Card>
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <AlertTriangle className="h-5 w-5 text-orange-500 mb-2" />
            <p className="text-sm sm:text-base text-muted-foreground">High</p>
            <p className="text-2xl sm:text-3xl font-bold text-orange-500">{severityCounts.High}</p>
          </CardContent>
        </Card>
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <Shield className="h-5 w-5 text-primary mb-2" />
            <p className="text-sm sm:text-base text-muted-foreground">Medium</p>
            <p className="text-2xl sm:text-3xl font-bold text-primary">{severityCounts.Medium}</p>
          </CardContent>
        </Card>
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <CheckCircle className="h-5 w-5 text-green-500 mb-2" />
            <p className="text-sm sm:text-base text-muted-foreground">Low</p>
            <p className="text-2xl sm:text-3xl font-bold text-green-500">{severityCounts.Low}</p>
          </CardContent>
        </Card>
      </div>

      {/* PQC Overview Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4">
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <p className="text-sm sm:text-base text-muted-foreground">Total Algorithms</p>
            <p className="text-2xl sm:text-3xl font-bold text-primary">{pqcStats.total}</p>
          </CardContent>
        </Card>
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <p className="text-sm sm:text-base text-muted-foreground">Post-Quantum Ready</p>
            <p className="text-2xl sm:text-3xl font-bold text-green-600">{pqcStats.pqc}</p>
            <p className="text-sm text-muted-foreground">{pqcStats.pqcPercentage}% of total</p>
          </CardContent>
        </Card>
        <Card className="border-primary/20 bg-transparent shadow-none hover:shadow-lg transition-all duration-300">
          <CardContent className="p-4 flex flex-col items-center justify-center text-center">
            <p className="text-sm sm:text-base text-muted-foreground">Legacy Algorithms</p>
            <p className="text-2xl sm:text-3xl font-bold text-orange-600">{pqcStats.legacy}</p>
            <p className="text-sm text-muted-foreground">{(100 - Number(pqcStats.pqcPercentage)).toFixed(1)}% of total</p>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\types.ts ---
export interface RawApiData {
  Algorithm: string;
  Type: string;
  Strength?: string;
  "NIST Status"?: boolean;
  PQC: boolean;
  Usage?: number;
  "Implementation Complexity"?: string;
  Description?: string;
  "Quantum Vulnerability"?: string;
  "Recommended Replacement"?: string;
}

export interface UnifiedData {
  id: number;
  name: string;
  type: string;
  strength: number;
  nistStatus: 'Standardized' | 'Draft' | 'Deprecated';
  isPqc: boolean;
  usage: number;
  implementationComplexity: string;
  description: string;
  quantumVulnerability: string;
  recommendedReplacement: string;
  performanceImpact: number;
  adoptionRate: number;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  affectedSystems: string[];
  status: string;
  discoveredDate: string;
}

export interface Vulnerability {
  id: number;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  description: string;
  affectedSystems: string[];
  status: string;
  discoveredDate: string;
}

export interface AlgorithmData extends Omit<UnifiedData, 'severity' | 'affectedSystems' | 'status' | 'discoveredDate' | 'title'> {}

export interface SeverityCounts {
  Critical: number;
  High: number;
  Medium: number;
  Low: number;
}

export interface PQCStats {
  total: number;
  pqc: number;
  legacy: number;
  pqcPercentage: string | number;
}

export interface TypeDistribution {
  type: string;
  count: number;
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\utils.ts ---
import { RawApiData, UnifiedData } from './types';

// Transform API data to unified format
export const transformApiDataToUnifiedFormat = (apiData: RawApiData[]): UnifiedData[] => {
  return apiData.map((item, index) => {
    // Extract numeric strength value from strings like "2048-bit", "256-bit", etc.
    const strengthMatch = item.Strength?.match(/(\d+)/);
    const strength = strengthMatch ? parseInt(strengthMatch[1]) : 0;

    // Determine NIST status based on algorithm
    let nistStatus: 'Standardized' | 'Draft' | 'Deprecated' = item["NIST Status"] ? "Standardized" : "Draft";
    if (item.Algorithm === 'SHA-1' || item.Algorithm === 'SSL' || item.Algorithm.includes('MD5')) {
      nistStatus = 'Deprecated';
    }

    // Determine severity based on quantum vulnerability and algorithm type
    let severity: 'Critical' | 'High' | 'Medium' | 'Low' = 'Medium';
    if (item.PQC) {
      severity = 'Low';
    } else if (nistStatus === 'Deprecated' || item.Algorithm === 'SHA-1' || item.Algorithm === 'SSL') {
      severity = 'Critical';
    } else if (item.Type === 'Asymmetric' || item.Algorithm.includes('RSA') || item.Algorithm.includes('ECC')) {
      severity = 'High';
    } else if (item.Type === 'Hash Function' && !item.Algorithm.includes('SHA-3')) {
      severity = 'Medium';
    }

    // Determine status based on PQC and current state
    let status = 'Open';
    if (item.PQC) {
      const pqcStatuses = ['Implemented', 'In Progress', 'Planning'];
      status = pqcStatuses[Math.floor(Math.random() * pqcStatuses.length)];
    } else if (nistStatus === 'Deprecated') {
      status = 'Open';
    } else {
      const regularStatuses = ['Open', 'In Progress', 'Planning', 'Monitoring'];
      status = regularStatuses[Math.floor(Math.random() * regularStatuses.length)];
    }

    // Generate affected systems based on algorithm type
    let affectedSystems = ['General Systems'];
    if (item.Type === 'Protocol') {
      affectedSystems = ['Web Servers', 'API Gateway', 'Load Balancers'];
    } else if (item.Type === 'Asymmetric') {
      affectedSystems = ['PKI Infrastructure', 'Certificate Authority', 'Key Management'];
    } else if (item.Type === 'Hash Function') {
      affectedSystems = ['Database', 'Blockchain', 'Digital Signatures'];
    } else if (item.Type === 'Digital Signature') {
      affectedSystems = ['Code Signing', 'Document Authentication', 'Email Security'];
    } else if (item.Type === 'Key Exchange') {
      affectedSystems = ['VPN', 'TLS Connections', 'Secure Channels'];
    }

    return {
      id: index + 1,
      name: item.Algorithm,
      type: item.Type,
      strength: strength,
      nistStatus: nistStatus,
      isPqc: item.PQC || false,
      usage: item.Usage || 0,
      implementationComplexity: item["Implementation Complexity"] || "Medium",
      description: item.Description || `${item.Algorithm} implementation`,
      quantumVulnerability: item["Quantum Vulnerability"] || (item.PQC ? "Quantum-resistant" : "Vulnerable to quantum attacks"),
      recommendedReplacement: item["Recommended Replacement"] || (item.PQC ? "N/A" : "Upgrade to PQC alternative"),
      performanceImpact: item.PQC ? Math.random() * 0.15 + 0.05 : Math.random() * 0.08 + 0.01,
      adoptionRate: item.PQC ? Math.random() * 0.7 + 0.2 : Math.random() * 0.4,
      // Vulnerability card data
      title: `${item.Algorithm} ${item.Type}`,
      severity: severity,
      affectedSystems: affectedSystems,
      status: status,
      discoveredDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    };
  });
};

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\components\vulnerabilities\VulnerabilityCategoryTable.tsx ---
import React, { useState, useEffect, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { RefreshCw, ArrowLeft, Shield, Key, Hash, Lock, Cpu } from "lucide-react";

// Types for API data
interface ApiCryptoAlgorithm {
  Section: string;
  Algorithm_Name: string;
  Category: string;
  Variant: string;
  Purpose: string;
  Usage_Context: string;
  Status_Today: string;
  PQC_Status: string;
  Priority: string;
  Classical_Recommended: string;
  Quantum_Recommended: string;
  NIST_Reference: string;
  Notes: string;
}
// Types for table data
interface CryptoAlgorithm {
  id: string;
  algorithm_name: string;
  variant: string;
  purpose: string;
  usage_context: string[];
  status_today: string;
  pqc_status: string;
  priority: string;
  classical_recommended: string;
  quantum_recommended: string;
  nist_reference: string[];
  notes: string;
  section: string; // Add section for better categorization
};

// API fetching and data processing
const fetchDataFromAPI = async (): Promise<ApiCryptoAlgorithm[]> => {
  try {
    const response = await fetch("https://backend-1-v77y.onrender.com/api/apps3");
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    const result = await response.json();
    console.log('âœ… API data fetched successfully');
    return result.data || [];
  } catch (error) {
    console.error('âŒ Failed to fetch data from API:', error);
    return [];
  }
};

const transformApiData = (apiData: ApiCryptoAlgorithm[]): CryptoAlgorithm[] => {
  return apiData.map((item, index) => ({
    id: `${item.Algorithm_Name}-${index}`,
    algorithm_name: item.Algorithm_Name,
    variant: item.Variant,
    purpose: item.Purpose,
    usage_context: item.Usage_Context ? item.Usage_Context.split(',').map(s => s.trim()) : [],
    status_today: item.Status_Today,
    pqc_status: item.PQC_Status,
    priority: item.Priority,
    classical_recommended: item.Classical_Recommended,
    quantum_recommended: item.Quantum_Recommended,
    nist_reference: item.NIST_Reference ? item.NIST_Reference.split(',').map(s => s.trim()) : [],
    notes: item.Notes,
    section: item.Section,
  }));
};

const categorizeApiData = (transformedData: CryptoAlgorithm[]) => {
  const categories: { [key: string]: CryptoAlgorithm[] } = {
    symmetric: [],
    asymmetric: [],
    hash: [],
    mac_kdf: [],
    pqc: [],
  };

  // Define keywords for fallback categorization
  const keywordMap: { [key: string]: string[] } = {
    pqc: ['kyber', 'dilithium', 'falcon', 'sphincs', 'ntru', 'bike'],
    mac_kdf: ['hmac', 'cmac', 'pbkdf2', 'hkdf', 'argon', 'bcrypt', 'scrypt', 'gcm', 'ccm', 'chacha20', 'poly1305'],
    asymmetric: ['rsa', 'ecc', 'dsa', 'diffie-hellman', 'x25519', 'ed25519'],
    hash: ['sha', 'md5'],
    symmetric: ['aes', 'des', 'rc4', 'rc5', 'blowfish', 'camellia', 'seed'],
  };

  transformedData.forEach(item => {
    // Primary categorization using the 'Section' field from the API
    const section = item.section?.toLowerCase() || '';
    if (section.includes('asymmetric')) {
      categories.asymmetric.push(item);
    } else if (section.includes('symmetric')) {
      categories.symmetric.push(item);
    } else if (section.includes('hash')) {
      categories.hash.push(item);
    } else if (section.includes('mac') || section.includes('kdf')) {
      categories.mac_kdf.push(item);
    } else if (section.includes('post-quantum')) {
      categories.pqc.push(item);
    } else {
      // Fallback to keyword-based categorization if 'Section' is not helpful
      const name = item.algorithm_name.toLowerCase();
      let found = false;
      for (const category in keywordMap) {
        if (keywordMap[category].some(keyword => name.includes(keyword))) {
          categories[category as keyof typeof categories].push(item);
          found = true;
          break;
        }
      }
      if (!found) {
        console.warn(`Could not categorize: ${item.algorithm_name}`);
        // Optionally add to a default/unknown category
      }
    }
  });

  return categories;
};

// Status badge component
const StatusBadge = ({ status }: { status: string }) => {
  const getBadgeClass = (status: string): string => {
    switch (status.toLowerCase()) {
      // General Status
      case "strong":
      case "safe":
      case "standardized":
      case "yes":
      case "low":
        return "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
      case "medium":
      case "candidate":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
      case "weak":
      case "high":
        return "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300";
      case "insecure":
      case "no":
        return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
      
      // Priority
      case "high":
        return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
      // medium is handled above
      // low is handled above

      default:
        return "bg-muted text-muted-foreground";
    }
  };

  return (
    <Badge className={`text-xs border-transparent ${getBadgeClass(status)}`}>
      {status}
    </Badge>
  );
};

// Editable cell component
const EditableCell = ({
  value,
  columnKey
}: {
  value: string;
  columnKey: string;
}) => {
  const columnsWithBadges = [
    'status_today', 
    'pqc_status', 
    'priority', 
    'classical_recommended', 
    'quantum_recommended'
  ];
  if (columnsWithBadges.includes(columnKey)) {
    return <StatusBadge status={value} />;
  }

  return Array.isArray(value) ? (
    <span className="text-sm">{value.join(', ')}</span>
  ) : (
    <span className="text-sm">{value}</span>
  );
};

// Column definition interface
interface ColumnDef {
  key: string;
  header: string;
}

// Generic editable table component with persistence
const EditableTable = ({
  title,
  description,
  data,
  columns,
  onBack,
}: {
  title: string;
  description: string;
  data: any[];
  columns: ColumnDef[];
  onBack: () => void;
}) => {
  const [tableData, setTableData] = useState<any[]>(data);
  useEffect(() => setTableData(data), [data]);

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      transition={{ duration: 0.3 }}
      className="w-full"
    >
      <Card className="w-full">
        <CardHeader className="pb-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-3">
              <Button
                onClick={onBack}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <ArrowLeft className="h-4 w-4" />
                Back
              </Button>
              <div>
                <div className="flex items-center gap-2">
                  <CardTitle className="text-lg font-semibold">{title}</CardTitle>
                </div>
                <CardDescription className="text-sm text-muted-foreground">
                  {description}
                </CardDescription>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b">
                  {columns.map((column) => (
                    <th key={column.key} className="text-left p-2 font-medium min-w-32">
                      {column.header}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {tableData.map((item) => (
                  <tr key={item.id} className="border-b hover:bg-muted/50 transition-colors">
                    {columns.map((column) => (
                      <td key={column.key} className="p-2 align-top">
                        <EditableCell
                          value={item[column.key] || ""}
                          columnKey={column.key}
                        />
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// Table category card component
const TableCategoryCard = ({
  title,
  description,
  icon: Icon,
  onClick,
  dataCount,
}: {
  title: string;
  description: string;
  icon: any;
  onClick: () => void;
  dataCount: number;
}) => {
  return (
    <motion.div
      whileHover={{ scale: 1.02, y: -2 }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.2 }}
    >
      <Card 
        className="cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-primary/20"
        onClick={onClick}
      >
        <CardHeader className="pb-3">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-primary/10">
              <Icon className="h-5 w-5 text-primary" />
            </div>
            <div className="flex-1">
              <CardTitle className="text-lg font-semibold">{title}</CardTitle>
              <CardDescription className="text-sm">
                {description}
              </CardDescription>
            </div>
            <Badge variant="outline" className="text-xs">
              {dataCount} {dataCount === 1 ? 'item' : 'items'}
            </Badge>
          </div>
        </CardHeader>
      </Card>
    </motion.div>
  );
};

// Main dashboard component
const Dashboard = ({
  onTableSelect,
  symmetricData,
  asymmetricData,
  hashData,
  macKdfData,
  pqcData,
}: {
  onTableSelect: (tableType: string) => void;
  symmetricData: any[];
  asymmetricData: any[];
  hashData: any[];
  macKdfData: any[];
  pqcData: any[];
}) => {
  const tableCategories = [
    {
      id: 'symmetric',
      title: 'Symmetric Algorithms',
      description: 'Configure symmetric encryption algorithms and their settings',
      icon: Shield,
      dataCount: symmetricData.length,
    },
    {
      id: 'asymmetric',
      title: 'Asymmetric Algorithms',
      description: 'Configure asymmetric encryption and key exchange algorithms',
      icon: Key,
      dataCount: asymmetricData.length,
    },
    {
      id: 'hash',
      title: 'Hash Functions',
      description: 'Configure cryptographic hash functions and their parameters',
      icon: Hash,
      dataCount: hashData.length,
    },
    {
      id: 'mac_kdf',
      title: 'MACs & KDFs',
      description: 'Configure Message Authentication Codes and Key Derivation Functions',
      icon: Lock,
      dataCount: macKdfData.length,
    },
    {
      id: 'pqc',
      title: 'Post-Quantum Cryptography',
      description: 'Configure post-quantum cryptographic algorithms',
      icon: Cpu,
      dataCount: pqcData.length,
    },
  ];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="container mx-auto px-4 py-6 space-y-8 max-w-4xl"
    >
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold tracking-tight mb-4">Crypto Profile Manager</h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto"></p>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-1 max-w-3xl mx-auto">
        {tableCategories.map((category) => (
          <TableCategoryCard
            key={category.id}
            title={category.title}
            description={category.description}
            icon={category.icon}
            dataCount={category.dataCount}
            onClick={() => onTableSelect(category.id)}
          />
        ))}
      </div>
    </motion.div>
  );
};

export const VulnerabilityCategoryTable = () => {
  const [symmetricData, setSymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [asymmetricData, setAsymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [hashData, setHashData] = useState<CryptoAlgorithm[]>([]);
  const [macKdfData, setMacKdfData] = useState<CryptoAlgorithm[]>([]);
  const [pqcData, setPqcData] = useState<CryptoAlgorithm[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentView, setCurrentView] = useState<'dashboard' | string>('dashboard');

  const [initialData, setInitialData] = useState<{ [key: string]: CryptoAlgorithm[] }>({});

  // Initialize all data from storage or use defaults
  useEffect(() => {
    const initializeData = async () => {
      try {
        const apiData = await fetchDataFromAPI();
        const transformedData = transformApiData(apiData);
        const categorizedData = categorizeApiData(transformedData);

        setInitialData(categorizedData);

        setSymmetricData(categorizedData.symmetric || []);
        setAsymmetricData(categorizedData.asymmetric || []);
        setHashData(categorizedData.hash || []);
        setMacKdfData(categorizedData.mac_kdf || []);
        setPqcData(categorizedData.pqc || []);
        
        console.log('ðŸš€ Profile data initialized from storage');
      } catch (error) {
        console.error('âŒ Error initializing profile data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeData();
  }, []); // Empty dependency array ensures this runs only once on mount

  const commonColumns: ColumnDef[] = [
    { key: "algorithm_name", header: "Algorithm" },
    { key: "variant", header: "Variant" },
    { key: "purpose", header: "Purpose" },
    { key: "priority", header: "Priority" },
    { key: "usage_context", header: "Usage Context" },
    { key: "status_today", header: "Status" },
    { key: "pqc_status", header: "PQC Status" },
    { key: "classical_recommended", header: "Classical Rec." },
    { key: "quantum_recommended", header: "Quantum Rec." },
    { key: "nist_reference", header: "NIST Reference" },
    { key: "notes", header: "Notes" },
  ];

  const handleTableSelect = (tableType: string) => {
    setCurrentView(tableType);
  };

  const handleBackToDashboard = () => {
    setCurrentView('dashboard');
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-6 flex items-center justify-center min-h-screen">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2 text-primary" />
          <p>Loading profile data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <AnimatePresence mode="wait">
        {currentView === 'dashboard' ? (
          <Dashboard
            key="dashboard"
            onTableSelect={handleTableSelect}
            symmetricData={symmetricData}
            asymmetricData={asymmetricData}
            hashData={hashData}
            macKdfData={macKdfData}
            pqcData={pqcData}
          />
        ) : (
          <div key={currentView} className="container mx-auto px-4 py-6 space-y-8 max-w-full">
            {currentView === 'symmetric' && (
              <EditableTable
                title="Symmetric Algorithms"
                description="Configure symmetric encryption algorithms and their settings"
                data={initialData.symmetric || []}
                columns={commonColumns}
                onBack={handleBackToDashboard}
              />
            )}

            {currentView === 'asymmetric' && (
              <EditableTable
                title="Asymmetric Algorithms"
                description="Configure asymmetric encryption and key exchange algorithms"
                data={initialData.asymmetric || []}
                columns={commonColumns}
                onBack={handleBackToDashboard}
              />
            )}

            {currentView === 'hash' && (
              <EditableTable
                title="Hash Functions"
                description="Configure cryptographic hash functions and their parameters"
                data={initialData.hash || []}
                columns={commonColumns}
                onBack={handleBackToDashboard}
              />
            )}

            {currentView === 'mac_kdf' && (
              <EditableTable
                title="MACs & KDFs"
                description="Configure Message Authentication Codes and Key Derivation Functions"
                data={initialData.mac_kdf || []}
                columns={commonColumns}
                onBack={handleBackToDashboard}
              />
            )}

            {currentView === 'pqc' && (
              <EditableTable
                title="Post-Quantum Cryptography"
                description="Configure post-quantum cryptographic algorithms"
                data={initialData.pqc || []}
                columns={commonColumns}
                onBack={handleBackToDashboard}
              />
            )}
          </div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VulnerabilityCategoryTable;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Applications.tsx ---
"use client";

import { useReducer, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { RefreshCw } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useQuery, useQueryClient } from "@tanstack/react-query";

import { filterApplicationsByMultipleCategories } from "@/components/applications/utils";
import { SubOrgsView } from "@/components/applications/SubOrgsView";
import { ApplicationsView } from "@/components/applications/ApplicationsView";
import { ViewSwitcher } from "@/components/applications/ViewSwitcher";
import { CSVData, SubOrg } from "@/components/applications/types";

// Type definitions
interface ApplicationApiResponse {
  "Sub Org": string;
  application: string;
  risk_level: string;
  time_complexity: string;
  time_quarter?: string;
  status?: string;
  pqc_ready: number;
  vulnerabilities: number;
  algorithms_used: string[] | string;
  current_date?: string;
  last_scan?: string;
}

interface TransformedData {
  applications: CSVData[];
  subOrgs: SubOrg[];
}

// Reducer for filters
const initialFilterState = {
  searchTerm: "",
  selectedRiskFilters: [],
  selectedTimeComplexityFilters: [],
  selectedQuarterFilters: [],
  quarterFromMode: false,
  selectedValueBasedFilters: [],
  currentView: 'suborgs',
  selectedSubOrg: '',
};

function applicationsFilterReducer(state: any, action: any) {
  switch (action.type) {
    case 'SET_SEARCH_TERM':
      return { ...state, searchTerm: action.payload };
    case 'TOGGLE_RISK_FILTER':
      return {
        ...state,
        selectedRiskFilters: state.selectedRiskFilters.includes(action.payload)
          ? state.selectedRiskFilters.filter((r: string) => r !== action.payload)
          : [...state.selectedRiskFilters, action.payload],
      };
    case 'TOGGLE_TIME_COMPLEXITY_FILTER':
      return {
        ...state,
        selectedTimeComplexityFilters: state.selectedTimeComplexityFilters.includes(action.payload)
          ? state.selectedTimeComplexityFilters.filter((c: string) => c !== action.payload)
          : [...state.selectedTimeComplexityFilters, action.payload],
      };
    case 'TOGGLE_QUARTER_FILTER':
      if (state.quarterFromMode) {
        return { ...state, selectedQuarterFilters: action.payload ? [action.payload] : [] };
      } else {
        return {
          ...state,
          selectedQuarterFilters: state.selectedQuarterFilters.includes(action.payload)
            ? state.selectedQuarterFilters.filter((q: string) => q !== action.payload)
            : [...state.selectedQuarterFilters, action.payload],
        };
      }
    case 'SET_QUARTER_FROM_MODE':
      return { ...state, quarterFromMode: action.payload, selectedQuarterFilters: [] };
    case 'TOGGLE_VALUE_BASED_FILTER':
      return {
        ...state,
        selectedValueBasedFilters: state.selectedValueBasedFilters.includes(action.payload)
          ? state.selectedValueBasedFilters.filter((t: string) => t !== action.payload)
          : [...state.selectedValueBasedFilters, action.payload],
      };
    case 'SET_VIEW':
      return { ...initialFilterState, currentView: action.payload };
    case 'SET_SUB_ORG':
      return { ...initialFilterState, currentView: 'suborgapps', selectedSubOrg: action.payload };
    case 'BACK_TO_SUB_ORGS':
        return { ...initialFilterState, currentView: 'suborgs' };
    default:
      return state;
  }
}

// API fetching and transformation
const fetchApplications = async (): Promise<ApplicationApiResponse[]> => {
  const response = await fetch(`${import.meta.env.VITE_API_URL}/apps`);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

const transformData = (rawData: ApplicationApiResponse[]): TransformedData => {
  const applications: CSVData[] = [];
  const subOrgMap: Record<string, { total: number; high: number; medium: number; low: number; pqcSum: number }> = {};

  rawData.forEach((item) => {
    const subOrg = item["Sub Org"];
    const risk = item.risk_level;
    const pqc = item.pqc_ready;

    applications.push({
      application: item.application,
      sub_org: subOrg,
      risk_level: risk,
      time_complexity: item.time_complexity,
      time_quarter: item.time_quarter || item.status || "N/A",
      pqc_ready: pqc,
      vulnerabilities: item.vulnerabilities,
      algorithms_used: Array.isArray(item.algorithms_used)
        ? item.algorithms_used.join(", ")
        : item.algorithms_used,
      last_scan: item.last_scan ? item.last_scan : "N/A",
    });

    if (!subOrgMap[subOrg]) {
      subOrgMap[subOrg] = { total: 0, high: 0, medium: 0, low: 0, pqcSum: 0 };
    }

    subOrgMap[subOrg].total += 1;
    subOrgMap[subOrg].pqcSum += pqc;
    if (risk === "High") subOrgMap[subOrg].high += 1;
    else if (risk === "Medium") subOrgMap[subOrg].medium += 1;
    else subOrgMap[subOrg].low += 1;
  });

  const subOrgs: SubOrg[] = Object.entries(subOrgMap).map(([name, stats]) => ({
    name,
    total_apps: stats.total,
    pqc_ready_percentage: stats.total > 0 ? Math.round(stats.pqcSum / stats.total) : 0,
    high_risk_count: stats.high,
    medium_risk_count: stats.medium,
    low_risk_count: stats.low,
    pqc_status: stats.high > 3 ? "Critical" : stats.medium > 5 ? "Warning" : "Good",
  }));

  return { applications, subOrgs };
};

export default function Applications() {
  const queryClient = useQueryClient();
  const [state, dispatch] = useReducer(applicationsFilterReducer, initialFilterState);

  const { data, error, isLoading, isRefetching, refetch } = useQuery<TransformedData, Error>({
    queryKey: ["applications"],
    queryFn: async () => {
        const rawData = await fetchApplications();
        return transformData(rawData);
    }
  });

  const filteredApplications = useMemo(() => {
    if (!data) return [];
    let filtered = data.applications;
    if (state.currentView === 'suborgapps' && state.selectedSubOrg) {
      filtered = filtered.filter(app => app.sub_org === state.selectedSubOrg);
    }
    return filterApplicationsByMultipleCategories(filtered, {
      searchTerm: state.searchTerm,
      selectedRiskFilters: state.selectedRiskFilters,
      selectedTimeComplexityFilters: state.selectedTimeComplexityFilters,
      selectedQuarterFilters: state.selectedQuarterFilters,
      quarterFromMode: state.quarterFromMode,
      selectedValueBasedFilters: state.selectedValueBasedFilters,
    });
  }, [data, state.searchTerm, state.selectedRiskFilters, state.selectedTimeComplexityFilters, state.selectedQuarterFilters, state.quarterFromMode, state.selectedValueBasedFilters, state.currentView, state.selectedSubOrg]);

  const handleRefresh = () => {
    queryClient.invalidateQueries({ queryKey: ["applications"] });
  };

  if (isLoading) return (
    <div className="min-h-dvh bg-background p-6 flex items-center justify-center">
      <div className="text-center">
        <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
        <p className="text-lg">Loading...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="min-h-dvh bg-background p-6 flex items-center justify-center">
      <div className="text-center">
        <p className="text-lg text-red-500 mb-4">{error.message}</p>
        <Button variant="outline" className="gap-2" onClick={() => refetch()}>
          <RefreshCw className="h-4 w-4 mr-2" />
          Retry
        </Button>
      </div>
    </div>
  );

  const filterProps = {
    searchTerm: state.searchTerm,
    setSearchTerm: (payload: string) => dispatch({ type: 'SET_SEARCH_TERM', payload }),
    selectedRiskFilters: state.selectedRiskFilters,
    toggleRiskFilter: (payload: string) => dispatch({ type: 'TOGGLE_RISK_FILTER', payload }),
    selectedTimeComplexityFilters: state.selectedTimeComplexityFilters,
    toggleTimeComplexityFilter: (payload: string) => dispatch({ type: 'TOGGLE_TIME_COMPLEXITY_FILTER', payload }),
    selectedQuarterFilters: state.selectedQuarterFilters,
    toggleQuarterFilter: (payload: string) => dispatch({ type: 'TOGGLE_QUARTER_FILTER', payload }),
    quarterFromMode: state.quarterFromMode,
    setQuarterFromMode: (payload: boolean) => dispatch({ type: 'SET_QUARTER_FROM_MODE', payload }),
    selectedValueBasedFilters: state.selectedValueBasedFilters,
    toggleValueBasedFilter: (payload: string) => dispatch({ type: 'TOGGLE_VALUE_BASED_FILTER', payload }),
  };

  return (
    <motion.div
      className="min-h-dvh bg-background p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl sm:text-4xl font-bold text-foreground">Applications</h1>
          </div>
        </div>

        {state.currentView !== 'suborgapps' && (
          <ViewSwitcher 
            currentView={state.currentView as 'suborgs' | 'allapps'} 
            onViewSwitch={(view) => dispatch({ type: 'SET_VIEW', payload: view })} 
          />
        )}

        <AnimatePresence mode="wait">
          <motion.div
            key={state.currentView}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="transition-all duration-300 ease-in-out"
          >
            {state.currentView === 'suborgs' && data && (
              <SubOrgsView
                subOrgs={data.subOrgs}
                onSubOrgClick={(subOrgName) => dispatch({ type: 'SET_SUB_ORG', payload: subOrgName })}
                onRefresh={handleRefresh}
                isRefreshing={isRefetching}
              />
            )}
            {(state.currentView === 'allapps' || state.currentView === 'suborgapps') && (
              <ApplicationsView
                currentView={state.currentView}
                selectedSubOrg={state.selectedSubOrg}
                onBack={() => dispatch({ type: 'BACK_TO_SUB_ORGS' })}
                onRefresh={handleRefresh}
                isRefreshing={isRefetching}
                filteredApplications={filteredApplications}
                {...filterProps}
              />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Dashboard.tsx ---
// frontend/src/pages/Dashboard.tsx
import { useEffect, useState, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { MetricCard } from "@/components/dashboard/MetricCard";
import { DashboardMetrics } from "@/components/dashboard/DashboardMetrics";
import RiskBreakdown from "@/components/dashboard/RiskBreakdown";
import MigrationAndRiskCharts from "@/components/dashboard/MigrationAndRiskCharts";
import OrganizationalRiskChart from "@/components/dashboard/OrganizationalRiskChart";
import {
  generateTimelineChart,
  groupDataBySubOrg,
  getRiskChartData,
  calculateMetrics,
  calculateAvgMigration,
  getAssetDistributionData,
} from "@/utils/dashboardUtils";
import { CSVData } from "@/types/dashboardTypes";
import { Activity } from "lucide-react";

export default function Dashboard() {
  const [data, setData] = useState<CSVData[]>([]);
  const [orgName, setOrgName] = useState<string>("");
  const [timelineOption, setTimelineOption] = useState({});
  const [expandedSubOrgs, setExpandedSubOrgs] = useState<Record<string, boolean>>({});

  useEffect(() => {
    // Inject global styles for smooth theme transition.
    // Ideally, this should be in a global stylesheet or a root layout component.
    const styleId = 'theme-transition-style';
    if (document.getElementById(styleId)) {
      return;
    }
    const style = document.createElement('style');
    style.id = styleId;
    style.innerHTML = `
      body,
      div,
      button,
      header,
      footer,
      main,
      section,
      a,
      h1, h2, h3, h4, h5, h6,
      p,
      span,
      label,
      input,
      select,
      textarea,
      table,
      th,
      td,
      svg {
        transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
        transition-timing-function: ease-out;
        transition-duration: 0.3s;
      }
    `;
    document.head.appendChild(style);
  }, []);

  useEffect(() => {
    fetch("https://backend-1-v77y.onrender.com/api/apps")
      .then((res) => res.json())
      .then((apps: CSVData[]) => {
        setData(apps);
        const chart = generateTimelineChart(apps);
        setTimelineOption(chart);
        if (apps && apps.length > 0 && apps[0]["Sub Org"]) {
          setOrgName(apps[0]["Organisation"]);
        }
      })
      .catch(console.error);
  }, []);

  const grouped = useMemo(() => groupDataBySubOrg(data), [data]);
  const assetDistributionData = useMemo(() => getAssetDistributionData(data), [data]);
  const riskChartData = useMemo(() => getRiskChartData(data), [data]);
  const {
    totalApps,
    avgPQC,
    totalVulns,
    secureApps,
    totalAlgChanges,
    totalCertChanges,
    avgAlgPerApp,
    avgCertPerApp,
  } = useMemo(() => calculateMetrics(data), [data]);
  const avgMigration = useMemo(() => calculateAvgMigration(data), [data]);

  // Fixed: Convert object to array format
  const vulnerabilityByQuarter = useMemo(() => {
    const quarterMap: Record<string, { algorithms: number; certificates: number }> = {};

    data.forEach(app => {
      const quarter = app["Org Target Migration Data"];
      if (!quarterMap[quarter]) {
        quarterMap[quarter] = { algorithms: 0, certificates: 0 };
      }

      const algVuln = (app.total_pqc_vulnerable_algorithms || 0) - (app.alg_changes || 0);
      const certVuln = (app.total_pqc_vulnerable_certificates || 0) - (app.cert_changes || 0);

      quarterMap[quarter].algorithms += Math.max(0, algVuln);
      quarterMap[quarter].certificates += Math.max(0, certVuln);
    });

    // Convert object to array format as expected by the component
    return Object.entries(quarterMap).map(([name, data]) => ({
      name,
      algorithms: data.algorithms,
      certificates: data.certificates,
    }));
  }, [data]);

  const applicationsByQuarter = useMemo(() => {
    const quarterMap: Record<string, number> = {};

    data.forEach((app) => {
      const quarter = app["Org Target Migration Data"];
      if (!quarterMap[quarter]) {
        quarterMap[quarter] = 0;
      }
      quarterMap[quarter]++;
    });

    return Object.entries(quarterMap).map(([name, count]) => ({
      name,
      count,
    }));
  }, [data]);

  const toggleExpand = (subOrg: string) => {
    setExpandedSubOrgs((prev) => ({ ...prev, [subOrg]: !prev[subOrg] }));
  };

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {/* Enterprise-Level Header with framer-motion */}
      <motion.header
        initial="hidden"
        animate="visible"
        variants={{
          hidden: { opacity: 0 },
          visible: {
            opacity: 1,
            transition: { staggerChildren: 0.15 },
          },
        }}
        className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4"
      >
        <motion.div
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: { opacity: 1, y: 0 },
          }}
        >
          <div className="relative h-9 flex items-center">
  {/* Wrapper with flex for vertical alignment */}
  <AnimatePresence mode="wait">
    <motion.h2
      key={orgName || "overview"}
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 10 }}
      transition={{ duration: 0.2 }}
      className="text-3xl font-bold tracking-tight text-foreground absolute whitespace-nowrap"
    >
      {orgName ? `${orgName} Overview` : "Overview"}
    </motion.h2>
  </AnimatePresence>
</div>

        </motion.div>
      </motion.header>

      {/* Metric Cards */}
      <DashboardMetrics
        totalApps={totalApps}
        totalAlgChanges={totalAlgChanges}
        totalCertChanges={totalCertChanges}
        avgAlgPerApp={avgAlgPerApp}
        avgCertPerApp={avgCertPerApp}
        totalVulns={totalVulns}
        secureApps={secureApps}
        avgMigration={avgMigration}
        avgPQC={avgPQC}
      />

      {/* Charts */}
      <MigrationAndRiskCharts
        vulnerabilityByQuarter={vulnerabilityByQuarter}
        riskChartData={riskChartData}
        assetDistributionData={assetDistributionData}
        applicationsByQuarter={applicationsByQuarter}
      />

      {/* Application Table */}
      <RiskBreakdown data={data} />
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Index.tsx ---
// Update this page (the content is just a fallback if you fail to update the page)
import { motion } from "framer-motion";

const Index = () => {
  return (
    <motion.div
      className="min-h-dvh flex items-center justify-center bg-background"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="text-center">
        <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-lg sm:text-xl text-muted-foreground">Start building your amazing project here!</p>
      </div>
    </motion.div>
  );
};

export default Index;


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\integration.tsx ---
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle,
} from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import {
  ArrowLeft, Github, GitBranch, Settings, Wrench, 
  MessageSquare, Code, Play, Zap, FileText,
  Shield, Users, Key, Activity, Trash2,
  RefreshCw, FolderOpen, Edit3, Upload,
  Bug, Workflow, Bell, Brain, Sliders,
  Eye, BarChart3, Clock, CheckCircle
} from 'lucide-react'
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid,
  Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell
} from 'recharts'

export default function EnhancedDashboard() {
  const [expandedCard, setExpandedCard] = useState(null)
  const [permissions, setPermissions] = useState({
    read: true,
    write: false,
    manage: false
  })

  const handleCardClick = (id) => {
    setExpandedCard(prev => (prev === id ? null : id))
  }

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      setExpandedCard(null)
    }
  }

  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setExpandedCard(null)
      }
    }
    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [])

  const integrationHistory = [
    { app: 'GitHub', action: 'Pushed Code', user: 'Bottu Teja Sai', timestamp: '2025-08-05 23:45', details: 'Commit fix: auth bug to main' },
    { app: 'Jira', action: 'Created Issue', user: 'System Bot', timestamp: '2025-08-05 23:20', details: 'Bug: "Login fails on Firefox"' },
    { app: 'ServiceNow', action: 'Updated Incident', user: 'AdminUser1', timestamp: '2025-08-05 22:50', details: 'Changed status to "Resolved"' },
    { app: 'OpenAI', action: 'Modified Prompt', user: 'TejaGPT', timestamp: '2025-08-05 22:30', details: 'Prompt used for summarization' },
    { app: 'Bitbucket', action: 'Synced Repo', user: 'DevOps Script', timestamp: '2025-08-05 21:10', details: 'Synced develop branch' },
    { app: 'VSCode', action: 'Edited Config', user: 'Bottu Teja Sai', timestamp: '2025-08-05 20:40', details: '.env updated for API_KEY' }
  ]

  const usageData = [
    { name: 'Mon', requests: 45, tokens: 1200 },
    { name: 'Tue', requests: 52, tokens: 1400 },
    { name: 'Wed', requests: 38, tokens: 950 },
    { name: 'Thu', requests: 61, tokens: 1650 },
    { name: 'Fri', requests: 48, tokens: 1300 },
    { name: 'Sat', requests: 33, tokens: 800 },
    { name: 'Sun', requests: 29, tokens: 720 }
  ]

  const pieData = [
    { name: 'Active', value: 65, color: '#10B981' },
    { name: 'Pending', value: 25, color: '#F59E0B' },
    { name: 'Error', value: 10, color: '#EF4444' }
  ]

  const cards = [
    {
      id: 'github',
      title: 'GitHub',
      description: 'Git repository management and collaboration',
      icon: <Github className="h-6 w-6" />,
      color: 'bg-gray-800',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'bitbucket',
      title: 'Bitbucket',
      description: 'Atlassian Git solution for teams',
      icon: <GitBranch className="h-6 w-6" />,
      color: 'bg-blue-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'servicenow',
      title: 'ServiceNow',
      description: 'IT service management platform',
      icon: <Settings className="h-6 w-6" />,
      color: 'bg-green-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'jira',
      title: 'Jira', 
      description: 'Issue and project tracking',
      icon: <Bug className="h-6 w-6" />,
      color: 'bg-blue-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'claude',
      title: 'Claude',
      description: 'AI assistant for development tasks',
      icon: <MessageSquare className="h-6 w-6" />,
      color: 'bg-orange-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'openai',
      title: 'OpenAI',
      description: 'GPT models and AI capabilities',
      icon: <Brain className="h-6 w-6" />,
      color: 'bg-green-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'intellij',
      title: 'IntelliJ IDEA',
      description: 'Integrated development environment',
      icon: <Code className="h-6 w-6" />,
      color: 'bg-red-500',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'vscode',
      title: 'VS Code',
      description: 'Lightweight code editor',
      icon: <Edit3 className="h-6 w-6" />,
      color: 'bg-blue-400',
      status: 'Connected',
      statusColor: 'bg-green-500'
    },
    {
      id: 'visualstudio',
      title: 'Visual Studio',
      description: 'Full-featured IDE for .NET development',
      icon: <Wrench className="h-6 w-6" />,
      color: 'bg-purple-600',
      status: 'Connected',
      statusColor: 'bg-green-500'
    }
  ]

  const renderExpandedContent = (cardId) => {
    const commonTabs = (
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="permissions">Permissions</TabsTrigger>
          <TabsTrigger value="actions">Actions</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="p-4 bg-muted rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="font-medium">Integration Status</span>
              </div>
              <p className="text-sm text-muted-foreground">Active since March 2024</p>
            </div>
            <div className="p-4 bg-muted rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="h-4 w-4 text-blue-500" />
                <span className="font-medium">Last Sync</span>
              </div>
              <p className="text-sm text-muted-foreground">2 minutes ago</p>
            </div>
          </div>
          
          {(cardId === 'openai' || cardId === 'claude') && (
            <div className="mt-4">
              <h4 className="font-medium mb-2">Usage Statistics</h4>
              <ResponsiveContainer width="100%" height={200}>
                <BarChart data={usageData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="requests" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          )}
        </TabsContent>

        <TabsContent value="permissions" className="space-y-4">
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Read Access</label>
                <p className="text-xs text-muted-foreground">View repositories and files</p>
              </div>
              <Switch 
                checked={permissions.read} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, read: checked}))}
              />
            </div>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Write Access</label>
                <p className="text-xs text-muted-foreground">Modify files and create commits</p>
              </div>
              <Switch 
                checked={permissions.write} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, write: checked}))}
              />
            </div>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
              <div>
                <label className="text-sm font-medium">Manage Access</label>
                <p className="text-xs text-muted-foreground">Admin controls and settings</p>
              </div>
              <Switch 
                checked={permissions.manage} 
                onCheckedChange={(checked) => setPermissions(prev => ({...prev, manage: checked}))}
              />
            </div>
          </div>
        </TabsContent>

        <TabsContent value="actions" className="space-y-4">
          {renderActionButtons(cardId)}
        </TabsContent>

        <TabsContent value="logs" className="space-y-4">
          <div className="max-h-64 overflow-y-auto space-y-2">
            {integrationHistory
              .filter(item => item.app.toLowerCase() === cardId.toLowerCase() || 
                       (cardId === 'github' && item.app === 'GitHub') ||
                       (cardId === 'vscode' && item.app === 'VSCode') ||
                       (cardId === 'openai' && item.app === 'OpenAI'))
              .map((item, index) => (
              <div key={index} className="p-3 bg-muted rounded-lg">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="font-medium text-sm">{item.action}</p>
                    <p className="text-xs text-muted-foreground">{item.details}</p>
                  </div>
                  <span className="text-xs text-muted-foreground">{item.timestamp}</span>
                </div>
              </div>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    )

    return (
      <div className="space-y-6">
        {commonTabs}
        
        <div className="border-t pt-4">
          <Button variant="destructive" size="sm" className="w-full">
            <Trash2 className="h-4 w-4 mr-2" />
            Disconnect Integration
          </Button>
        </div>
      </div>
    )
  }

  const renderActionButtons = (cardId) => {
    switch (cardId) {
      case 'github':
      case 'bitbucket':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Repositories
            </Button>
            <Button variant="outline" size="sm">
              <FolderOpen className="h-4 w-4 mr-2" />
              Open Repository
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Edit File
            </Button>
            <Button variant="outline" size="sm">
              <Upload className="h-4 w-4 mr-2" />
              Push Commit
            </Button>
          </div>
        )
      case 'servicenow':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Edit Incident Template
            </Button>
            <Button variant="outline" size="sm">
              <Workflow className="h-4 w-4 mr-2" />
              Modify Workflow
            </Button>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Records
            </Button>
            <Button variant="outline" size="sm">
              <Bell className="h-4 w-4 mr-2" />
              Create Incident
            </Button>
          </div>
        )
      case 'jira':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Bug className="h-4 w-4 mr-2" />
              Create Issue
            </Button>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Sync Sprints
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Modify Template
            </Button>
            <Button variant="outline" size="sm">
              <Workflow className="h-4 w-4 mr-2" />
              Workflow Builder
            </Button>
          </div>
        )
      case 'claude':
      case 'openai':
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-3">
              <Button variant="outline" size="sm">
                <Edit3 className="h-4 w-4 mr-2" />
                Modify Prompt
              </Button>
              <Button variant="outline" size="sm">
                <Play className="h-4 w-4 mr-2" />
                Test Prompt
              </Button>
              <Button variant="outline" size="sm">
                <Sliders className="h-4 w-4 mr-2" />
                Configure Parameters
              </Button>
              <Button variant="outline" size="sm">
                <BarChart3 className="h-4 w-4 mr-2" />
                Usage Stats
              </Button>
            </div>
            <div className="p-4 bg-muted rounded-lg">
              <label className="text-sm font-medium mb-2 block">Test Prompt</label>
              <textarea 
                className="w-full h-20 p-2 text-sm border rounded resize-none"
                placeholder="Enter your prompt here..."
              />
              <Button size="sm" className="mt-2">
                <Play className="h-4 w-4 mr-2" />
                Test
              </Button>
            </div>
          </div>
        )
      case 'intellij':
      case 'vscode':
      case 'visualstudio':
        return (
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm">
              <Zap className="h-4 w-4 mr-2" />
              Manage Extensions
            </Button>
            <Button variant="outline" size="sm">
              <FolderOpen className="h-4 w-4 mr-2" />
              Browse Files
            </Button>
            <Button variant="outline" size="sm">
              <Edit3 className="h-4 w-4 mr-2" />
              Live Edit Code
            </Button>
            <Button variant="outline" size="sm">
              <Settings className="h-4 w-4 mr-2" />
              Configure Build
            </Button>
          </div>
        )
      default:
        return null
    }
  }

  return (
    <motion.div
      className="min-h-screen bg-background"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="p-4 sm:p-6">
        <h1 className="text-3xl sm:text-4xl font-bold text-center mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Integration Dashboard
        </h1>
        
        {/* Cards Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6 mb-12">
          {cards.map(card => (
            <Card
              key={card.id}
              onClick={() => handleCardClick(card.id)}
              className="cursor-pointer transition-all duration-200 hover:scale-105 hover:shadow-lg border-2 hover:border-primary/50"
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className={`p-3 rounded-full text-white ${card.color}`}>
                    {card.icon}
                  </div>
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${card.statusColor}`}></div>
                    <Badge variant="secondary" className="text-xs">{card.status}</Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <CardTitle className="text-lg mb-2">{card.title}</CardTitle>
                <CardDescription className="text-sm">{card.description}</CardDescription>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Integration History Table */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold mb-6">Integration History</h2>
          <div className="border rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="hidden bg-muted md:table-header-group">
                  <tr className="border-b">
                    <th className="text-left p-3 px-4 font-medium">Application</th>
                    <th className="text-left p-3 px-4 font-medium">Action Taken</th>
                    <th className="text-left p-3 px-4 font-medium">Modified By</th>
                    <th className="text-left p-3 px-4 font-medium">Timestamp</th>
                    <th className="text-left p-3 px-4 font-medium">Details / Summary</th>
                  </tr>
                </thead>
                <tbody>
                  {integrationHistory.map((item, index) => (
                    <tr key={index} className="block md:table-row border-b hover:bg-muted/50">
                      <td className="p-4 font-medium md:table-cell" data-label="Application">{item.app}</td>
                      <td className="p-4 md:table-cell" data-label="Action Taken">{item.action}</td>
                      <td className="p-4 md:table-cell" data-label="Modified By">{item.user}</td>
                      <td className="p-4 text-sm text-muted-foreground md:table-cell" data-label="Timestamp">{item.timestamp}</td>
                      <td className="p-4 text-sm md:table-cell" data-label="Details / Summary">{item.details}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Expanded Card Modal */}
      <AnimatePresence>
        {expandedCard && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={handleOverlayClick}
          >
            <motion.div
              initial={{ scale: 0.95, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.95, y: 20, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="bg-background rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Modal Header */}
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:p-6 border-b gap-4">
                <div className="flex items-center gap-4">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setExpandedCard(null)}
                    className="hover:bg-muted"
                  >
                    <ArrowLeft className="h-4 w-4" />
                  </Button>
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-full text-white ${cards.find(c => c.id === expandedCard)?.color}`}>
                      {cards.find(c => c.id === expandedCard)?.icon}
                    </div>
                    <div>
                      <h2 className="text-xl font-bold">
                        {cards.find(c => c.id === expandedCard)?.title}
                      </h2>
                      <p className="text-sm text-muted-foreground">
                        {cards.find(c => c.id === expandedCard)?.description}
                      </p>
                    </div>
                  </div>
                </div>
                <Badge variant="secondary">Connected</Badge>
              </div>

              {/* Modal Content */}
              <div className="p-4 sm:p-6 max-h-[calc(90vh-140px)] overflow-y-auto">
                {renderExpandedContent(expandedCard)}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  )
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\migrationassist.tsx ---
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle,
} from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { 
  Copy, Shield, AlertTriangle, Code, ArrowLeft, 
  Calendar, Users, CheckCircle, Clock,
  Key, FileSignature, BarChart3, Target
} from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts'

const codeExamples = {
  kem_examples: {
    vulnerable: {
      description: "RSA-based Key Encapsulation Mechanism vulnerable to quantum attacks via Shor's algorithm",
      code: `from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import os

def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def rsa_kem_encapsulate(public_key):
    symmetric_key = os.urandom(32)  # 256-bit key
    encrypted_symmetric_key = public_key.encrypt(
        symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted_symmetric_key, symmetric_key

def rsa_kem_decapsulate(private_key, encrypted_symmetric_key):
    decrypted_symmetric_key = private_key.decrypt(
        encrypted_symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_symmetric_key`,
      vulnerability: `RSA-KEM relies on integer factorization, which Shor's algorithm can efficiently solve on quantum computers.`,
      performance: {
        keySize: '256 bytes (public key)',
        ciphertextSize: '256 bytes',
        encryptionTime: '~100,000 cycles',
        decryptionTime: '~100,000 cycles',
      },
    },
    pqc_compliant: {
      description: 'Lattice-based Key Encapsulation Mechanism resistant to quantum attacks',
      code: `# Conceptual Kyber implementation (requires PQC library)
class KyberKEM:
    def __init__(self, security_level="Kyber768"):
        print(f"Initializing CRYSTALS-Kyber KEM with {security_level} security level.")

    def generate_key_pair(self):
        public_key = b"kyber_public_key_bytes"
        secret_key = b"kyber_secret_key_bytes"
        return public_key, secret_key

    def encapsulate(self, public_key):
        ciphertext = b"kyber_ciphertext_bytes"
        shared_secret = b"kyber_shared_secret_bytes"
        return ciphertext, shared_secret

    def decapsulate(self, ciphertext, secret_key):
        shared_secret = b"kyber_recovered_shared_secret_bytes"
        return shared_secret

kyber_kem = KyberKEM("Kyber768")
pk, sk = kyber_kem.generate_key_pair()
ct, ss_sender = kyber_kem.encapsulate(pk)
ss_receiver = kyber_kem.decapsulate(ct, sk)`,
      security: 'Based on Module-LWE problem, believed to be resistant to quantum attacks.',
      performance: {
        keySize: '1184 bytes (public key)',
        ciphertextSize: '1088 bytes',
        encapsulationTime: '67,624 cycles (AVX2)',
        decapsulationTime: '53,156 cycles (AVX2)',
      },
    },
  },
}

const migrationData = {
  steps: [
    { phase: 'Assessment', description: 'Inventory current cryptographic systems', status: 'complete', timeline: 'Q1 2024' },
    { phase: 'Planning', description: 'Develop migration roadmap', status: 'complete', timeline: 'Q2 2024' },
    { phase: 'Pilot Testing', description: 'Test PQC algorithms in controlled environments', status: 'in-progress', timeline: 'Q3-Q4 2024' },
    { phase: 'Hybrid Implementation', description: 'Deploy hybrid classical+PQC solutions', status: 'pending', timeline: 'Q1-Q2 2025' },
    { phase: 'Full Migration', description: 'Complete transition to PQC', status: 'pending', timeline: 'Q3-Q4 2025' },
  ],
  timeline: [
    { year: '2024', threat: 'Low', quantum: 5, classical: 95 },
    { year: '2025', threat: 'Low-Medium', quantum: 15, classical: 85 },
    { year: '2030', threat: 'Medium', quantum: 40, classical: 60 },
    { year: '2035', threat: 'High', quantum: 70, classical: 30 },
    { year: '2040', threat: 'Critical', quantum: 90, classical: 10 },
  ],
  challenges: [
    { category: 'Technical', items: ['Larger key sizes', 'Performance impact', 'Integration complexity'] },
    { category: 'Operational', items: ['Staff training', 'Legacy system compatibility', 'Cost management'] },
    { category: 'Standards', items: ['Evolving standards', 'Certification processes', 'Interoperability'] },
  ],
  practices: [
    'Start with hybrid implementations',
    'Prioritize high-value assets',
    'Implement crypto-agility',
    'Regular security assessments',
    'Staff training programs',
    'Vendor engagement',
  ]
}

const performanceData = {
  comparison_data: {
    key_sizes: [
      { algorithm: 'RSA-KEM', publicKey: 256, signature: 256 },
      { algorithm: 'CRYSTALS-Kyber', publicKey: 1184, signature: 1088 },
      { algorithm: 'ECDSA', publicKey: 64, signature: 70 },
      { algorithm: 'CRYSTALS-Dilithium', publicKey: 1952, signature: 3293 },
    ],
    security_levels: [
      { algorithm: 'RSA-KEM', classicalSecurity: 112, quantumSecurity: 0 },
      { algorithm: 'CRYSTALS-Kyber', classicalSecurity: 128, quantumSecurity: 128 },
      { algorithm: 'ECDSA', classicalSecurity: 128, quantumSecurity: 0 },
      { algorithm: 'CRYSTALS-Dilithium', classicalSecurity: 128, quantumSecurity: 128 },
    ],
  },
}

function copyToClipboard(code) {
  navigator.clipboard.writeText(code)
}

export default function PQCDashboard() {
  const [expandedCard, setExpandedCard] = useState(null)

  const cards = [
    {
      id: 'migration',
      title: 'Migration Steps',
      description: 'Comprehensive roadmap for PQC adoption',
      icon: <Target className="h-6 w-6" />,
      color: 'bg-blue-500 dark:bg-blue-600',
      content: 'migration'
    },
    {
      id: 'timeline',
      title: 'Threat Timeline',
      description: 'Quantum threat evolution and impact assessment',
      icon: <Calendar className="h-6 w-6" />,
      color: 'bg-orange-500 dark:bg-orange-600',
      content: 'timeline'
    },
    {
      id: 'challenges',
      title: 'Challenges',
      description: 'Key obstacles in PQC implementation',
      icon: <AlertTriangle className="h-6 w-6" />,
      color: 'bg-red-500 dark:bg-red-600',
      content: 'challenges'
    },
    {
      id: 'practices',
      title: 'Best Practices',
      description: 'Proven strategies for successful migration',
      icon: <CheckCircle className="h-6 w-6" />,
      color: 'bg-green-500 dark:bg-green-600',
      content: 'practices'
    },
    {
      id: 'kem',
      title: 'Key Encapsulation (KEM)',
      description: 'Compare RSA-KEM vs CRYSTALS-Kyber',
      icon: <Key className="h-6 w-6" />,
      color: 'bg-purple-500 dark:bg-purple-600',
      content: 'kem'
    },
    {
      id: 'signatures',
      title: 'Digital Signatures',
      description: 'ECDSA vs CRYSTALS-Dilithium comparison',
      icon: <FileSignature className="h-6 w-6" />,
      color: 'bg-indigo-500 dark:bg-indigo-600',
      content: 'signatures'
    },
    {
      id: 'performance',
      title: 'Performance Analysis',
      description: 'Comprehensive performance metrics and charts',
      icon: <BarChart3 className="h-6 w-6" />,
      color: 'bg-teal-500 dark:bg-teal-600',
      content: 'performance'
    }
  ]

  const renderExpandedContent = () => {
    const card = cards.find(c => c.id === expandedCard)
    if (!card) return null

    switch (card.content) {
      case 'migration':
        return (
          <div className="space-y-6">
            <div className="grid gap-4">
              {migrationData.steps.map((step, index) => (
                <Card key={index} className="p-4 border border-border bg-card">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className={`w-3 h-3 rounded-full ${
                        step.status === 'complete' ? 'bg-green-500' :
                        step.status === 'in-progress' ? 'bg-yellow-500' : 'bg-muted'
                      }`} />
                      <div>
                        <h3 className="font-semibold text-foreground">{step.phase}</h3>
                        <p className="text-sm text-muted-foreground">{step.description}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <Badge variant={
                        step.status === 'complete' ? 'default' :
                        step.status === 'in-progress' ? 'secondary' : 'outline'
                      }>
                        {step.status}
                      </Badge>
                      <p className="text-xs text-muted-foreground mt-1">{step.timeline}</p>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )

      case 'timeline':
        return (
          <div className="space-y-6">
            <ResponsiveContainer width="100%" height={400}>
              <LineChart data={migrationData.timeline}>
                <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                <XAxis dataKey="year" />
                <YAxis />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: '6px',
                    color: 'hsl(var(--foreground))'
                  }}
                />
                <Line type="monotone" dataKey="quantum" stroke="#ff6b6b" strokeWidth={3} name="Quantum Threat %" />
                <Line type="monotone" dataKey="classical" stroke="#4ecdc4" strokeWidth={3} name="Classical Security %" />
              </LineChart>
            </ResponsiveContainer>
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {migrationData.timeline.map((item, index) => (
                <Card key={index} className="p-4 text-center bg-card border-border">
                  <h3 className="font-bold text-lg text-foreground">{item.year}</h3>
                  <Badge className={`mt-2 ${
                    item.threat === 'Low' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                    item.threat === 'Low-Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                    item.threat === 'Medium' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' :
                    item.threat === 'High' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :
                    'bg-red-500 text-white dark:bg-red-600'
                  }`}>
                    {item.threat}
                  </Badge>
                </Card>
              ))}
            </div>
          </div>
        )

      case 'challenges':
        return (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {migrationData.challenges.map((challenge, index) => (
              <Card key={index} className="p-6 bg-card border-border">
                <h3 className="font-bold text-lg mb-4 text-center text-foreground">{challenge.category}</h3>
                <ul className="space-y-2">
                  {challenge.items.map((item, idx) => (
                    <li key={idx} className="flex items-center space-x-2">
                      <AlertTriangle className="h-4 w-4 text-orange-500" />
                      <span className="text-sm text-foreground">{item}</span>
                    </li>
                  ))}
                </ul>
              </Card>
            ))}
          </div>
        )

      case 'practices':
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {migrationData.practices.map((practice, index) => (
              <Card key={index} className="p-4 hover:shadow-md transition-shadow bg-card border-border">
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="font-medium text-foreground">{practice}</span>
                </div>
              </Card>
            ))}
          </div>
        )

      case 'kem':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* RSA-KEM */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <AlertTriangle className="h-5 w-5 text-red-500" />
                      <span>RSA-KEM (Vulnerable)</span>
                    </CardTitle>
                    <Badge variant="destructive">Quantum Vulnerable</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">{codeExamples.kem_examples.vulnerable.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(codeExamples.kem_examples.vulnerable.code)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{codeExamples.kem_examples.vulnerable.code}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-red-600 dark:text-red-400">Vulnerability:</h4>
                    <p>{codeExamples.kem_examples.vulnerable.vulnerability}</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    {Object.entries(codeExamples.kem_examples.vulnerable.performance).map(([k, v]) => (
                      <div key={k}>
                        <span className="font-medium">{k.replace(/([A-Z])/g, ' $1')}: </span>{v}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Kyber PQC */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <Shield className="h-5 w-5 text-green-500" />
                      <span>CRYSTALS-Kyber (PQC)</span>
                    </CardTitle>
                    <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Quantum Resistant</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">{codeExamples.kem_examples.pqc_compliant.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(codeExamples.kem_examples.pqc_compliant.code)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{codeExamples.kem_examples.pqc_compliant.code}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-green-600 dark:text-green-400">Security:</h4>
                    <p>{codeExamples.kem_examples.pqc_compliant.security}</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    {Object.entries(codeExamples.kem_examples.pqc_compliant.performance).map(([k, v]) => (
                      <div key={k}>
                        <span className="font-medium">{k.replace(/([A-Z])/g, ' $1')}: </span>{v}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      case 'signatures':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ECDSA Vulnerable Card */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <AlertTriangle className="h-5 w-5 text-red-500" />
                      <span>ECDSA (Vulnerable)</span>
                    </CardTitle>
                    <Badge variant="destructive">Quantum Vulnerable</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">
                    Elliptic Curve Digital Signature Algorithm vulnerable to quantum attacks via Shor's algorithm.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(`from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_ecdsa_key_pair():
    private_key = ec.generate_private_key(
        ec.SECP256R1(),  # A common elliptic curve
        default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def ecdsa_sign(private_key, message):
    signature = private_key.sign(
        message,
        ec.ECDSA(hashes.SHA256())
    )
    return signature

def ecdsa_verify(public_key, message, signature):
    try:
        public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))
        return True
    except Exception:
        return False

# Usage example
private_key, public_key = generate_ecdsa_key_pair()
message = b"This is a test message"
signature = ecdsa_sign(private_key, message)
is_valid = ecdsa_verify(public_key, message, signature)`)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{`from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_ecdsa_key_pair():
    private_key = ec.generate_private_key(
        ec.SECP256R1(),  # A common elliptic curve
        default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

def ecdsa_sign(private_key, message):
    signature = private_key.sign(
        message,
        ec.ECDSA(hashes.SHA256())
    )
    return signature

def ecdsa_verify(public_key, message, signature):
    try:
        public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))
        return True
    except Exception:
        return False

# Usage example
private_key, public_key = generate_ecdsa_key_pair()
message = b"This is a test message"
signature = ecdsa_sign(private_key, message)
is_valid = ecdsa_verify(public_key, message, signature)`}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-red-600 dark:text-red-400">Vulnerability:</h4>
                    <p>ECDSA relies on the ECDLP, which Shor's algorithm can efficiently solve, allowing signature forgery.</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    <div><strong>Key Size:</strong> 64 bytes</div>
                    <div><strong>Signature:</strong> 64-72 bytes</div>
                    <div><strong>Signing:</strong> ~10,000 cycles</div>
                    <div><strong>Verification:</strong> ~10,000 cycles</div>
                  </div>
                </CardContent>
              </Card>

              {/* Dilithium PQC Card */}
              <Card className="bg-card border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2 text-foreground">
                      <Shield className="h-5 w-5 text-green-500" />
                      <span>CRYSTALS-Dilithium (PQC)</span>
                    </CardTitle>
                    <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Quantum Resistant</Badge>
                  </div>
                  <CardDescription className="text-muted-foreground">Lattice-based Digital Signature Algorithm resistant to quantum attacks.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg relative">
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(`# Conceptual Dilithium implementation
class DilithiumSignature:
    def __init__(self, security_level="Dilithium3"):
        print(f"Initializing CRYSTALS-Dilithium with {security_level} security level.")

    def generate_key_pair(self):
        # In real implementation, calls Dilithium key generation
        public_key = b"dilithium_public_key_bytes"
        secret_key = b"dilithium_secret_key_bytes"
        return public_key, secret_key

    def sign(self, message, secret_key):
        # In real implementation, calls Dilithium signing
        signature = b"dilithium_signature_bytes"
        return signature

    def verify(self, message, signature, public_key):
        # In real implementation, calls Dilithium verification
        return True  # Placeholder

# Usage example
dilithium_signer = DilithiumSignature("Dilithium3")
pk, sk = dilithium_signer.generate_key_pair()
message = b"This is a test message"
signature = dilithium_signer.sign(message, sk)
is_valid = dilithium_signer.verify(message, signature, pk)`)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap text-foreground">
                      <code>{`# Conceptual Dilithium implementation (requires PQC library)
class DilithiumSignature:
    def __init__(self, security_level="Dilithium3"):
        print(f"Initializing CRYSTALS-Dilithium with {security_level} security level.")

    def generate_key_pair(self):
        # In real implementation, calls Dilithium key generation
        public_key = b"dilithium_public_key_bytes"
        secret_key = b"dilithium_secret_key_bytes"
        return public_key, secret_key

    def sign(self, message, secret_key):
        # In real implementation, calls Dilithium signing
        signature = b"dilithium_signature_bytes"
        return signature

    def verify(self, message, signature, public_key):
        # In real implementation, calls Dilithium verification
        return True  # Placeholder

# Usage example
dilithium_signer = DilithiumSignature("Dilithium3")
pk, sk = dilithium_signer.generate_key_pair()
message = b"This is a test message"
signature = dilithium_signer.sign(message, sk)
is_valid = dilithium_signer.verify(message, signature, pk)`}</code>
                    </pre>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <h4 className="font-semibold text-green-600 dark:text-green-400">Security:</h4>
                    <p>Based on SIS/LWE problems, believed to be quantum-resistant with no known efficient quantum attacks.</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-foreground">
                    <div><strong>Key Size:</strong> 1952 bytes</div>
                    <div><strong>Signature:</strong> 3293 bytes</div>
                    <div><strong>Signing:</strong> 529,106 cycles (AVX2)</div>
                    <div><strong>Verification:</strong> 179,424 cycles (AVX2)</div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      case 'performance':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-card border-border">
                <CardHeader>
                  <CardTitle className="text-foreground">Key Size Comparison</CardTitle>
                  <CardDescription className="text-muted-foreground">Comparison of key sizes between classical and PQC algorithms</CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={performanceData.comparison_data.key_sizes}>
                      <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                      <XAxis dataKey="algorithm" angle={-45} textAnchor="end" height={100} />
                      <YAxis />
                      <Tooltip 
                        formatter={(value) => [`${value} bytes`, 'Size']} 
                        contentStyle={{
                          backgroundColor: 'hsl(var(--card))',
                          border: '1px solid hsl(var(--border))',
                          borderRadius: '6px',
                          color: 'hsl(var(--foreground))'
                        }}
                      />
                      <Bar dataKey="publicKey" fill="#8884d8" name="Public Key" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              <Card className="bg-card border-border">
                <CardHeader>
                  <CardTitle className="text-foreground">Security Level Comparison</CardTitle>
                  <CardDescription className="text-muted-foreground">Classical vs Quantum security levels</CardDescription>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={performanceData.comparison_data.security_levels}>
                      <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                      <XAxis dataKey="algorithm" angle={-45} textAnchor="end" height={100} />
                      <YAxis />
                      <Tooltip 
                        contentStyle={{
                          backgroundColor: 'hsl(var(--card))',
                          border: '1px solid hsl(var(--border))',
                          borderRadius: '6px',
                          color: 'hsl(var(--foreground))'
                        }}
                      />
                      <Bar dataKey="classicalSecurity" fill="#ff7300" name="Classical Security" />
                      <Bar dataKey="quantumSecurity" fill="#00ff00" name="Quantum Security" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>

            <Card className="bg-card border-border">
              <CardHeader>
                <CardTitle className="text-foreground">Performance Analysis Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Size Impact:</h4>
                    <p className="text-sm text-muted-foreground">Post-quantum algorithms tend to have larger key and ciphertext sizes.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Performance Impact:</h4>
                    <p className="text-sm text-muted-foreground">Some post-quantum algorithms require more CPU cycles but remain practical.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Security Benefit:</h4>
                    <p className="text-sm text-muted-foreground">Quantum-resistant algorithms offer long-term security against quantum attacks.</p>
                  </div>
                  <div className="space-y-2">
                    <h4 className="font-semibold text-foreground">Recommendations:</h4>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      <li>â€¢ Adopt hybrid classical + PQC mechanisms during transition.</li>
                      <li>â€¢ Use PQC for high-value data today.</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )

      default:
        return null
    }
  }

  if (expandedCard) {
    return (
      <motion.div
        className="min-h-screen bg-background p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
      >
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center space-x-4 mb-6">
            <Button
              variant="outline"
              onClick={() => setExpandedCard(null)}
              className="flex items-center space-x-2"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div className="flex items-center space-x-2">
              <div className={`p-2 rounded-lg text-white ${cards.find(c => c.id === expandedCard)?.color}`}>
                {cards.find(c => c.id === expandedCard)?.icon}
              </div>
              <div>
                <h1 className="text-3xl font-bold text-foreground">{cards.find(c => c.id === expandedCard)?.title}</h1>
                <p className="text-muted-foreground">{cards.find(c => c.id === expandedCard)?.description}</p>
              </div>
            </div>
          </div>
          <div className="bg-card rounded-lg shadow-sm p-6 border border-border">
            {renderExpandedContent()}
          </div>
        </div>
      </motion.div>
    )
  }

  return (
    <motion.div
      className="min-h-screen bg-background p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <h1 className="text-4xl font-bold text-foreground">Migration assist</h1>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {cards.map((card) => (
            <Card
              key={card.id}
              className="group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-xl border-0 bg-card"
              onClick={() => setExpandedCard(card.id)}
            >
              <CardContent className="p-6">
                <div className="flex flex-col items-center text-center space-y-4">
                  <div className={`p-4 rounded-full text-white ${card.color} group-hover:scale-110 transition-transform duration-300`}>
                    {card.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-foreground mb-2">{card.title}</h3>
                    <p className="text-sm text-muted-foreground">{card.description}</p>
                  </div>
                  <div className="w-full pt-4 border-t border-border">
                    <div className="flex items-center justify-center text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300">
                      <span className="text-sm font-medium mr-2">Explore</span>
                      <ArrowLeft className="h-4 w-4 rotate-180 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="mt-16 bg-card rounded-lg shadow-sm p-8 border border-border">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-foreground mb-4">Quick Overview</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="bg-red-100 dark:bg-red-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <AlertTriangle className="h-8 w-8 text-red-600 dark:text-red-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">Quantum Threat</h3>
                <p className="text-sm text-muted-foreground">Current cryptographic systems will be vulnerable to quantum computers</p>
              </div>
              <div className="text-center">
                <div className="bg-blue-100 dark:bg-blue-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <Clock className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">Migration Timeline</h3>
                <p className="text-sm text-muted-foreground">Organizations need to start planning and implementing PQC now</p>
              </div>
              <div className="text-center">
                <div className="bg-green-100 dark:bg-green-900/30 p-3 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
                  <Shield className="h-8 w-8 text-green-600 dark:text-green-400" />
                </div>
                <h3 className="font-semibold mb-2 text-foreground">PQC Solution</h3>
                <p className="text-sm text-muted-foreground">New algorithms designed to resist both classical and quantum attacks</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\NotFound.tsx ---
import { Link, useLocation } from "react-router-dom";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <motion.div
      className="min-h-dvh flex flex-col items-center justify-center bg-background text-center p-4"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      transition={{ duration: 0.3 }}
    >
      <h1 className="text-6xl sm:text-8xl font-bold text-primary">404</h1>
      <h2 className="mt-4 text-2xl sm:text-3xl font-semibold text-foreground">Page Not Found</h2>
      <p className="mt-2 text-base text-muted-foreground">
        Sorry, we couldn't find the page you're looking for.
      </p>
      <Button asChild className="mt-6">
        <Link to="/">Return to Home</Link>
      </Button>
    </motion.div>
  );
};

export default NotFound;


--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Profile.tsx ---
import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Save, RotateCcw, ArrowLeft, Library, LayoutGrid, ArrowRight } from "lucide-react";
import { CryptoTable, CryptoAlgorithm, ColumnDef } from "@/components/profile/crypto table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import Applications from "@/components/profile/applications";

// Types for API data
interface ApiCryptoAlgorithm {
  Section: string;
  Algorithm_Name: string;
  Variant: string;
  Purpose: string;
  Usage_Context: string;
  Status_Today: string;
  PQC_Status: string;
  Priority: string;
  Classical_Recommended: string;
  Quantum_Recommended: string;
  NIST_Reference: string;
  Notes: string;
}

// API configuration - centralized backend URLs
const API_CONFIG = {
  cryptoApi: "https://backend-1-v77y.onrender.com/api",
};

// API fetching and data processing
const fetchDataFromAPI = async (): Promise<ApiCryptoAlgorithm[]> => {
  try {
    const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    const result = await response.json();
    console.log('âœ… API data fetched successfully');
    return result.data || [];
  } catch (error) {
    console.error('âŒ Failed to fetch data from API:', error);
    return [];
  }
};

const transformApiData = (apiData: ApiCryptoAlgorithm[]): CryptoAlgorithm[] => {
  return apiData.map((item, index) => ({
    id: `${item.Algorithm_Name}-${index}`,
    algorithm_name: item.Algorithm_Name,
    variant: item.Variant,
    purpose: item.Purpose,
    usage_context: item.Usage_Context ? item.Usage_Context.split(',').map(s => s.trim()) : [],
    status_today: item.Status_Today,
    pqc_status: item.PQC_Status,
    priority: item.Priority,
    classical_recommended: item.Classical_Recommended,
    quantum_recommended: item.Quantum_Recommended,
    nist_reference: item.NIST_Reference ? item.NIST_Reference.split(',').map(s => s.trim()) : [],
    notes: item.Notes,
    section: item.Section,
    visible: false,
  }));
};

const categorizeApiData = (transformedData: CryptoAlgorithm[]) => {
  const categories: { [key: string]: CryptoAlgorithm[] } = {
    symmetric: [],
    asymmetric: [],
    hash: [],
    mac_kdf: [],
    pqc: [],
  };
  
  const keywordMap = {
    pqc: ['kyber', 'dilithium', 'falcon', 'sphincs', 'ntru', 'bike'],
    mac_kdf: ['hmac', 'cmac', 'pbkdf2', 'hkdf', 'argon', 'bcrypt', 'scrypt', 'gcm', 'ccm', 'chacha20', 'poly1305'],
    asymmetric: ['rsa', 'ecc', 'dsa', 'diffie-hellman', 'x25519', 'ed25519'],
    hash: ['sha', 'md5'],
    symmetric: ['aes', 'des', 'rc4', 'rc5', 'blowfish', 'camellia', 'seed'],
  };  

  transformedData.forEach(item => {
    const section = item.section?.toLowerCase() || '';
    if (section.includes('asymmetric')) {
      categories.asymmetric.push(item);
    } else if (section.includes('symmetric')) {
      categories.symmetric.push(item);
    } else if (section.includes('hash')) {
      categories.hash.push(item);
    } else if (section.includes('mac') || section.includes('kdf')) {
      categories.mac_kdf.push(item);
    } else if (section.includes('post-quantum')) {
      categories.pqc.push(item);
    } else {
      const name = item.algorithm_name.toLowerCase();
      let found = false;
      for (const category in keywordMap) {
        if (keywordMap[category].some(keyword => name.includes(keyword))) {
          categories[category as keyof typeof categories].push(item);
          found = true;
          break;
        }
      }
      if (!found) {
        console.warn(`Could not categorize: ${item.algorithm_name}`);
      }
    }
  });

  return categories;
};

const commonColumns: ColumnDef[] = [
  { key: "algorithm_name", header: "Algorithm" },
  { key: "variant", header: "Variant" },
  { key: "purpose", header: "Purpose" },
  { key: "priority", header: "Priority" },
  { key: "usage_context", header: "Usage Context" },
  { key: "status_today", header: "Status" },
  { key: "pqc_status", header: "PQC Status" },
  { key: "notes", header: "Notes" },
];

const fetchCryptographicProfiles = async () => {
  const response = await fetch(`${API_CONFIG.cryptoApi}/apps4`);
  if (!response.ok) throw new Error('Network response was not ok');
  return response.json();
};

type ViewType = 'dashboard' | 'tables' | 'applications';

const Profile = () => {
  const [symmetricData, setSymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [asymmetricData, setAsymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [hashData, setHashData] = useState<CryptoAlgorithm[]>([]);
  const [macKdfData, setMacKdfData] = useState<CryptoAlgorithm[]>([]);
  const [pqcData, setPqcData] = useState<CryptoAlgorithm[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [view, setView] = useState<ViewType>('dashboard');

  const [isSymmetricEdited, setIsSymmetricEdited] = useState(false);
  const [isAsymmetricEdited, setIsAsymmetricEdited] = useState(false);
  const [isHashEdited, setIsHashEdited] = useState(false);
  const [isMacKdfEdited, setIsMacKdfEdited] = useState(false);
  const [isPqcEdited, setIsPqcEdited] = useState(false);

  const initialCategorizedData = useRef<{ [key: string]: CryptoAlgorithm[] }>({});
  const [showApplications, setShowApplications] = useState(false);
  const [applicationsData, setApplicationsData] = useState<any>(null);
  const [applicationsLoading, setApplicationsLoading] = useState(false);
  const [applicationsError, setApplicationsError] = useState<string | null>(null);
  const [applicationsRefreshing, setApplicationsRefreshing] = useState(false);
  const [allAlgorithms, setAllAlgorithms] = useState<any[]>([]);
  const [allAlgorithmsLoading, setAllAlgorithmsLoading] = useState(true);
  const [allAlgorithmsError, setAllAlgorithmsError] = useState<string | null>(null);

  useEffect(() => {
    const initializeData = async () => {
      try {
        const apiData = await fetchDataFromAPI();
        const transformedData = transformApiData(apiData);
        const categorizedData = categorizeApiData(transformedData);

        const withVisible = (data: CryptoAlgorithm[], count: number) =>
          data.map((item, index) => ({ ...item, visible: index < count }));

        const initialSymmetric = withVisible(categorizedData.symmetric || [], 3);
        const initialAsymmetric = withVisible(categorizedData.asymmetric || [], 3);
        const initialHash = withVisible(categorizedData.hash || [], 3);
        const initialMacKdf = withVisible(categorizedData.mac_kdf || [], 3);
        const initialPqc = withVisible(categorizedData.pqc || [], 3);

        initialCategorizedData.current = { symmetric: initialSymmetric, asymmetric: initialAsymmetric, hash: initialHash, mac_kdf: initialMacKdf, pqc: initialPqc };

        setSymmetricData(initialSymmetric);
        setAsymmetricData(initialAsymmetric);
        setHashData(initialHash);
        setMacKdfData(initialMacKdf);
        setPqcData(initialPqc);

      } catch (error) {
        console.error('âŒ Error initializing profile data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeData();
  }, []);

  // Fetch applications data
  useEffect(() => {
    if (!showApplications) return;
    setApplicationsLoading(true);
    setApplicationsError(null);
    fetchCryptographicProfiles()
      .then((data) => {
        setApplicationsData(data);
        setApplicationsLoading(false);
      })
      .catch((err) => {
        setApplicationsError(err.message || "Failed to fetch applications");
        setApplicationsLoading(false);
      });
  }, [showApplications]);

  const fetchAllAlgorithms = async () => {
    try {
      const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
      if (!response.ok) throw new Error("Failed to fetch algorithms");
      const result = await response.json();
      setAllAlgorithms(result.data || []);
    } catch (err: any) {
      setAllAlgorithmsError(err.message || "Failed to fetch algorithms");
    } finally {
      setAllAlgorithmsLoading(false);
    }
  };

  useEffect(() => {
    fetchAllAlgorithms();
  }, []);

  const handleApplicationsRefresh = () => {
    setApplicationsRefreshing(true);
    fetchCryptographicProfiles()
      .then((data) => {
        setApplicationsData(data);
        setApplicationsRefreshing(false);
      })
      .catch((err) => {
        setApplicationsError(err.message || "Failed to fetch applications");
        setApplicationsRefreshing(false);
      });
  };

  const handleSaveChanges = () => {
    console.log("Saving all changes...");
    console.log("Symmetric:", symmetricData);
    console.log("Asymmetric:", asymmetricData);
    console.log("Hash:", hashData);
    console.log("MAC/KDF:", macKdfData);
    console.log("PQC:", pqcData);
  };

  const handleReset = () => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsSymmetricEdited(false);
    setIsAsymmetricEdited(false);
    setIsHashEdited(false);
    setIsMacKdfEdited(false);
    setIsPqcEdited(false);
    console.log("All tables reset to original state.");
  };

  const onSymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setSymmetricData(d);
    setIsSymmetricEdited(true);
  }, []);
  const onSymmetricReset = useCallback(() => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setIsSymmetricEdited(false);
  }, []);

  const onAsymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setAsymmetricData(d);
    setIsAsymmetricEdited(true);
  }, []);
  const onAsymmetricReset = useCallback(() => {
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setIsAsymmetricEdited(false);
  }, []);

  const onHashUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setHashData(d);
    setIsHashEdited(true);
  }, []);
  const onHashReset = useCallback(() => {
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setIsHashEdited(false);
  }, []);

  const onMacKdfUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setMacKdfData(d);
    setIsMacKdfEdited(true);
  }, []);
  const onMacKdfReset = useCallback(() => {
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setIsMacKdfEdited(false);
  }, []);

  const onPqcUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setPqcData(d);
    setIsPqcEdited(true);
  }, []);
  const onPqcReset = useCallback(() => {
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsPqcEdited(false);
  }, []);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <p>Loading Admin Page...</p>
        </div>
      </div>
    );
  }

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  return (
    <AnimatePresence mode="wait">
      {view === 'applications' ? (
        <Applications
          data={applicationsData}
          isLoading={applicationsLoading || allAlgorithmsLoading}
          error={applicationsError || allAlgorithmsError}
          onRefresh={handleApplicationsRefresh}
          isRefreshing={applicationsRefreshing}
          onBack={() => setView('dashboard')}
          allAlgorithms={allAlgorithms}
        />
      ) : (
        view === 'dashboard' ? (
          <motion.div
            key="dashboard"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.3 }}
            className="flex flex-col items-center justify-center min-h-[calc(100vh-8rem)] p-4"
          >
            <div className="w-full max-w-6xl mx-auto">
              <div className="text-center mb-12">
                <h1 className="text-4xl font-bold tracking-tight">Admin Control Center</h1>
                <p className="text-lg text-muted-foreground mt-2">Select a profile to manage.</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                  <Card
                    onClick={() => setView('tables')}
                    className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                  >
                    <CardHeader>
                      <div className="flex items-center gap-4 mb-4">
                        <div className="p-3 bg-primary/10 rounded-lg">
                          <Library className="h-8 w-8 text-primary" />
                        </div>
                        <div>
                          <CardTitle className="text-2xl">Organizational Cryptography Profile</CardTitle>
                          <CardDescription className="text-base">View and manage all cryptographic algorithm tables.</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Configure symmetric, asymmetric, hash functions, MACs, KDFs, and Post-Quantum algorithms. Set visibility, edit properties, and add new entries to the organization's crypto standards.
                      </p>
                    </CardContent>
                    <div className="p-6 pt-0">
                      <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                        Manage Profile <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </Button>
                    </div>
                  </Card>
                </motion.div>
                
                <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                  <Card
                    onClick={() => setView('applications')}
                    className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                  >
                    <CardHeader>
                      <div className="flex items-center gap-4 mb-4">
                        <div className="p-3 bg-secondary rounded-lg">
                          <LayoutGrid className="h-8 w-8 text-secondary-foreground" />
                        </div>
                        <div>
                          <CardTitle className="text-2xl">Applications</CardTitle>
                          <CardDescription className="text-base">View and manage cryptographic profiles for applications.</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Dynamically view application-specific cryptographic profiles and settings.
                      </p>
                    </CardContent>
                    <div className="p-6 pt-0">
                      <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                        Manage Applications <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </Button>
                    </div>
                  </Card>
                </motion.div>
              </div>
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="tables"
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.3 }}
            className="p-4 sm:p-6"
          >
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold">Cryptography Profile Management</h1>
              <Button variant="outline" onClick={() => setView('dashboard')}><ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard</Button>
            </div>

            <div className="space-y-8">
              <CryptoTable 
                title="Symmetric Algorithms" 
                data={symmetricData} 
                columns={commonColumns} 
                isEdited={isSymmetricEdited}
                onUpdate={onSymmetricUpdate}
                onReset={onSymmetricReset}
              />
              <CryptoTable 
                title="Asymmetric Algorithms" 
                data={asymmetricData} 
                columns={commonColumns} 
                isEdited={isAsymmetricEdited} 
                onUpdate={onAsymmetricUpdate}
                onReset={onAsymmetricReset}
              />
              <CryptoTable 
                title="Hash Functions" 
                data={hashData} 
                columns={commonColumns} 
                isEdited={isHashEdited} 
                onUpdate={onHashUpdate}
                onReset={onHashReset}
              />
              <CryptoTable 
                title="MACs & KDFs" 
                data={macKdfData} 
                columns={commonColumns} isEdited={isMacKdfEdited} 
                onUpdate={onMacKdfUpdate}
                onReset={onMacKdfReset}
              />
              <CryptoTable 
                title="Post-Quantum Cryptography" 
                data={pqcData} columns={commonColumns} isEdited={isPqcEdited} 
                onUpdate={onPqcUpdate}
                onReset={onPqcReset}
              />
            </div>

            <div className="mt-8 flex justify-end gap-4">
              <Button onClick={handleSaveChanges}><Save className="h-4 w-4 mr-2" /> Save Changes</Button>
              <Button variant="outline" onClick={handleReset}><RotateCcw className="h-4 w-4 mr-2" /> Reset All</Button>
            </div>
          </motion.div>
        )
      )}
    </AnimatePresence>
  );
};

export default Profile;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Reports.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

import { type VariantProps } from "class-variance-authority";
import { motion } from "framer-motion";
import { Badge, badgeVariants } from "@/components/ui/badge";
import { Download, FileText, TrendingUp, Calendar, BarChart3 } from "lucide-react";
import { useQuery } from "@tanstack/react-query";

interface Report {
  id: string;
  title: string;
  description: string;
  type: "Security" | "Compliance" | "Performance" | "Summary";
  generated: string;
  status: "Ready" | "Generating" | "Failed";
  size: string;
}

const fetchReports = async (): Promise<Report[]> => {
  const reports: Report[] = [
    {
      id: "RPT-001",
      title: "Weekly PQC Security Assessment",
      description: "Comprehensive analysis of post-quantum cryptography implementation across all applications",
      type: "Security",
      generated: "2024-01-15",
      status: "Ready",
      size: "2.3 MB"
    },
    {
      id: "RPT-002", 
      title: "Vulnerability Remediation Report",
      description: "Detailed breakdown of quantum-related vulnerabilities and remediation progress",
      type: "Security",
      generated: "2024-01-14",
      status: "Ready", 
      size: "1.8 MB"
    },
    {
      id: "RPT-003",
      title: "NIST PQC Compliance Report",
      description: "Compliance status against NIST post-quantum cryptography standards",
      type: "Compliance",
      generated: "2024-01-13",
      status: "Ready",
      size: "3.1 MB"
    },
    {
      id: "RPT-004",
      title: "Algorithm Performance Metrics", 
      description: "Performance analysis of implemented PQC algorithms vs classical cryptography",
      type: "Performance",
      generated: "2024-01-12",
      status: "Generating",
      size: "Pending"
    },
    {
      id: "RPT-005",
      title: "Executive Summary - Q1 2024",
      description: "High-level overview of PQC readiness and security posture for executive review",
      type: "Summary",
      generated: "2024-01-10",
      status: "Ready",
      size: "890 KB"
    }
  ];
  return new Promise(resolve => setTimeout(() => resolve(reports), 500));
}

export default function Reports() {
  const { data: reports = [], isLoading, error } = useQuery<Report[], Error>({
    queryKey: ["reports"],
    queryFn: fetchReports,
  });

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "Security": return <TrendingUp className="h-4 w-4" />;
      case "Compliance": return <FileText className="h-4 w-4" />;
      case "Performance": return <BarChart3 className="h-4 w-4" />;
      case "Summary": return <Calendar className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  type BadgeVariant = VariantProps<typeof badgeVariants>["variant"];

  const getTypeVariant = (type: string): BadgeVariant => {
    switch (type) {
      case "Security": return "destructive";
      case "Compliance": return "default";
      case "Performance": return "secondary";
      case "Summary": return "outline";
      default: return "outline";
    }
  };

  const getStatusVariant = (status: string): BadgeVariant => {
    switch (status) {
      case "Ready": return "default";
      case "Generating": return "secondary";
      case "Failed": return "destructive";
      default: return "outline";
    }
  };

  const quickReports = [
    {
      title: "Application Security Summary",
      description: "Current PQC implementation status across all monitored applications"
    },
    {
      title: "Critical Vulnerabilities Report", 
      description: "All critical and high severity quantum-related vulnerabilities"
    },
    {
      title: "Algorithm Usage Analysis",
      description: "Breakdown of cryptographic algorithms in use and their quantum resistance"
    },
    {
      title: "Compliance Gap Analysis",
      description: "Analysis of gaps in NIST PQC standard compliance"
    }
  ];

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Reports</h2>
        </div>
        <Button className="gap-2">
          <FileText className="h-4 w-4" />
          <span className="hidden sm:inline">Generate Custom Report</span>
          <span className="sm:hidden">New Report</span>
        </Button>
      </div>

      <motion.div
        className="grid grid-cols-1 lg:grid-cols-3 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1 } },
        }}
      >
        {/* Quick Reports */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="text-lg font-semibold text-foreground">
                Quick Reports
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {quickReports.map((report, index) => (
                <div key={index} className="p-3 border border-border rounded-lg hover:bg-accent/20 transition-colors">
                  <h4 className="font-medium text-foreground text-sm">{report.title}</h4>
                  <p className="text-xs text-muted-foreground mt-1">{report.description}</p>
                  <Button variant="outline" size="sm" className="mt-2 w-full">
                    Generate
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>

        {/* Recent Reports */}
        <motion.div className="lg:col-span-2" variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="text-lg font-semibold text-foreground">
                Recent Reports
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {reports.map((report) => (
                <div key={report.id} className="border border-border rounded-lg p-4 hover:shadow-sm transition-shadow">
                  <div className="flex flex-col sm:flex-row items-start justify-between gap-3 mb-3">
                    <div className="flex items-start gap-3">
                      {getTypeIcon(report.type)}
                      <div>
                        <h4 className="font-semibold text-foreground">{report.title}</h4>
                        <p className="text-sm text-muted-foreground mt-1">{report.description}</p>
                      </div>
                    </div>
                    <div className="flex gap-2 flex-shrink-0 self-start sm:self-center">
                      <Badge variant={getTypeVariant(report.type)}>
                        {report.type}
                      </Badge>
                      <Badge variant={getStatusVariant(report.status)}>
                        {report.status}
                      </Badge>
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between text-sm text-muted-foreground gap-4">
                    <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
                      <span><strong>ID:</strong> {report.id}</span>
                      <span><strong>Generated:</strong> {report.generated}</span>
                      <span><strong>Size:</strong> {report.size}</span>
                    </div>
                    
                    <div className="flex gap-2">
                      {report.status === "Ready" && (
                        <>
                          <Button variant="outline" size="sm" className="gap-2">
                            <Download className="h-4 w-4" />
                            Download
                          </Button>
                          <Button variant="outline" size="sm">
                            View
                          </Button>
                        </>
                      )}
                      {report.status === "Generating" && (
                        <Button variant="outline" size="sm" disabled>
                          Generating...
                        </Button>
                      )}
                      {report.status === "Failed" && (
                        <Button variant="outline" size="sm">
                          Retry
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>

      {/* Report Metrics */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1, delayChildren: 0.2 } },
        }}
      >
        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                  <FileText className="h-6 w-6 text-primary" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Total Reports</p>
                  <p className="text-2xl font-bold text-foreground">{reports.length}</p>
                  <p className="text-xs text-success">+3 this week</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                  <Download className="h-6 w-6 text-success" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Downloads</p>
                  <p className="text-2xl font-bold text-foreground">234</p>
                  <p className="text-xs text-success">+12 this week</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={cardVariants}>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                  <TrendingUp className="h-6 w-6 text-warning" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Automated Reports</p>
                  <p className="text-2xl font-bold text-foreground">12</p>
                  <p className="text-xs text-muted-foreground">Scheduled weekly</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\scan.tsx ---
import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Save, RotateCcw, ArrowLeft, ArrowRight, Globe } from "lucide-react";
import { CryptoTable, CryptoAlgorithm, ColumnDef } from "@/components/profile/crypto table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import WebScan from '@/components/scan/webscan'; // Import the autonomous WebScan component

// ============================================================================
// INTERFACES & TYPES
// ============================================================================

interface ApiCryptoAlgorithm {
  Section: string;
  Algorithm_Name: string;
  Variant: string;
  Purpose: string;
  Usage_Context: string;
  Status_Today: string;
  PQC_Status: string;
  Priority: string;
  Classical_Recommended: string;
  Quantum_Recommended: string;
  NIST_Reference: string;
  Notes: string;
}

type ViewType = 'dashboard' | 'tables' | 'webscan';

// ============================================================================
// API CONFIGURATION
// ============================================================================

const API_CONFIG = {
  cryptoApi: "https://backend-1-v77y.onrender.com/api",
  scanApi: "http://localhost:8000/"
};

// ============================================================================
// API FUNCTIONS
// ============================================================================

const fetchDataFromAPI = async (): Promise<ApiCryptoAlgorithm[]> => {
  try {
    const response = await fetch(`${API_CONFIG.cryptoApi}/apps3`);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    const result = await response.json();
    console.log('âœ… API data fetched successfully');
    return result.data || [];
  } catch (error) {
    console.error('âŒ Failed to fetch data from API:', error);
    return [];
  }
};

const transformApiData = (apiData: ApiCryptoAlgorithm[]): CryptoAlgorithm[] => {
  return apiData.map((item, index) => ({
    id: `${item.Algorithm_Name}-${index}`,
    algorithm_name: item.Algorithm_Name,
    variant: item.Variant,
    purpose: item.Purpose,
    usage_context: item.Usage_Context ? item.Usage_Context.split(',').map(s => s.trim()) : [],
    status_today: item.Status_Today,
    pqc_status: item.PQC_Status,
    priority: item.Priority,
    classical_recommended: item.Classical_Recommended,
    quantum_recommended: item.Quantum_Recommended,
    nist_reference: item.NIST_Reference ? item.NIST_Reference.split(',').map(s => s.trim()) : [],
    notes: item.Notes,
    section: item.Section,
    visible: false,
  }));
};

const categorizeApiData = (transformedData: CryptoAlgorithm[]) => {
  const categories: { [key: string]: CryptoAlgorithm[] } = {
    symmetric: [],
    asymmetric: [],
    hash: [],
    mac_kdf: [],
    pqc: [],
  };
  
  const keywordMap = {
    pqc: ['kyber', 'dilithium', 'falcon', 'sphincs', 'ntru', 'bike'],
    mac_kdf: ['hmac', 'cmac', 'pbkdf2', 'hkdf', 'argon', 'bcrypt', 'scrypt', 'gcm', 'ccm', 'chacha20', 'poly1305'],
    asymmetric: ['rsa', 'ecc', 'dsa', 'diffie-hellman', 'x25519', 'ed25519'],
    hash: ['sha', 'md5'],
    symmetric: ['aes', 'des', 'rc4', 'rc5', 'blowfish', 'camellia', 'seed'],
  };  

  transformedData.forEach(item => {
    const section = item.section?.toLowerCase() || '';
    if (section.includes('asymmetric')) {
      categories.asymmetric.push(item);
    } else if (section.includes('symmetric')) {
      categories.symmetric.push(item);
    } else if (section.includes('hash')) {
      categories.hash.push(item);
    } else if (section.includes('mac') || section.includes('kdf')) {
      categories.mac_kdf.push(item);
    } else if (section.includes('post-quantum')) {
      categories.pqc.push(item);
    } else {
      const name = item.algorithm_name.toLowerCase();
      let found = false;
      for (const category in keywordMap) {
        if (keywordMap[category].some(keyword => name.includes(keyword))) {
          categories[category as keyof typeof categories].push(item);
          found = true;
          break;
        }
      }
      if (!found) {
        console.warn(`Could not categorize: ${item.algorithm_name}`);
      }
    }
  });

  return categories;
};

const commonColumns: ColumnDef[] = [
  { key: "algorithm_name", header: "Algorithm" },
  { key: "variant", header: "Variant" },
  { key: "purpose", header: "Purpose" },
  { key: "priority", header: "Priority" },
  { key: "usage_context", header: "Usage Context" },
  { key: "status_today", header: "Status" },
  { key: "pqc_status", header: "PQC Status" },
  { key: "notes", header: "Notes" },
];

// ============================================================================
// MAIN SCAN COMPONENT (DASHBOARD CONTROLLER)
// ============================================================================

const Scan = () => {
  const [symmetricData, setSymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [asymmetricData, setAsymmetricData] = useState<CryptoAlgorithm[]>([]);
  const [hashData, setHashData] = useState<CryptoAlgorithm[]>([]);
  const [macKdfData, setMacKdfData] = useState<CryptoAlgorithm[]>([]);
  const [pqcData, setPqcData] = useState<CryptoAlgorithm[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [view, setView] = useState<ViewType>('dashboard');

  const [isSymmetricEdited, setIsSymmetricEdited] = useState(false);
  const [isAsymmetricEdited, setIsAsymmetricEdited] = useState(false);
  const [isHashEdited, setIsHashEdited] = useState(false);
  const [isMacKdfEdited, setIsMacKdfEdited] = useState(false);
  const [isPqcEdited, setIsPqcEdited] = useState(false);

  const initialCategorizedData = useRef<{ [key: string]: CryptoAlgorithm[] }>({});

  useEffect(() => {
    const initializeData = async () => {
      try {
        const apiData = await fetchDataFromAPI();
        const transformedData = transformApiData(apiData);
        const categorizedData = categorizeApiData(transformedData);

        const withVisible = (data: CryptoAlgorithm[], count: number) =>
          data.map((item, index) => ({ ...item, visible: index < count }));

        const initialSymmetric = withVisible(categorizedData.symmetric || [], 3);
        const initialAsymmetric = withVisible(categorizedData.asymmetric || [], 3);
        const initialHash = withVisible(categorizedData.hash || [], 3);
        const initialMacKdf = withVisible(categorizedData.mac_kdf || [], 3);
        const initialPqc = withVisible(categorizedData.pqc || [], 3);

        initialCategorizedData.current = { 
          symmetric: initialSymmetric, 
          asymmetric: initialAsymmetric, 
          hash: initialHash, 
          mac_kdf: initialMacKdf, 
          pqc: initialPqc 
        };

        setSymmetricData(initialSymmetric);
        setAsymmetricData(initialAsymmetric);
        setHashData(initialHash);
        setMacKdfData(initialMacKdf);
        setPqcData(initialPqc);

      } catch (error) {
        console.error('âŒ Error initializing profile data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeData();
  }, []);

  const handleSaveChanges = () => {
    console.log("Saving all changes...");
    console.log("Symmetric:", symmetricData);
    console.log("Asymmetric:", asymmetricData);
    console.log("Hash:", hashData);
    console.log("MAC/KDF:", macKdfData);
    console.log("PQC:", pqcData);
  };

  const handleReset = () => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsSymmetricEdited(false);
    setIsAsymmetricEdited(false);
    setIsHashEdited(false);
    setIsMacKdfEdited(false);
    setIsPqcEdited(false);
    console.log("All tables reset to original state.");
  };

  const onSymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setSymmetricData(d);
    setIsSymmetricEdited(true);
  }, []);
  const onSymmetricReset = useCallback(() => {
    setSymmetricData([...(initialCategorizedData.current.symmetric || [])]);
    setIsSymmetricEdited(false);
  }, []);

  const onAsymmetricUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setAsymmetricData(d);
    setIsAsymmetricEdited(true);
  }, []);
  const onAsymmetricReset = useCallback(() => {
    setAsymmetricData([...(initialCategorizedData.current.asymmetric || [])]);
    setIsAsymmetricEdited(false);
  }, []);

  const onHashUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setHashData(d);
    setIsHashEdited(true);
  }, []);
  const onHashReset = useCallback(() => {
    setHashData([...(initialCategorizedData.current.hash || [])]);
    setIsHashEdited(false);
  }, []);

  const onMacKdfUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setMacKdfData(d);
    setIsMacKdfEdited(true);
  }, []);
  const onMacKdfReset = useCallback(() => {
    setMacKdfData([...(initialCategorizedData.current.mac_kdf || [])]);
    setIsMacKdfEdited(false);
  }, []);

  const onPqcUpdate = useCallback((d: CryptoAlgorithm[]) => {
    setPqcData(d);
    setIsPqcEdited(true);
  }, []);
  const onPqcReset = useCallback(() => {
    setPqcData([...(initialCategorizedData.current.pqc || [])]);
    setIsPqcEdited(false);
  }, []);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <p>Loading Scan Center...</p>
        </div>
      </div>
    );
  }

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  // ============================================================================
  // RENDER LOGIC
  // ============================================================================

  return (
    <AnimatePresence mode="wait">
      {view === 'webscan' ? (
        // WebScan handles its own UI completely
        <WebScan
          key="webscan"
          onBack={() => setView('dashboard')}
          apiBaseUrl={API_CONFIG.scanApi}
        />
      ) : view === 'dashboard' ? (
        // Dashboard View - Simple Navigation
        <motion.div
          key="dashboard"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          transition={{ duration: 0.3 }}
          className="flex flex-col items-center justify-center min-h-[calc(100vh-8rem)] p-4"
        >
          <div className="w-full max-w-2xl mx-auto">
            <div className="text-center mb-12">
              <h1 className="text-4xl font-bold tracking-tight">Scan Center</h1>
              <p className="text-lg text-muted-foreground mt-2">Select a scan type to begin.</p>
            </div>
            <div className="grid grid-cols-1 gap-8">
              <motion.div whileHover={{ y: -5, scale: 1.02 }} transition={{ type: 'spring', stiffness: 300 }}>
                <Card
                  onClick={() => setView('webscan')}
                  className="h-full flex flex-col justify-between cursor-pointer group border-2 hover:border-primary/50 transition-all"
                >
                  <CardHeader>
                    <div className="flex items-center gap-4 mb-4">
                      <div className="p-3 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                        <Globe className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                      </div>
                      <div>
                        <CardTitle className="text-2xl">Web Scan</CardTitle>
                        <CardDescription className="text-base">Scan your web assets for vulnerabilities.</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      Initiate scans on your public-facing websites and APIs to identify cryptographic weaknesses and compliance issues.
                    </p>
                  </CardContent>
                  <div className="p-6 pt-0">
                    <Button variant="outline" className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors">
                      Start Scan <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                    </Button>
                  </div>
                </Card>
              </motion.div>
            </div>
          </div>
        </motion.div>
      ) : (
        // Tables View - Cryptography Management
        <motion.div
          key="tables"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          transition={{ duration: 0.3 }}
          className="p-4 sm:p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-2xl font-bold">Cryptography Profile Management</h1>
            <Button variant="outline" onClick={() => setView('dashboard')}>
              <ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard
            </Button>
          </div>

          <div className="space-y-8">
            <CryptoTable 
              title="Symmetric Algorithms" 
              data={symmetricData} 
              columns={commonColumns} 
              isEdited={isSymmetricEdited}
              onUpdate={onSymmetricUpdate}
              onReset={onSymmetricReset}
            />
            <CryptoTable 
              title="Asymmetric Algorithms" 
              data={asymmetricData} 
              columns={commonColumns} 
              isEdited={isAsymmetricEdited} 
              onUpdate={onAsymmetricUpdate}
              onReset={onAsymmetricReset}
            />
            <CryptoTable 
              title="Hash Functions" 
              data={hashData} 
              columns={commonColumns} 
              isEdited={isHashEdited} 
              onUpdate={onHashUpdate}
              onReset={onHashReset}
            />
            <CryptoTable 
              title="MACs & KDFs" 
              data={macKdfData} 
              columns={commonColumns} 
              isEdited={isMacKdfEdited} 
              onUpdate={onMacKdfUpdate}
              onReset={onMacKdfReset}
            />
            <CryptoTable 
              title="Post-Quantum Cryptography" 
              data={pqcData} 
              columns={commonColumns} 
              isEdited={isPqcEdited} 
              onUpdate={onPqcUpdate}
              onReset={onPqcReset}
            />
          </div>

          <div className="mt-8 flex justify-end gap-4">
            <Button onClick={handleSaveChanges}>
              <Save className="h-4 w-4 mr-2" /> Save Changes
            </Button>
            <Button variant="outline" onClick={handleReset}>
              <RotateCcw className="h-4 w-4 mr-2" /> Reset All
            </Button>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default Scan;

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Settings.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { motion } from "framer-motion";
import { Settings as SettingsIcon, Bell, Shield, Database, Users, Save } from "lucide-react";

export default function Settings() {
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };
  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <div>
        <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Settings</h2>
        <p className="text-muted-foreground">
          Configure your post-quantum cryptography dashboard preferences and settings
        </p>
      </div>

      <motion.div
        className="grid grid-cols-1 lg:grid-cols-2 gap-6"
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.1 } },
        }}
      >
        {/* General Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <SettingsIcon className="h-5 w-5" />
                General Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="org-name">Organization Name</Label>
                <Input id="org-name" placeholder="Your Organization" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="dashboard-refresh">Dashboard Refresh Interval</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select interval" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 seconds</SelectItem>
                    <SelectItem value="60">1 minute</SelectItem>
                    <SelectItem value="300">5 minutes</SelectItem>
                    <SelectItem value="600">10 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="timezone">Timezone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select timezone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="utc">UTC</SelectItem>
                    <SelectItem value="est">Eastern Time</SelectItem>
                    <SelectItem value="pst">Pacific Time</SelectItem>
                    <SelectItem value="cet">Central European Time</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="dark-mode">Dark Mode</Label>
                  <p className="text-sm text-muted-foreground">Enable dark theme</p>
                </div>
                <Switch id="dark-mode" className="sm:ml-auto" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Notification Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="h-5 w-5" />
                Notifications
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="email-alerts">Email Alerts</Label>
                  <p className="text-sm text-muted-foreground">Receive email notifications</p>
                </div>
                <Switch id="email-alerts" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="critical-vulns">Critical Vulnerabilities</Label>
                  <p className="text-sm text-muted-foreground">Immediate alerts for critical issues</p>
                </div>
                <Switch id="critical-vulns" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="weekly-reports">Weekly Reports</Label>
                  <p className="text-sm text-muted-foreground">Automated weekly summary reports</p>
                </div>
                <Switch id="weekly-reports" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="compliance-updates">Compliance Updates</Label>
                  <p className="text-sm text-muted-foreground">NIST PQC standard updates</p>
                </div>
                <Switch id="compliance-updates" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="notification-email">Notification Email</Label>
                <Input id="notification-email" type="email" placeholder="admin@company.com" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Security Settings */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Security Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="scan-frequency">Automatic Scan Frequency</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select frequency" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="daily">Daily</SelectItem>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                    <SelectItem value="manual">Manual Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="auto-remediation">Auto-Remediation</Label>
                  <p className="text-sm text-muted-foreground">Automatically fix low-risk issues</p>
                </div>
                <Switch id="auto-remediation" className="sm:ml-auto" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="threat-intel">Threat Intelligence</Label>
                  <p className="text-sm text-muted-foreground">External threat data integration</p>
                </div>
                <Switch id="threat-intel" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="risk-threshold">Risk Score Threshold</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select threshold" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low (1-3)</SelectItem>
                    <SelectItem value="medium">Medium (4-6)</SelectItem>
                    <SelectItem value="high">High (7-8)</SelectItem>
                    <SelectItem value="critical">Critical (9-10)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Data & Integration */}
        <motion.div variants={cardVariants}>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Database className="h-5 w-5" />
                Data & Integration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="data-retention">Data Retention Period</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select period" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 days</SelectItem>
                    <SelectItem value="90">90 days</SelectItem>
                    <SelectItem value="180">6 months</SelectItem>
                    <SelectItem value="365">1 year</SelectItem>
                    <SelectItem value="unlimited">Unlimited</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="export-enabled">Data Export</Label>
                  <p className="text-sm text-muted-foreground">Allow data export to external systems</p>
                </div>
                <Switch id="export-enabled" defaultChecked className="sm:ml-auto" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="api-endpoint">API Endpoint</Label>
                <Input id="api-endpoint" placeholder="https://api.yourcompany.com/pqc" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="backup-location">Backup Location</Label>
                <Input id="backup-location" placeholder="s3://your-bucket/backups" />
              </div>

              <div className="flex flex-col items-start gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <Label htmlFor="auto-backup">Automatic Backups</Label>
                  <p className="text-sm text-muted-foreground">Daily automated backups</p>
                </div>
                <Switch id="auto-backup" defaultChecked className="sm:ml-auto" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>

      {/* User Management */}
      <motion.div variants={cardVariants}>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              User Management
            </CardTitle>
          </CardHeader>
          <CardContent>
              <div className="overflow-x-auto responsive-table-container">
              <table className="w-full text-sm">
                <thead className="hidden md:table-header-group">
                  <tr className="border-b border-border">
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">User</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Role</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Last Active</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Status</th>
                    <th className="text-left py-3 px-4 font-medium text-muted-foreground">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr className="block md:table-row border-b border-border/50">
                    <td className="p-4 md:py-3 md:px-4 font-medium text-foreground md:table-cell">
                      <div>
                        <p className="font-medium text-foreground">admin@company.com</p>
                        <p className="text-sm text-muted-foreground">Administrator</p>
                      </div>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Role">Admin</td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Last Active">2 minutes ago</td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Status">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-success/10 text-success">
                        Active
                      </span>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Actions">
                      <Button variant="outline" size="sm">Edit</Button>
                    </td>
                  </tr>
                  <tr className="block md:table-row border-b border-border/50">
                    <td className="p-4 md:py-3 md:px-4 font-medium text-foreground md:table-cell">
                      <div>
                        <p className="font-medium text-foreground">security@company.com</p>
                        <p className="text-sm text-muted-foreground">Security Analyst</p>
                      </div>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Role">Analyst</td>
                    <td className="p-4 md:py-3 md:px-4 text-muted-foreground md:table-cell" data-label="Last Active">1 hour ago</td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Status">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-success/10 text-success">
                        Active
                      </span>
                    </td>
                    <td className="p-4 md:py-3 md:px-4 md:table-cell" data-label="Actions">
                      <Button variant="outline" size="sm">Edit</Button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
              <p className="text-sm text-muted-foreground">2 users total</p>
              <Button variant="outline">Add User</Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button className="gap-2">
          <Save className="h-4 w-4" />
          Save Settings
        </Button>
      </div>
    </motion.div>
  );
}

--- File: C:\Users\ASUS\Videos\xencrypt\Frontend\src\pages\Vulnerabilities.tsx ---
import { useMemo } from "react";
import { motion } from "framer-motion";
import { useQuery } from "@tanstack/react-query";
import { transformApiDataToUnifiedFormat } from "@/components/vulnerabilities/utils";
import {
  RawApiData, UnifiedData, Vulnerability, AlgorithmData,
  SeverityCounts, PQCStats, TypeDistribution
} from "@/components/vulnerabilities/types";
import { LoadingSpinner, ErrorDisplay, EmptyState } from "@/components/vulnerabilities/StateDisplays";
import { PageHeader } from "@/components/vulnerabilities/PageHeader";
import { Charts } from "@/components/vulnerabilities/Charts";
import { AlgorithmsTable } from "@/components/vulnerabilities/AlgorithmsTable";
import { VulnerabilityCategoryTable } from "@/components/vulnerabilities/VulnerabilityCategoryTable";
import { MetricCard } from "@/components/dashboard/MetricCard";
import {
  ShieldAlert,
  ShieldCheck,
  Shield,
  Cpu,
  ShieldOff
} from "lucide-react";

const fetchVulnerabilities = async (): Promise<RawApiData[]> => {
  const response = await fetch(`${import.meta.env.VITE_API_URL}/apps2`);
  if (!response.ok) {
    throw new Error(`API Error: ${response.status} ${response.statusText}`);
  }
  const apiData = await response.json();
  if (!Array.isArray(apiData)) {
    throw new Error('API response is not an array');
  }
  return apiData;
};

export default function VulnerabilitiesPage() {
  const { data: rawData = [], error, isLoading, isFetching, refetch } = useQuery<RawApiData[], Error>({
    queryKey: ["vulnerabilities"],
    queryFn: fetchVulnerabilities,
  });

  // Transform raw API data to unified format
  const unifiedData: UnifiedData[] = useMemo(() => {
    if (!rawData || rawData.length === 0) return [];
    return transformApiDataToUnifiedFormat(rawData);
  }, [rawData]);

  // Generate vulnerabilities from the unified data
  const vulnerabilities: Vulnerability[] = useMemo(() => {
    return unifiedData.map(item => ({
      id: item.id,
      title: item.title,
      severity: item.severity,
      description: item.description,
      affectedSystems: item.affectedSystems,
      status: item.status,
      discoveredDate: item.discoveredDate
    }));
  }, [unifiedData]);

  // Use the same data for algorithms table and charts
  const algorithmsData: AlgorithmData[] = useMemo(() => {
    return unifiedData.map(item => ({
      id: item.id,
      name: item.name,
      type: item.type,
      strength: item.strength,
      nistStatus: item.nistStatus,
      isPqc: item.isPqc,
      usage: item.usage,
      implementationComplexity: item.implementationComplexity,
      description: item.description,
      quantumVulnerability: item.quantumVulnerability,
      recommendedReplacement: item.recommendedReplacement,
      performanceImpact: item.performanceImpact,
      adoptionRate: item.adoptionRate
    }));
  }, [unifiedData]);

  // Calculate metrics from real data
  const severityCounts: SeverityCounts = useMemo(() => ({
    Critical: vulnerabilities.filter(v => v.severity === "Critical").length,
    High: vulnerabilities.filter(v => v.severity === "High").length,
    Medium: vulnerabilities.filter(v => v.severity === "Medium").length,
    Low: vulnerabilities.filter(v => v.severity === "Low").length,
  }), [vulnerabilities]);

  const pqcStats: PQCStats = useMemo(() => {
    const total = algorithmsData.length;
    const pqcCount = algorithmsData.filter(a => a.isPqc).length;
    const legacyCount = total - pqcCount;
    return {
      total,
      pqc: pqcCount,
      legacy: legacyCount,
      pqcPercentage: total > 0 ? ((pqcCount / total) * 100).toFixed(1) : 0
    };
  }, [algorithmsData]);

  const typeDistribution: TypeDistribution[] = useMemo(() => {
    const types = algorithmsData.reduce((acc: Record<string, number>, alg) => {
      acc[alg.type] = (acc[alg.type] || 0) + 1;
      return acc;
    }, {});
    
    return Object.entries(types).map(([type, count]) => ({ type, count: count as number }));
  }, [algorithmsData]);

  const legacyPercentage = useMemo(() => {
    if (pqcStats.total === 0) return '0.0';
    return ((pqcStats.legacy / pqcStats.total) * 100).toFixed(1);
  }, [pqcStats]);

  if (isLoading) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
            </div>
            <LoadingSpinner />
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
              <p className="text-muted-foreground text-sm sm:text-base">Failed to connect to backend</p>
            </div>
            <ErrorDisplay error={error.message} onRetry={refetch} />
          </div>
        </div>
      </div>
    );
  }

  if (algorithmsData.length === 0) {
    return (
      <div className="min-h-dvh w-full overflow-hidden">
        <div className="space-y-8 p-4 sm:p-6 max-w-full">
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground">Vulnerabilities</h2>
            </div>
            <EmptyState onRefresh={refetch} />
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="space-y-6 p-4 sm:p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <PageHeader onRefresh={refetch} loading={isFetching} />
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <MetricCard
          title="Critical"
          value={severityCounts.Critical}
          icon={ShieldAlert}
          iconClassName="text-red-500"
          gradient
        />
        <MetricCard
          title="High"
          value={severityCounts.High}
          icon={ShieldAlert}
          iconClassName="text-orange-500"
          gradient
        />
        <MetricCard
          title="Medium"
          value={severityCounts.Medium}
          icon={Shield}
          iconClassName="text-yellow-500"
        />
        <MetricCard
          title="Low"
          value={severityCounts.Low}
          icon={ShieldCheck}
          iconClassName="text-green-500"
        />
        <MetricCard
          title="Total Algorithms"
          value={pqcStats.total}
          icon={Cpu}
        />
        <MetricCard
          title="Post-Quantum Ready"
          value={pqcStats.pqc}
          change={`${pqcStats.pqcPercentage}% of total`}
          icon={ShieldCheck}
          iconClassName="text-green-500"
        />
        <MetricCard
          title="Legacy Algorithms"
          value={pqcStats.legacy}
          change={`${legacyPercentage}% of total`}
          icon={ShieldOff}
          iconClassName="text-red-500"
        />
      </div>
      <Charts typeDistribution={typeDistribution} algorithmsData={algorithmsData} />
      <AlgorithmsTable algorithmsData={algorithmsData} />
      <VulnerabilityCategoryTable />
    </motion.div>
  );
}
